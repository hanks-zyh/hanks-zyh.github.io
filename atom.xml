<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hanks.xyz]]></title>
  <subtitle><![CDATA[coding]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://hanks.xyz/"/>
  <updated>2016-01-14T14:36:45.000Z</updated>
  <id>http://hanks.xyz/</id>
  
  <author>
    <name><![CDATA[Hanks]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Framework分析-Application的onCreate]]></title>
    <link href="http://hanks.xyz/2016/01/14/framework-application/"/>
    <id>http://hanks.xyz/2016/01/14/framework-application/</id>
    <published>2016-01-14T09:49:35.000Z</published>
    <updated>2016-01-14T14:36:45.000Z</updated>
    <content type="html"><![CDATA[<p>ActivityThread并不是一个Thread，而是一个单纯的Java类，查看一下 <code>ActivityThread</code> 的源码<code>final class ActivityThread</code>，并没有继承Thread或者实现Runnable接口，<code>ActivityThread</code> 其中包含 <code>main</code> 方法,程序的入口地方，怎么看出来的呢? 我们开发过程中总会出现程序异常信息，细心看一下log，查看最下面的几行，最终问题出在 <code>android.app.ActivityThread.main</code>.<br><a id="more"></a></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.Activity</span><span class="class">.performCreate</span>(Activity<span class="class">.java</span>:<span class="number">5133</span>)</span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.Instrumentation</span><span class="class">.callActivityOnCreate</span>(Instrumentation<span class="class">.java</span>:<span class="number">1087</span>)</span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="class">.performLaunchActivity</span>(ActivityThread<span class="class">.java</span>:<span class="number">2175</span>)</span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="class">.handleLaunchActivity</span>(ActivityThread<span class="class">.java</span>:<span class="number">2261</span>) </span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="class">.access</span>$<span class="number">600</span>(ActivityThread<span class="class">.java</span>:<span class="number">141</span>) </span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="variable">$H</span>.<span class="function"><span class="title">handleMessage</span><span class="params">(ActivityThread.java:<span class="number">1256</span>)</span></span> </span><br><span class="line">AndroidRuntime:     at android<span class="class">.os</span><span class="class">.Handler</span><span class="class">.dispatchMessage</span>(Handler<span class="class">.java</span>:<span class="number">99</span>) </span><br><span class="line">AndroidRuntime:     at android<span class="class">.os</span><span class="class">.Looper</span><span class="class">.loop</span>(Looper<span class="class">.java</span>:<span class="number">137</span>) </span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="class">.main</span>(ActivityThread<span class="class">.java</span>:<span class="number">5103</span>) </span><br><span class="line">AndroidRuntime:     at java<span class="class">.lang</span><span class="class">.reflect</span><span class="class">.Method</span><span class="class">.invokeNative</span>(Native Method) </span><br><span class="line">AndroidRuntime:     at java<span class="class">.lang</span><span class="class">.reflect</span><span class="class">.Method</span><span class="class">.invoke</span>(Method<span class="class">.java</span>:<span class="number">525</span>) </span><br><span class="line">AndroidRuntime:     at com<span class="class">.android</span><span class="class">.internal</span><span class="class">.os</span><span class="class">.ZygoteInit</span><span class="variable">$MethodAndArgsCaller</span>.<span class="function"><span class="title">run</span><span class="params">(ZygoteInit.java:<span class="number">737</span>)</span></span> </span><br><span class="line">AndroidRuntime:     at com<span class="class">.android</span><span class="class">.internal</span><span class="class">.os</span><span class="class">.ZygoteInit</span><span class="class">.main</span>(ZygoteInit<span class="class">.java</span>:<span class="number">553</span>) </span><br><span class="line">AndroidRuntime:     at dalvik<span class="class">.system</span><span class="class">.NativeStart</span><span class="class">.main</span>(Native Method)</span><br></pre></td></tr></table></figure>
<p>介绍相关几个类的结构:<br><code>class ApplicationThread extends ApplicationThreadNative</code><br><code>abstract class ApplicationThreadNative extends Binder implements IApplicationThread</code><br>ApplicationThread (Binder)对象。其中 Binder负责接收远程AMS的 IPC调用，接收到调用<br>后，则通过Handler把消息发送到消息队列，UI主线程会异步地从消息队列中取出消息并执行相应操作，比如 start、stop、pause 等。</p>
<p><code>class ActivityManagerService extends ActivityManagerNative</code><br><code>abstract class ActivityManagerNative extends Binder implements IActivityManager</code></p>
<p>从 <code>ActivityThread</code> 的<code>main()</code>方法开始分析，</p>
<h3 id="ActivityThread的main方法">ActivityThread的main方法</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    Looper.prepareMainLooper(); <span class="comment">//主线程的Looper对象</span></span><br><span class="line"></span><br><span class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread(); <span class="comment">// 创建ActivityThread</span></span><br><span class="line">    thread.attach(<span class="keyword">false</span>); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sMainThreadHandler = thread.getHandler(); <span class="comment">//主线程的Handler</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AsyncTask.init();</span><br><span class="line"></span><br><span class="line">    Looper.<span class="built_in">loop</span>(); <span class="comment">//消息循环</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ActivityThread的attach方法">ActivityThread的attach方法</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!system) &#123;</span><br><span class="line">        <span class="comment">// ActivityManagerService(AMS)的代理对象，用于跟AMS通信, IActivityManager具体实现类是 ActivityManagerProxy</span></span><br><span class="line">        <span class="comment">// ActivityManagerNative.getDefault返回ActivityManagerService的远程接口，即ActivityManagerProxy接口</span></span><br><span class="line">            IActivityManager mgr = ActivityManagerNative.getDefault(); </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mgr.attachApplication(mAppThread);<span class="comment">//  mAppThread是ActivityThread的成员变量， mAppThread = new ApplicationThread();</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                <span class="comment">// Ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>attach最终调用了<code>ActivityManagerService</code>的远程接口<code>ActivityManagerProxy</code>的<code>attachApplication</code>函数，传入的参数是mAppThread(ApplicationThread类型的Binder对象)，它的作用是用来进行进程间通信的.</p>
<h3 id="ActivityManagerProxy的attachApplication">ActivityManagerProxy的attachApplication</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">public</span> void attachApplication(<span class="type">IApplicationThread</span> app) throws <span class="type">RemoteException</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Parcel</span> <span class="typedef"><span class="keyword">data</span> = <span class="type">Parcel</span>.obtain<span class="container">()</span>;</span></span><br><span class="line">    <span class="type">Parcel</span> reply = <span class="type">Parcel</span>.obtain();</span><br><span class="line">    <span class="typedef"><span class="keyword">data</span>.writeInterfaceToken<span class="container">(<span class="type">IActivityManager</span>.<span class="title">descriptor</span>)</span>;</span></span><br><span class="line">    <span class="typedef"><span class="keyword">data</span>.writeStrongBinder<span class="container">(<span class="title">app</span>.<span class="title">asBinder</span>()</span>); //将app对象加到<span class="keyword">data</span></span></span><br><span class="line">    mRemote.transact(<span class="type">ATTACH_APPLICATION_TRANSACTION</span>, <span class="typedef"><span class="keyword">data</span>, reply, 0);</span></span><br><span class="line">    //跟服务端通信，transact的最后一个参数的含义是执行<span class="type">IPC</span>调用的模式，<span class="number">0</span> 表示服务端执行完指定服务后会返回一定的数据；<span class="number">1</span> 表示不返回任何数据</span><br><span class="line">    reply.readException();</span><br><span class="line">    <span class="typedef"><span class="keyword">data</span>.recycle<span class="container">()</span>;</span></span><br><span class="line">    reply.recycle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出<code>attachApplication</code>方法其实就是进行远程通信，向服务端发起一个 <code>ATTACH_APPLICATION_TRANSACTION</code>的消息.</p>
<p>补充一下Android中的 <strong>Binder机制</strong>，来自《Android内核剖析》</p>
<p>Binder,英文的意思是别针、回形针。我们经常用别针把两张纸“别” 在一起，而在Andmid中，<br>Binder用于完成进程间通信（IPC)，即把多个进程“别”在一起。比如，普通应用程序可以调用音乐播放服务提供的播放、暂停、停止等功能。Binder工作在Linux层面，属于一个驱动，只是这个驱动不需要硬件，或者说其操作的硬件是基于一小段内存。从线程的角度来讲，Binder驱动代码运行在内核态，客户端程序调用Binder是通过系统调用完成的.<br>Binder是一种架构，这种架构提供了服务端接口、Binder驱动、客户端接口三个模块。<br>首先来看服务端。一个Binder服务端实际上就是一个Binder类的对象，该对象一旦创建，内部就<br>启动一个隐藏线程。该线程接下来会接收Binder驱动发送的消息，收到消息后，会执行到Binder对象中的onTransact()函数，并按照该函数的参数执行不同的服务代码。因此，要实现一个Binder服务，就必须重载onTransact()方法。<br>可以想象，重载 onTransact()函数的主要内容是把onTransact()函数的参数转换为服务函数的参数，而onTransact()函数的参数来源是客户端调用transact()函数时输入的，因此，如果transact()有固定格式的输入，那么 onTransact()就会有固定格式的输出。<br>下面再看Binder驱动。任意一个服务端Binder对象被创建时，同时会在Binder驱动中创建一个<br>mRemote对象，该对象的类型也是Binder类。客户端要访问远程服务时，都是通过mRemote对象。<br><img src="http://file.bmob.cn/M02/47/A0/oYYBAFaXVu6AJgBvAAKJVqakFkA353.png" alt="Binder机制"></p>
<p>根据上面的表示，客户端调用 <code>transact()</code>函数之后，服务端会在 <code>onTransact()</code>中收到客户端传递的消息, 那么在ActivityManagerService的<code>onTransact()</code>方法中查找：</p>
<h3 id="ActivityManagerService的onTransact">ActivityManagerService的onTransact</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span><br><span class="line">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTransact</span><span class="params">(code, data, reply, flags)</span></span>; <span class="comment">//其实是调用父类ActivityManagerNative的onTransact处理</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="comment">// The activity manager only throws security exceptions, so let's</span></span><br><span class="line">        <span class="comment">// log all others.</span></span><br><span class="line">        <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> SecurityException)) &#123;</span><br><span class="line">            Slog.wtf(TAG, <span class="string">"Activity Manager Crash"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ActivityManagerNative的onTransact">ActivityManagerNative的onTransact</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span><br><span class="line">            <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">case</span> ATTACH_APPLICATION_TRANSACTION: &#123;</span><br><span class="line">            data.enforceInterface(IActivityManager.descriptor);</span><br><span class="line">            IApplicationThread app = ApplicationThreadNative.asInterface(</span><br><span class="line">                    data.readStrongBinder()); <span class="comment">// 取出客户端传过来的 app</span></span><br><span class="line">            <span class="keyword">if</span> (app != <span class="keyword">null</span>) &#123;</span><br><span class="line">                attachApplication(app); <span class="comment">//调用 ActivityManagerService的attachApplication 方法</span></span><br><span class="line">            &#125;</span><br><span class="line">            reply.writeNoException();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ActivityManagerService的attachApplication">ActivityManagerService的attachApplication</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">           attachApplicationLocked(thread, callingPid); <span class="comment">//调用 attachApplicationLocked</span></span><br><span class="line">           Binder.restoreCallingIdentity(origId);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ActivityManagerService的attachApplicationLocked">ActivityManagerService的attachApplicationLocked</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private final boolean attachApplicationLocked(IApplicationThread thread,</span><br><span class="line">            int pid) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">         </span><br><span class="line">        thread.bindApplication(processName, appInfo, providers,</span><br><span class="line">                <span class="keyword">app</span>.instrumentationClass, profileFile, profileFd, profileAutoStop,</span><br><span class="line">                <span class="keyword">app</span>.instrumentationArguments, <span class="keyword">app</span>.instrumentationWatcher,</span><br><span class="line">                <span class="keyword">app</span>.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,</span><br><span class="line">                isRestrictedBackupMode || !normalMode, <span class="keyword">app</span>.persistent,</span><br><span class="line">                new Configuration(mConfiguration), <span class="keyword">app</span>.compat, getCommonServicesLocked(),</span><br><span class="line">                mCoreSettingsObserver.getCoreSettingsLocked());   <span class="comment">//  </span></span><br><span class="line">        updateLruProcessLocked(<span class="keyword">app</span>, false, null);</span><br><span class="line">        <span class="keyword">app</span>.lastRequestedGc = <span class="keyword">app</span>.lastLowMemory = SystemClock.uptimeMillis();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终调用客户端的ApplicationThread的bindApplication</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> public final void bindApplication(<span class="type">String</span> processName,</span><br><span class="line">                <span class="type">ApplicationInfo</span> appInfo, <span class="type">List</span>&lt;<span class="type">ProviderInfo</span>&gt; providers,</span><br><span class="line">                <span class="type">ComponentName</span> instrumentationName, <span class="type">String</span> profileFile,</span><br><span class="line">                <span class="type">ParcelFileDescriptor</span> profileFd, boolean autoStopProfiler,</span><br><span class="line">                <span class="type">Bundle</span> instrumentationArgs, <span class="type">IInstrumentationWatcher</span> instrumentationWatcher,</span><br><span class="line">                <span class="type">IUiAutomationConnection</span> instrumentationUiConnection, int debugMode,</span><br><span class="line">                boolean enableOpenGlTrace, boolean isRestrictedBackupMode, boolean persistent,</span><br><span class="line">                <span class="type">Configuration</span> config, <span class="type">CompatibilityInfo</span> compatInfo, <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">IBinder</span>&gt; services,</span><br><span class="line">                <span class="type">Bundle</span> coreSettings) &#123;</span><br><span class="line"></span><br><span class="line">		    <span class="keyword">if</span> (services != null) &#123;</span><br><span class="line">		        // <span class="type">Setup</span> the service cache <span class="keyword">in</span> the <span class="type">ServiceManager</span></span><br><span class="line">		        <span class="type">ServiceManager</span>.initServiceCache(services);</span><br><span class="line">		    &#125;</span><br><span class="line"></span><br><span class="line">		    setCoreSettings(coreSettings);</span><br><span class="line"></span><br><span class="line">		    <span class="type">AppBindData</span> <span class="typedef"><span class="keyword">data</span> = new <span class="type">AppBindData</span><span class="container">()</span>;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.processName = processName;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.appInfo = appInfo;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.providers = providers;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.instrumentationName = instrumentationName;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.instrumentationArgs = instrumentationArgs;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.instrumentationWatcher = instrumentationWatcher;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.instrumentationUiAutomationConnection = instrumentationUiConnection;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.debugMode = debugMode;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.enableOpenGlTrace = enableOpenGlTrace;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.restrictedBackupMode = isRestrictedBackupMode;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.persistent = persistent;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.config = config;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.compatInfo = compatInfo;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.initProfileFile = profileFile;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.initProfileFd = profileFd;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.initAutoStopProfiler = false;</span></span><br><span class="line">		    sendMessage(<span class="type">H</span>.<span class="type">BIND_APPLICATION</span>, <span class="typedef"><span class="keyword">data</span>); // <span class="type">Handler</span>发送消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回调到mH（Handler）的handleMessage方法，然后调用了 <code>handleBindApplication(data)</code> 方法</p>
<h3 id="ApplicationThread的handleBindApplication">ApplicationThread的handleBindApplication</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void handleBindApplication(AppBindData data) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Allow disk access during application and provider setup. This could</span></span><br><span class="line">        <span class="comment">// block processing ordered broadcasts, but later processing would</span></span><br><span class="line">        <span class="comment">// probably end up doing the same disk access.</span></span><br><span class="line">        <span class="keyword">final</span> StrictMode.ThreadPolicy savedPolicy = StrictMode.allowThreadDiskWrites();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// If the app is being launched for full backup or restore, bring it up in</span></span><br><span class="line">            <span class="comment">// a restricted environment with the base application class.</span></span><br><span class="line">            Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>); <span class="comment">//创建一个Application对象</span></span><br><span class="line">            mInitialApplication = app;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// don't bring up providers in restricted mode; they may depend on the</span></span><br><span class="line">            <span class="comment">// app's custom Application class</span></span><br><span class="line">            <span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</span><br><span class="line">                <span class="keyword">List</span>&lt;ProviderInfo&gt; providers = data.providers;</span><br><span class="line">                <span class="keyword">if</span> (providers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    installContentProviders(app, providers);</span><br><span class="line">                    <span class="comment">// For process that contains content providers, we want to</span></span><br><span class="line">                    <span class="comment">// ensure that the JIT is enabled "at some point".</span></span><br><span class="line">                    mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Do this after providers, since instrumentation tests generally start their</span></span><br><span class="line">            <span class="comment">// test thread at this point, and we don't want that racing.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mInstrumentation.onCreate(data.instrumentationArgs);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Exception thrown in onCreate() of "</span></span><br><span class="line">                    + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mInstrumentation.callApplicationOnCreate(app);<span class="comment">// app是Application对象</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                        <span class="string">"Unable to create application "</span> + app.getClass().getName()</span><br><span class="line">                        + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            StrictMode.setThreadPolicy(savedPolicy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>先是创建Application</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public Application makeApplication(boolean forceDefaultAppClass,</span><br><span class="line">        Instrumentation instrumentation) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mApplication != null) &#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Application <span class="keyword">app</span> = null;</span><br><span class="line"></span><br><span class="line">    String appClass = mApplicationInfo.className;</span><br><span class="line">    <span class="keyword">if</span> (forceDefaultAppClass || (appClass == null)) &#123;</span><br><span class="line">        appClass = <span class="string">"android.app.Application"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        java.lang.ClassLoader <span class="keyword">cl</span> = getClassLoader();</span><br><span class="line">        ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, this);</span><br><span class="line">        <span class="keyword">app</span> = mActivityThread.mInstrumentation.newApplication(</span><br><span class="line">                <span class="keyword">cl</span>, appClass, appContext); <span class="comment">// 由instrument通过反射创建Application</span></span><br><span class="line">        appContext.setOuterContext(<span class="keyword">app</span>);</span><br><span class="line">    &#125; catch (Exception <span class="keyword">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mActivityThread.mInstrumentation.onException(<span class="keyword">app</span>, <span class="keyword">e</span>)) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                <span class="string">"Unable to instantiate application "</span> + appClass</span><br><span class="line">                + <span class="string">": "</span> + <span class="keyword">e</span>.<span class="keyword">toString</span>(), <span class="keyword">e</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mActivityThread.mAllApplications.add(<span class="keyword">app</span>);</span><br><span class="line">    mApplication = <span class="keyword">app</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (instrumentation != null) &#123; <span class="comment">//应为上面传过来的参数为null，所以不会执行下面的代码</span></span><br><span class="line">        try &#123;</span><br><span class="line">            instrumentation.callApplicationOnCreate(<span class="keyword">app</span>);</span><br><span class="line">        &#125; catch (Exception <span class="keyword">e</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!instrumentation.onException(<span class="keyword">app</span>, <span class="keyword">e</span>)) &#123;</span><br><span class="line">                throw new RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to create application "</span> + <span class="keyword">app</span>.getClass().getName()</span><br><span class="line">                    + <span class="string">": "</span> + <span class="keyword">e</span>.<span class="keyword">toString</span>(), <span class="keyword">e</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">app</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终于找到了Application的onCreate方法<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Perform</span> calling <span class="keyword">of</span> the application's &#123;@link <span class="type">Application</span><span class="comment">#onCreate&#125;</span></span><br><span class="line"> * <span class="keyword">method</span>.  <span class="type">The</span> default implementation simply calls through to that <span class="keyword">method</span>.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;<span class="type">Note</span>: <span class="type">This</span> <span class="keyword">method</span> will be called immediately after &#123;@link <span class="comment">#onCreate(Bundle)&#125;.</span></span><br><span class="line"> * <span class="type">Often</span> instrumentation tests start their test thread <span class="keyword">in</span> onCreate(); you</span><br><span class="line"> * need to be careful <span class="keyword">of</span> races between these.  (<span class="type">Well</span> between it <span class="keyword">and</span></span><br><span class="line"> * everything <span class="keyword">else</span>, but <span class="keyword">let</span>'s start here.)</span><br><span class="line"> *</span><br><span class="line"> * @param app <span class="type">The</span> application being created.</span><br><span class="line"> */</span><br><span class="line">public <span class="type">void</span> callApplicationOnCreate(<span class="type">Application</span> app) &#123;</span><br><span class="line">    app.onCreate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>概括一下就是，在<code>ActivityThread</code>的<code>main</code>方法中，通过IPC机制和远端进行通信，服务端<code>ActivityManagerService</code>收到消息发送消息通知客户端，客户端的 <code>ApplicationThread</code>收到消息后，通过<code>Handler</code>发送消息，调用<code>handleBindApplication</code>方法，最终是通过 <code>mInstrumentation.callApplicationOnCreate(app)</code>回调到<code>Application</code>的<code>onCreate</code>方法.</p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>ActivityThread并不是一个Thread，而是一个单纯的Java类，查看一下 <code>ActivityThread</code> 的源码<code>final class ActivityThread</code>，并没有继承Thread或者实现Runnable接口，<code>ActivityThread</code> 其中包含 <code>main</code> 方法,程序的入口地方，怎么看出来的呢? 我们开发过程中总会出现程序异常信息，细心看一下log，查看最下面的几行，最终问题出在 <code>android.app.ActivityThread.main</code>.<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="Framework" scheme="http://hanks.xyz/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 鬼畜表情包app]]></title>
    <link href="http://hanks.xyz/2016/01/11/react-native-23333/"/>
    <id>http://hanks.xyz/2016/01/11/react-native-23333/</id>
    <published>2016-01-11T03:33:17.000Z</published>
    <updated>2016-01-11T03:55:16.000Z</updated>
    <content type="html"><![CDATA[<p>QQ群,微信群，各种大神，各种表情，每到半夜，斗图大会，八仙过海，各显神通，良辰日天齐上阵。不服，下载鬼畜表情，参加到战斗中，无奈啊，app做的不是太方便，想起抓包把图片一下都下载下来，想起最近看到RN，正好练练手。<br><a id="more"></a></p>
<h3 id="单文件批量抓取">单文件批量抓取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Sample React Native App</span><br><span class="line"> * https://github.com/hanks-zyh/233333</span><br><span class="line"> */</span></span><br><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AwesomeProject = React.createClass(&#123;</span><br><span class="line">  getImage: <span class="function"><span class="keyword">function</span>(<span class="params">tid</span>)</span>&#123;</span><br><span class="line">    fetch(<span class="string">'https://face.ersansan.cn/collection/'</span>+tid)</span><br><span class="line">    .then((respose) =&gt; respose.text())</span><br><span class="line">    .then((responseText) =&gt; &#123;</span><br><span class="line">          <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + responseText +     <span class="string">')'</span>);</span><br><span class="line">          <span class="keyword">var</span> list = result.picList;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> item = list[i];</span><br><span class="line">            <span class="built_in">console</span>.warn(item.link);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(error);</span><br><span class="line">    &#125;).done;</span><br><span class="line">  &#125;,</span><br><span class="line">  getSunCollection: <span class="function"><span class="keyword">function</span>(<span class="params">tid</span>)</span>&#123;</span><br><span class="line">    fetch(<span class="string">'https://face.ersansan.cn/collection/'</span>+tid)</span><br><span class="line">    .then((respose) =&gt; respose.text())</span><br><span class="line">    .then((responseText) =&gt; &#123;</span><br><span class="line">          <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + responseText +     <span class="string">')'</span>);</span><br><span class="line">          <span class="keyword">var</span> list = result.subcollection;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> item = list[i];</span><br><span class="line">            <span class="keyword">this</span>.getImage(item.tid);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(error);</span><br><span class="line">    &#125;).done;</span><br><span class="line">  &#125;,</span><br><span class="line">  _downLoad: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      fetch(<span class="string">'https://face.ersansan.cn/collection'</span>)</span><br><span class="line">      .then((respose) =&gt; respose.text())</span><br><span class="line">      .then((responseText) =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + responseText +     <span class="string">')'</span>);</span><br><span class="line">            <span class="keyword">var</span> list = result.List;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">              <span class="keyword">var</span> item = list[i];</span><br><span class="line">              <span class="built_in">console</span>.warn(item.tid+item.title);</span><br><span class="line">              <span class="keyword">this</span>.getSunCollection(item.tid);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch((error) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(error);</span><br><span class="line">      &#125;).done;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;&#123;</span> <span class="attribute">flex:1</span>, <span class="attribute">alignItems:</span>'<span class="attribute">center</span>', <span class="attribute">justifyContent:</span>'<span class="attribute">center</span>'&#125;&#125;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">TouchableOpacity</span> <span class="attribute">style</span>=<span class="value">&#123;&#123;</span></span><br><span class="line">           <span class="attribute">backgroundColor:</span>"##<span class="attribute">234234</span>", <span class="attribute">height:50</span>, <span class="attribute">width:80</span>,  <span class="attribute">alignItems:</span>'<span class="attribute">center</span>',  <span class="attribute">justifyContent:</span>'<span class="attribute">center</span>'</span><br><span class="line">         &#125;&#125; <span class="attribute">onPress</span>=<span class="value">&#123;</span> <span class="attribute">this._downLoad</span> &#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;&#123;</span> <span class="attribute">fontSize:20</span>,  <span class="attribute">color:</span>'<span class="attribute">white</span>' &#125;&#125;&gt;</span>下载<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="title">TouchableOpacity</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</span><br></pre></td></tr></table></figure>
<h3 id="仿app界面">仿app界面</h3><p><img src="https://github.com/hanks-zyh/233333/raw/master/2333.gif" alt="2333"></p>
<p><strong>首页：</strong><br>外部<code>ScrollView</code><br>顶部图片+ListView<br>给ListView每个item的title设置点击进入专题</p>
<p><strong>专题：</strong><br>简单的<code>ListView</code><br>每个item设置点击进入图片列表</p>
<p><strong>图片列表</strong><br>还是ListView，每个<code>ListView</code>的item分3个图片<br>根据D<code>imensions</code>计算宽高<br>不够3个的有几个显示几个<br>每个图片设置点击打开浏览器下载 <code>IntentAndroid.openURL(url);</code></p>
<p>源码：<a href="https://github.com/hanks-zyh/233333" target="_blank" rel="external">https://github.com/hanks-zyh/233333</a></p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>QQ群,微信群，各种大神，各种表情，每到半夜，斗图大会，八仙过海，各显神通，良辰日天齐上阵。不服，下载鬼畜表情，参加到战斗中，无奈啊，app做的不是太方便，想起抓包把图片一下都下载下来，想起最近看到RN，正好练练手。<br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 动手实现热修复]]></title>
    <link href="http://hanks.xyz/2016/01/05/android-myhotfix/"/>
    <id>http://hanks.xyz/2016/01/05/android-myhotfix/</id>
    <published>2016-01-04T17:46:39.000Z</published>
    <updated>2016-01-05T14:48:03.000Z</updated>
    <content type="html"><![CDATA[<p>有了前面文章的理论支持,下面动手自己写一下热修复.<br><a id="more"></a></p>
<h2 id="创建工程">创建工程</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── main                                                                                      </span><br><span class="line">│   ├── AndroidManifest<span class="class">.xml</span>                                                                   </span><br><span class="line">│   ├── java                                                                                  </span><br><span class="line">│   │   └── xyz                                                                               </span><br><span class="line">│   │       └── hanks                                                                         </span><br><span class="line">│   │           └── fix                                                                       </span><br><span class="line">│   │               ├── BugClass<span class="class">.java</span>                                                         </span><br><span class="line">│   │               ├── FixApplication<span class="class">.java</span>                                                   </span><br><span class="line">│   │               └── MainActivity.java</span><br></pre></td></tr></table></figure>
<p>通过Android Studio创建一个工程. <code>BugClass</code> 类是需要修复的类, <code>MainActivity</code>是主Activity, <code>FixApplication</code>是自定义的Application. 初始的MainActivity如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.text);</span><br><span class="line">        textView.setText(<span class="keyword">new</span> BugClass().showToast(<span class="string">"Happy new year"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by hanks on 16-1-2.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BugClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showToast</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在运行程序,界面的文本显示成文字 <strong>Happy new year</strong>,<code>MainActivity</code>类会被加上 <strong>CLASS_ISPREVERIFIED</strong> 标志,因为BugClass 和 MainActivity 都属于同一个dex. 如果现在直接加载补丁包中的 <strong>BugClass</strong> 类,那么就会出现 <code>Class ref in pre-verified class resolved to unexpected implementation</code> 错误.</p>
<h2 id="引用hack-dex,防止类加上CLASS_ISPREVERIFIED">引用hack.dex,防止类加上CLASS_ISPREVERIFIED</h2><p>因为我们要修复<code>BugClass</code>类,而调用是在<code>MainActivity</code>中,也就是说,当打上补丁包之后,<code>MainActivity</code>调用的<code>BugClass</code>将会是补丁包中的<code>BugClass</code>(也就是来自于其他的dex),那么我就就需要防止<code>MainActivity</code>被加上 <strong>CLASS_ISPREVERIFIED</strong> 标志. 那么怎么防止呢? 需要在<code>MainActivity</code>中引用别的dex(hack.dex)中的一个类.那么代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.text);</span><br><span class="line">        System.out.print(Hack.class); <span class="comment">// 引用 hack.dex中的Hack类</span></span><br><span class="line">        textView.setText(<span class="keyword">new</span> BugClass().showToast(<span class="string">"Happy new year"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码只是简单的引用了一下 <code>Hack.class</code>, 这样程序运行起来就不会把<code>MainActivity</code>加上 <strong>CLASS_ISPREVERIFIED</strong>. 注意现在的代码是编译不过的. 引用我们的程序中没有<code>Hack.class</code>, 要想编译通过,那么我们就得有 <code>Hack.class</code>, 于是新建一个library, 然后app这个依赖与这个library, 但是注意不要使用 <strong>compile</strong>, 使用 <strong>provided</strong> 关键字,这样标示这个library这是提供引用,并不被编译到apk中(不在MainActivity的dex中).这样就解决了编译问题.<br>现在运行起来程序还是有错误, 因为<code>MainActivity</code>引用了<code>Hack.class</code>,虽然编译通过了,但是实际上是没有这个类的,所以这个时候就需要在调用Hack这个类之前,先动态加载进来.</p>
<h2 id="先加载Hack-dex,保证引用不会出错">先加载Hack.dex,保证引用不会出错</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 加载</span><br><span class="line"> * Created by hanks on 16-1-3.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             PathClassLoader pathClassLoader = (PathClassLoader) getClassLoader();</span><br><span class="line">             String hackFilePath = Environment.getExternalStorageDirectory().getAbsolutePath() +<span class="string">"/hack.dex"</span>; <span class="comment">// hack.dex的路径</span></span><br><span class="line">             Object a = combineArray(getDexElements(getPathList(pathClassLoader)), <span class="comment">// 原有的 dex</span></span><br><span class="line">                     getDexElements(getPathList(<span class="keyword">new</span> DexClassLoader(hackFilePath, getDir(<span class="string">"dex"</span>, <span class="number">0</span>).getAbsolutePath(), hackFilePath, getClassLoader()))));  <span class="comment">// 将新的dex插入到dexElements数组的前面</span></span><br><span class="line">             Object a2 = getPathList(pathClassLoader);</span><br><span class="line">             setField(a2, a2.getClass(), <span class="string">"dexElements"</span>, a); <span class="comment">// 通过反射修改dexElements数组</span></span><br><span class="line">             pathClassLoader.loadClass(<span class="string">"xyz.hanks.Hack"</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样程序就正常运行起来了.</p>
<h2 id="生成补丁包">生成补丁包</h2><p>现在<code>BugClass</code>出现bug了. 修改一下, 然后将修改后的<code>BugClass</code>导出jar包,然后通过<code>dx</code>工具转换成dex,就叫做 <strong>patch.dex</strong> 吧.然后放入到sdcard目录下.</p>
<p>现在可以加载补丁包了.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 加载</span><br><span class="line"> * Created by hanks on 16-1-3.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             PathClassLoader pathClassLoader = (PathClassLoader) getClassLoader();</span><br><span class="line">             String hackFilePath = Environment.getExternalStorageDirectory().getAbsolutePath() +<span class="string">"/hack.dex"</span>; <span class="comment">// hack.dex的路径</span></span><br><span class="line">             Object a = combineArray(getDexElements(getPathList(pathClassLoader)), <span class="comment">// 原有的 dex</span></span><br><span class="line">                     getDexElements(getPathList(<span class="keyword">new</span> DexClassLoader(hackFilePath, getDir(<span class="string">"dex"</span>, <span class="number">0</span>).getAbsolutePath(), hackFilePath, getClassLoader()))));  <span class="comment">// 将新的dex插入到dexElements数组的前面</span></span><br><span class="line">             Object a2 = getPathList(pathClassLoader);</span><br><span class="line">             setField(a2, a2.getClass(), <span class="string">"dexElements"</span>, a); <span class="comment">// 通过反射修改dexElements数组</span></span><br><span class="line">             pathClassLoader.loadClass(<span class="string">"xyz.hanks.Hack"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             <span class="comment">// 加载补丁包</span></span><br><span class="line">             String patchFilePath = Environment.getExternalStorageDirectory()</span><br><span class="line">                     .getAbsolutePath() + <span class="string">"/patch.dex"</span>;</span><br><span class="line">             Object a3 = combineArray(getDexElements(getPathList(pathClassLoader)), <span class="comment">// 原有的 dex</span></span><br><span class="line">                     getDexElements(getPathList(<span class="keyword">new</span> DexClassLoader(patchFilePath, getDir(<span class="string">"dex"</span>, <span class="number">0</span>).getAbsolutePath(), patchFilePath, getClassLoader()))));</span><br><span class="line">             Object a4 = getPathList(pathClassLoader);</span><br><span class="line">             setField(a4, a4.getClass(), <span class="string">"dexElements"</span>, a3);</span><br><span class="line">             pathClassLoader.loadClass(<span class="string">"xyz.hanks.fix.BugClass"</span>);</span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次修改BugClass类之后,生产补丁,放到sdcard,重启程序即可成效(不一定重启程序,目的是要在bugclass被第一次加载之前,加载补丁中的bugclass)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有了前面文章的理论支持,下面动手自己写一下热修复.<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="热修复" scheme="http://hanks.xyz/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 热修复总结]]></title>
    <link href="http://hanks.xyz/2016/01/03/android-hotfix/"/>
    <id>http://hanks.xyz/2016/01/03/android-hotfix/</id>
    <published>2016-01-03T15:27:05.000Z</published>
    <updated>2016-01-05T14:48:03.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间热修复这个词非常火,当时只是大体看了一下,今天抽空好好看了一下具体原理.<br><a id="more"></a></p>
<h3 id="什么是热修复?">什么是热修复?</h3><p>简单的说就是用户不用重新下载一个新的apk安装,而是直接下载一个补丁包,通过补丁来替换一些出现bug的类, 当然下载补丁的过程用户一般是感觉不到的,表面上看是直接修复了bug.</p>
<h3 id="原理">原理</h3><p>类似与插件开发,关于插件开发原理,看这篇<a href="http://www.alloyteam.com/2014/04/android-cha-jian-yuan-li-pou-xi/" target="_blank" rel="external">Android插件原理剖析</a>,其中介绍了一下java中的类加载器和android中的类加载器. 热修复就是利用android中的 <code>DexClassLoader</code>类加载器,动态加载补丁dex,替换有bug的类</p>
<p>已有的热修复解决方案:</p>
<ul>
<li><a href="https://github.com/dodola/HotFix" target="_blank" rel="external">https://github.com/dodola/HotFix</a></li>
<li><a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">https://github.com/jasonross/Nuwa</a></li>
<li><a href="https://github.com/bunnyblue/DroidFix" target="_blank" rel="external">https://github.com/bunnyblue/DroidFix</a></li>
</ul>
<p>这几个库的原理都类似,具体描述可以查看这篇<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a>.</p>
<h3 id="切入点">切入点</h3><p>想修复方法? 方法在哪里? 方法都包含在类中. 类在哪里? 类被包含在dex中,而</p>
<p>最根本的来源是下面这段代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Element element : dexElements) &#123;</span><br><span class="line">        DexFile dex = element.dexFile;</span><br><span class="line">        <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class clazz = dex.loadClassBinaryName(name, definingContext);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出呢，BaseDexClassLoader中有个<code>pathList</code>对象，pathList中包含一个DexFile的集合<code>dexElements</code>，而对于类加载呢，就是遍历这个集合，通过DexFile去寻找,一个ClassLoader可以包含多个dex文件，每个dex文件是一个Element，多个dex文件排列成一个有序的数组dexElements，当找类的时候，会按顺序遍历dex文件，然后从当前遍历的dex文件中找类，如果找类则返回，如果找不到从下一个dex文件继续查找。</p>
<p>简单来说: 首先找到<code>pathList</code>对象,然后通过反射改变<code>dexElements</code>数组.<br>但是遇到的以下问题: 也就是类被打上了 <strong>CLASS_ISPREVERIFIED</strong> 标志</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.<span class="type">IllegalAccessError</span>: <span class="type">Class</span> <span class="keyword">ref</span> <span class="keyword">in</span> pre-verified class resolved to unexpected implementation</span><br></pre></td></tr></table></figure>
<p>根据QQ空间的文章, 这个错误是因为虚拟机加载类的时候, 当一个类中的直接方法(Direct Method)来自与同一个dex中,那么这个类就会被加上 <strong>CLASS_ISPREVERIFIED</strong> 标志, 再次通过类加载器加载会出现上面的错误.</p>
<p><strong>解决方案</strong>: 在需要加载的类中,引用一个别的dex中的类.这样这个类就不会被加上 CLASS_ISPREVERIFIED 标志了,然后就可以再次加载了. 上面一个开源库的普遍方案就是在类的 <strong>默认构造方法</strong> 上面添加一个其他dex的引用.</p>
<h3 id="总结">总结</h3><p>于是总体步骤如下:</p>
<ol>
<li>可能出现bug的类中,引用一下别的dex中的类.</li>
<li>因为1中引用了别的dex,需要先将别的dex加载进来.</li>
<li>现在可以替换bug的类了,加载补丁,通过反射将补丁中的dex放到<code>pathList</code>对象的<code>dexElements</code>数组的前面,完成打补丁.</li>
</ol>
<p>其中两个注意点:</p>
<ul>
<li>防止类被加上 CLASS_ISPREVERIFIED 标志(通过修改类默认构造方法)</li>
<li>生成补丁dex(通过dx工具)</li>
</ul>
<p>参考文章:</p>
<ul>
<li><a href="http://developer.android.com/reference/dalvik/system/DexClassLoader.html" target="_blank" rel="external">DexClassLoader</a></li>
<li><a href="http://developer.android.com/reference/dalvik/system/PathClassLoader.html" target="_blank" rel="external">PathClassLoader</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a></li>
<li><a href="http://www.alloyteam.com/2014/04/android-cha-jian-yuan-li-pou-xi/" target="_blank" rel="external">Android插件原理剖析</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/49883661" target="_blank" rel="external">Android 热补丁动态修复框架小结</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间热修复这个词非常火,当时只是大体看了一下,今天抽空好好看了一下具体原理.<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="热修复" scheme="http://hanks.xyz/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015回顾@hanks]]></title>
    <link href="http://hanks.xyz/2015/12/31/2015/"/>
    <id>http://hanks.xyz/2015/12/31/2015/</id>
    <published>2015-12-31T12:41:17.000Z</published>
    <updated>2015-12-31T13:20:52.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>2015的最后一天，我选择了辞职</p>
</blockquote>
<h1 id="去年">去年</h1><p>2014年的这个时候,开始出去找工作,到现在差不多工作一年了, 期间也经历了远程,国外团队,创业团队,知识面拓展了不少(但是应该还是有很多不知道),最大的感触就是面试,找工作真的不是想象的那样,今天看到知乎上面的一个提问<a href="https://www.zhihu.com/question/38982159" target="_blank" rel="external">我用个假简历去面试android的结果为什么会这样？</a>,这就是现实而已.<br><a id="more"></a></p>
<h1 id="关于辞职">关于辞职</h1><p><strong>一方面</strong>,是想好好休息几天，身体真的变差了，上个楼都累的不行,前几天突发牙痛，昨天发现脸都肿了，今天去看牙，感觉医院好坑，进入二话不说先消费，然后说了一大堆丁不懂得的名词,最后告诉我治疗费用要好几万，愣是把我吓跑了，回去的路上脸上的肿逐渐消了，(´･ω･`) 难道是吓好了吗？<br><strong>另一方面</strong>，原来团队里就我一个Android开发,想寻找更适合的开发团队,说实话技术方面Android技能多大进步，还停留在应用开发等级(想尝试一些高级的),一些底层的源码方面也没好好深究一下,我一直在努力学习一些好的架构,看了一些设计模式的东西.我认为想要开发出高质量的应用,一方面是性能,另一方面是代码质量, 当然还有UI(脸啊),不过自己没有能力去设计界面,只能努力去实现一些效果.不过自己学了很多新的知识，年初的时候知道了<code>Rx</code>, <code>mvp</code>,<code>mvvm</code>(最先接触的是<code>Robobinding</code>,后来 Android 出了 <code>Data Binding</code>),<code>kotlin语言</code>… 之后就在项目中去实践，设计风格上,自从Material Design出来之后, 然后就迷上了,自己开发的应用就尽量去遵循其原则,后来Android出来support design的库,用于实现5.0以下的Material Design风格.</p>
<h1 id="Android之外">Android之外</h1><p> Android之外的，首先把python稍微入门了，把开发环境切成了Ubuntu,了解一些Linux方 面的东西，在学校的时候最后悔的就是没有多学点服务器方面的知识，巩固了一下git,vim等工具，复习了前端一些知识css，js，了解了一下sass,less,感觉挺好玩的，也能提高开发效率,最近学了react-native的东西，自己也写了一些简单的<a href="http://hanks.xyz/">例子</a>，react-native的做出的app实现也还是原生组件，所以性能应该没啥问题，学习上面也没啥难度(可能还没遇到坑),很快应该就能入门.开源方面, 也学习去利用开源力量,同时贡献一点自己的力量.</p>
<h1 id="关于买电脑">关于买电脑</h1><p>2015买了两台电脑,一台普通笔记本,一台Macbook pro,我个人的建议是学生档毕竟经济能力有限,不是必须Mac(比如开发Android完全可以不用)的话不要买mac,我的普通笔记本5000元左右,16G内存,256SSD, i7八核2.5GHz,安装Ubuntu,然后window虚拟机,mac虚拟机,Android虚拟机同开毫无压力,同时各个系统软件都可使用,性价比要比mac本高的多,不过质量应该是不行,我打算也就用个一两年,质量的话还是得Macbook</p>
<p>总之,2016应该还是学学学,不学怎么进步呢.</p>
<p>2015读书列表(大部分时间都是在上下班的公交上看的,而且有的没看完):</p>
<ul>
<li>Linux命令行大全</li>
<li>Flask Web开发：基于Python的Web应用开发实战</li>
<li>Bootstrap实战</li>
<li>android内核剖析</li>
<li>android群英转</li>
<li>android开发艺术探究</li>
<li>android源码设计模式解析与实战</li>
</ul>
<p>另外,如果你有好工作,欢迎推荐!  :point_right:我的<a href="https://github.com/hanks-zyh" target="_blank" rel="external">github</a></p>
<p>跨年演唱会开始了,准备迎接2016吧!</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>2015的最后一天，我选择了辞职</p>
</blockquote>
<h1 id="去年">去年</h1><p>2014年的这个时候,开始出去找工作,到现在差不多工作一年了, 期间也经历了远程,国外团队,创业团队,知识面拓展了不少(但是应该还是有很多不知道),最大的感触就是面试,找工作真的不是想象的那样,今天看到知乎上面的一个提问<a href="https://www.zhihu.com/question/38982159">我用个假简历去面试android的结果为什么会这样？</a>,这就是现实而已.<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 下雪动画]]></title>
    <link href="http://hanks.xyz/2015/12/30/snowfall/"/>
    <id>http://hanks.xyz/2015/12/30/snowfall/</id>
    <published>2015-12-30T09:58:41.000Z</published>
    <updated>2015-12-30T10:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 :  <a href="https://blog.stylingandroid.com/snowfall/" target="_blank" rel="external">Snowfall</a></li>
<li>原文作者 : <a href="https://blog.stylingandroid.com" target="_blank" rel="external">Styling Android</a></li>
<li>译文出自 : <a href="http://hanks.xyz">hanks.xyz</a></li>
<li>译者 : <a href="https://github.com/hanks-zyh" target="_blank" rel="external">hanks-zyh</a></li>
<li>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a></li>
<li>状态 : 完成</li>
</ul>
</blockquote>
<p>这本是一个愉快的季节，但是，呵呵，胡扯！ 因为这篇文章的发表时间是2015年的圣诞节，所以我们需要给Style Android用制造出一些节日气氛。感谢读者们，因为有的读者可能没有在庆祝圣诞，有些读者可能还是6月份。<br>那么问题来了，我们应该做些什么来让这个节日像是真正的节日呢？ 最简单的方法：带上圣诞帽，拍个照。</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/6c6bdb8b-fcd8-4869-80d0-1b3f849810d8.png" alt="tree"></p>
<a id="more"></a>
<p>看我多么欢乐！<br>但是我感觉这个图片有些单调，所以来弄点雪花，让雪花飘下来。<br>我们可以添加一个包含这个图片的自定义View</p>
<p><strong>res/layout/activity_main.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">  <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">  <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">tools:context</span>=<span class="value">"com.stylingandroid.snowfall.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_centerInParent</span>=<span class="value">"true"</span></span><br><span class="line">    <span class="attribute">android:contentDescription</span>=<span class="value">"@null"</span></span><br><span class="line">    <span class="attribute">android:scaleType</span>=<span class="value">"fitCenter"</span></span><br><span class="line">    <span class="attribute">android:src</span>=<span class="value">"@drawable/tree"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">com.stylingandroid.snowfall.SnowView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_alignBottom</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignEnd</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignLeft</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignRight</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignStart</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignTop</span>=<span class="value">"@id/image"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>尽管可以通过继承ImageView来实现自定义View，但我决定将 <code>SnowView</code> 和图片分开，这样每次刷新动画的时候不用重新渲染图片，只刷新 <code>SnowView</code> 就行了</p>
<p><code>SnowView.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_SNOWFLAKES = <span class="number">150</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DELAY = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SnowFlake[] snowflakes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        paint.setColor(Color.WHITE);</span><br><span class="line">        paint.setStyle(Paint.Style.FILL);</span><br><span class="line">        snowflakes = <span class="keyword">new</span> SnowFlake[NUM_SNOWFLAKES];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_SNOWFLAKES; i++) &#123;</span><br><span class="line">            snowflakes[i] = SnowFlake.create(width, height, paint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">if</span> (w != oldw || h != oldh) &#123;</span><br><span class="line">            resize(w, h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">for</span> (SnowFlake snowFlake : snowflakes) &#123;</span><br><span class="line">            snowFlake.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">        getHandler().postDelayed(runnable, DELAY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码很简单。 在View 的 <code>onSizeChanged</code> 方法中初始化 150 个随机位置的雪花对象。 在<code>onDraw</code>方法中画出雪花，然后每隔一段时间就刷新一下位置，需要注意的是<code>onDraw</code>没有立即去执行，而是通过创建一个runnable，这样不会阻塞UI线程<br>雪花下落是基于Samuel Arbesman的<a href="http://www.openprocessing.org/sketch/84771" target="_blank" rel="external">雪花下落的算法</a>。</p>
<p><strong>SnowFlake.java</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">class SnowFlake &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> ANGE_RANGE = <span class="number">0.1</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> HALF_ANGLE_RANGE = ANGE_RANGE / <span class="number">2</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> <span class="constant">HALF_PI</span> = (<span class="built_in">float</span>) Math.<span class="constant">PI</span> / <span class="number">2</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> ANGLE_SEED = <span class="number">25</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> ANGLE_DIVISOR = <span class="number">10000</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> INCREMENT_LOWER = <span class="number">2</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> INCREMENT_UPPER = <span class="number">4</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> FLAKE_SIZE_LOWER = <span class="number">7</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> FLAKE_SIZE_UPPER = <span class="number">20</span>f;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random <span class="built_in">random</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Point position;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> angle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">float</span> increment;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">float</span> flakeSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Paint paint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SnowFlake create(<span class="built_in">int</span> <span class="variable">width</span>, <span class="built_in">int</span> <span class="variable">height</span>, Paint paint) &#123;</span><br><span class="line">        Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="built_in">int</span> x = <span class="built_in">random</span>.getRandom(<span class="variable">width</span>);</span><br><span class="line">        <span class="built_in">int</span> y = <span class="built_in">random</span>.getRandom(<span class="variable">height</span>);</span><br><span class="line">        Point position = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">        <span class="built_in">float</span> angle = <span class="built_in">random</span>.getRandom(ANGLE_SEED) / ANGLE_SEED * ANGE_RANGE + <span class="constant">HALF_PI</span> - HALF_ANGLE_RANGE;</span><br><span class="line">        <span class="built_in">float</span> increment = <span class="built_in">random</span>.getRandom(INCREMENT_LOWER, INCREMENT_UPPER);</span><br><span class="line">        <span class="built_in">float</span> flakeSize = <span class="built_in">random</span>.getRandom(FLAKE_SIZE_LOWER, FLAKE_SIZE_UPPER);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SnowFlake(<span class="built_in">random</span>, position, angle, increment, flakeSize, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SnowFlake(Random <span class="built_in">random</span>, Point position, <span class="built_in">float</span> angle, <span class="built_in">float</span> increment, <span class="built_in">float</span> flakeSize, Paint paint) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">random</span> = <span class="built_in">random</span>;</span><br><span class="line">        <span class="keyword">this</span>.position = position;</span><br><span class="line">        <span class="keyword">this</span>.angle = angle;</span><br><span class="line">        <span class="keyword">this</span>.increment = increment;</span><br><span class="line">        <span class="keyword">this</span>.flakeSize = flakeSize;</span><br><span class="line">        <span class="keyword">this</span>.paint = paint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> move(<span class="built_in">int</span> <span class="variable">width</span>, <span class="built_in">int</span> <span class="variable">height</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> x = position.x + (increment * Math.<span class="built_in">cos</span>(angle));</span><br><span class="line">        <span class="keyword">double</span> y = position.y + (increment * Math.<span class="built_in">sin</span>(angle));</span><br><span class="line"></span><br><span class="line">        angle += <span class="built_in">random</span>.getRandom(-ANGLE_SEED, ANGLE_SEED) / ANGLE_DIVISOR;</span><br><span class="line"></span><br><span class="line">        position.<span class="built_in">set</span>((<span class="built_in">int</span>) x, (<span class="built_in">int</span>) y);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isInside(<span class="variable">width</span>, <span class="variable">height</span>)) &#123;</span><br><span class="line">            reset(<span class="variable">width</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> isInside(<span class="built_in">int</span> <span class="variable">width</span>, <span class="built_in">int</span> <span class="variable">height</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> x = position.x;</span><br><span class="line">        <span class="built_in">int</span> y = position.y;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= -flakeSize - <span class="number">1</span> &amp;&amp; x + flakeSize &lt;= <span class="variable">width</span> &amp;&amp; y &gt;= -flakeSize - <span class="number">1</span> &amp;&amp; y - flakeSize &lt; <span class="variable">height</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> reset(<span class="built_in">int</span> <span class="variable">width</span>) &#123;</span><br><span class="line">        position.x = <span class="built_in">random</span>.getRandom(<span class="variable">width</span>);</span><br><span class="line">        position.y = (<span class="built_in">int</span>) (-flakeSize - <span class="number">1</span>);</span><br><span class="line">        angle = <span class="built_in">random</span>.getRandom(ANGLE_SEED) / ANGLE_SEED * ANGE_RANGE + <span class="constant">HALF_PI</span> - HALF_ANGLE_RANGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span>(Canvas canvas) &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="variable">width</span> = canvas.getWidth();</span><br><span class="line">        <span class="built_in">int</span> <span class="variable">height</span> = canvas.getHeight();</span><br><span class="line">        move(<span class="variable">width</span>, <span class="variable">height</span>);</span><br><span class="line">        canvas.drawCircle(position.x, position.y, flakeSize, paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>初始化的时候，雪花的随机位置就已经确定了。这是为了确保雪花不会每次画的时候都在开始的位置。当一个雪花的位置超出Canvas的边界之后，它就会被重新放到顶部的一个随机位置，这样就可以循环利用了，避免了重复创建。<br>当画雪花下落的每一帧的时候，我们首先给<code>SnowFlake</code>添加一个随机数来改变位置，这样可以模仿有小风吹雪花。<br>在把雪花画到canvas上之前，我们会进行边界检查(如果需要的话，超出边界的就重新放到顶部)</p>
<p>我一直在不断的调整里面的常量来改变下雪的效果直到我感觉满意为止。</p>
<p>最终效果如下：</p>
<iframe width="880" height="660" src="https://www.youtube.com/embed/pk66ZziTfOw" frameborder="0" allowfullscreen></iframe>

<p>当然了，在canvas里面塞这么多东西不是一个好的方法（有其他更好的 比如OpenGL），但是，我现在要去吃火鸡了，所以可能要等下一次了。</p>
<p><a href="https://github.com/StylingAndroid/Snowfall" target="_blank" rel="external">源文件地址</a></p>
<p>版权声明：<br>Part of this code is based upon “Snowfall” by Sam Arbesman, licensed under Creative Commons Attribution-Share Alike 3.0 and GNU GPL license.<br>Work: <a href="http://openprocessing.org/visuals/?visualID=" target="_blank" rel="external">http://openprocessing.org/visuals/?visualID=</a> 84771<br>License:<br><a href="http://creativecommons.org/licenses/by-sa/3.0/" target="_blank" rel="external">http://creativecommons.org/licenses/by-sa/3.0/</a><br><a href="http://creativecommons.org/licenses/GPL/2.0/" target="_blank" rel="external">http://creativecommons.org/licenses/GPL/2.0/</a></p>
<p>© 2015, Mark Allison. All rights reserved. This article originally appeared on Styling Android.</p>
<p>Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons 3.0 Attribution License</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 :  <a href="https://blog.stylingandroid.com/snowfall/">Snowfall</a></li>
<li>原文作者 : <a href="https://blog.stylingandroid.com">Styling Android</a></li>
<li>译文出自 : <a href="http://hanks.xyz">hanks.xyz</a></li>
<li>译者 : <a href="https://github.com/hanks-zyh">hanks-zyh</a></li>
<li>校对者: <a href="https://github.com/desmond1121">desmond1121</a></li>
<li>状态 : 完成</li>
</ul>
</blockquote>
<p>这本是一个愉快的季节，但是，呵呵，胡扯！ 因为这篇文章的发表时间是2015年的圣诞节，所以我们需要给Style Android用制造出一些节日气氛。感谢读者们，因为有的读者可能没有在庆祝圣诞，有些读者可能还是6月份。<br>那么问题来了，我们应该做些什么来让这个节日像是真正的节日呢？ 最简单的方法：带上圣诞帽，拍个照。</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/6c6bdb8b-fcd8-4869-80d0-1b3f849810d8.png" alt="tree"></p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 知乎日报首页]]></title>
    <link href="http://hanks.xyz/2015/12/30/react-zhihu/"/>
    <id>http://hanks.xyz/2015/12/30/react-zhihu/</id>
    <published>2015-12-30T09:27:03.000Z</published>
    <updated>2015-12-30T09:46:10.000Z</updated>
    <content type="html"><![CDATA[<p>主要练习从服务器获取数据,然后展示到界面,最外层用ScrollView包裹起来顶部是一个ViewPager,api使用的知乎日报的api,在这里只使用了一个<a href="http://news-at.zhihu.com/api/4/themes" target="_blank" rel="external">主题日报列表查看</a>的api,获取到json数据之后,显示到ListView中.最终效果如下:</p>
<p><img src="http://file.bmob.cn/M02/2B/29/oYYBAFaDpFCAC55oAEUmvcxK3O0625.gif" alt="zhihu"></p>
<a id="more"></a>
<h3 id="获取网络数据">获取网络数据</h3><p>根据前面的文章<a href="http://hanks.xyz/2015/12/23/react-network/">React-Native 网络请求</a>使用fetch方法来获取</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">_getData</span>:function()&#123;</span><br><span class="line">  var datas = [];</span><br><span class="line">  fetch(<span class="string">'http://news-at.zhihu.com/api/4/themes'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.text())</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(responseText)</span> =&gt;</span> &#123;</span><br><span class="line">    var  jsonObject = eval(<span class="string">"("</span> + responseText + <span class="string">")"</span>);</span><br><span class="line">    var array = jsonObject.others;</span><br><span class="line">    <span class="keyword">for</span>(var i=<span class="number">0</span>; i&lt;array.length; i++ )&#123;</span><br><span class="line">      datas.push(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      <span class="attribute">dataSource</span>: <span class="keyword">this</span>.state.dataSource.cloneWithRows(datas),</span><br><span class="line">      <span class="attribute">isLoading</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(error);</span><br><span class="line">  &#125;).done;</span><br><span class="line">  <span class="keyword">return</span> datas;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>上面的代码是从服务器获取的json数据, 使用 <strong>eval</strong> 方法将json字符串转为 javascript对象, 注意json字符串需要用 <strong>括号()</strong> 包裹起来,然后给listviwe设置数据<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">this</span><span class="class">.setState</span>(<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">dataSource</span>:<span class="value"> this.state.dataSource.<span class="function">cloneWithRows</span>(datas),</span><br><span class="line">  isLoading: false</span><br><span class="line"></span></span></span>&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="ListView用来展示">ListView用来展示</h3><p>代码比较简单,结合前面学习的很容易理解<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="constant">ListView</span></span><br><span class="line">  dataSource=&#123;this.state.dataSource&#125;</span><br><span class="line">  renderRow=&#123;(rowData) =&gt;</span><br><span class="line">          &lt;<span class="constant">TouchableOpacity</span>&gt;</span><br><span class="line">              &lt;<span class="constant">View</span> style=<span class="expansion">&#123;&#123; <span class="symbol">flexDirection:</span><span class="string">'row'</span> &#125;&#125;</span>&gt;</span><br><span class="line">                &lt;<span class="constant">Image</span> source=<span class="expansion">&#123;&#123; <span class="symbol">uri:</span> rowData.thumbnail &#125;&#125;</span> style=<span class="expansion">&#123;&#123;<span class="symbol">height:</span><span class="number">60</span>,<span class="symbol">width:</span><span class="number">80</span>, <span class="symbol">margin:</span><span class="number">12</span>,&#125;&#125;</span> /&gt;</span><br><span class="line">                &lt;<span class="constant">View</span>&gt;</span><br><span class="line">                  &lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123; <span class="symbol">marginTop:</span><span class="number">12</span>, <span class="symbol">color:</span><span class="string">'#234'</span>, <span class="symbol">fontSize:</span><span class="number">16</span>,&#125;&#125;</span>&gt;&#123;rowData.name&#125;&lt;<span class="regexp">/Text&gt;</span><br><span class="line">                  &lt;Text style=&#123;&#123; marginTop:12, color:'#888', fontSize:12,&#125;&#125;&gt;&#123;rowData.description&#125;&lt;/</span><span class="constant">Text</span>&gt;</span><br><span class="line">                  &lt;<span class="constant">View</span> style=<span class="expansion">&#123;&#123;<span class="symbol">height:</span><span class="number">1.5</span>,  <span class="symbol">backgroundColor:</span><span class="string">'#222'</span> &#125;&#125;</span>&gt;&lt;<span class="regexp">/View&gt;</span><br><span class="line">                &lt;/</span><span class="constant">View</span>&gt;</span><br><span class="line">              &lt;<span class="regexp">/View&gt;</span><br><span class="line">            &lt;/</span><span class="constant">TouchableOpacity</span>&gt;</span><br><span class="line">            &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>完整代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="keyword">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">  Navigator,</span><br><span class="line">  ScrollView,</span><br><span class="line">  ViewPager,</span><br><span class="line">  BackAndroid,</span><br><span class="line">  ViewPagerAndroid,</span><br><span class="line">  Image,</span><br><span class="line">  ListView,</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BackAndroid.addEventListener(<span class="string">'hardwareBackPress'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(_navigator == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(_navigator.getCurrentRoutes().length === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _navigator.pop();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _navigator ;</span><br><span class="line"><span class="keyword">var</span> PAGES = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> imageUrls = [</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i3/TB1vkdZKFXXXXaAXVXXXXXXXXXX_!!0-item_pic.jpg'</span>,</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i5/TB1CGo3KXXXXXb6XpXXYXGcGpXX_M2.SS2'</span>,</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i1/TB1jkifKVXXXXXhXXXXXXXXXXXX_!!0-item_pic.jpg'</span>,</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i2/TB1GCgoKVXXXXcaXpXXXXXXXXXX_!!0-item_pic.jpg'</span>,</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i1/TB1D6A7KVXXXXaQXVXXXXXXXXXX_!!0-item_pic.jpg'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> NewsView = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _navigator = this.props.navigator;</span><br><span class="line">    <span class="keyword">var</span> ds = <span class="keyword">new</span> ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      dataSource: ds.cloneWithRows(this._getData()),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  _getData:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> datas = [];</span><br><span class="line">    fetch(<span class="string">'http://news-at.zhihu.com/api/4/themes'</span>)</span><br><span class="line">    .then((response) =&gt; response.text())</span><br><span class="line">    .then((responseText) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span>  jsonObject = <span class="keyword">eval</span>(<span class="string">"("</span> + responseText + <span class="string">")"</span>);</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">array</span> = jsonObject.others;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">array</span>.length; i++ )&#123;</span><br><span class="line">        datas.push(<span class="keyword">array</span>[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        dataSource: this.state.dataSource.cloneWithRows(datas),</span><br><span class="line">        isLoading: <span class="keyword">false</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>((error) =&gt; &#123;</span><br><span class="line">      console.warn(error);</span><br><span class="line">    &#125;).done;</span><br><span class="line">    <span class="keyword">return</span> datas;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pages = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; PAGES; i++) &#123;</span><br><span class="line">      pages.push(</span><br><span class="line">        &lt;View key=&#123;i&#125; style=&#123;&#123; flex: <span class="number">1</span>, alignItems: <span class="string">'stretch'</span> &#125;&#125; collapsable=&#123;<span class="keyword">false</span>&#125;&gt;</span><br><span class="line">          &lt;Image</span><br><span class="line">            style=&#123;&#123; flex:<span class="number">1</span> &#125;&#125;</span><br><span class="line">            source=&#123;&#123;uri: imageUrls[i%PAGES] &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">       &lt;/View&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ScrollView&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;ViewPagerAndroid</span><br><span class="line">            style=&#123;styles.viewPager&#125;</span><br><span class="line">            initialPage=&#123;<span class="number">0</span>&#125;</span><br><span class="line">            onPageScroll=&#123;this.onPageScroll&#125;</span><br><span class="line">            onPageSelected=&#123;this.onPageSelected&#125;</span><br><span class="line">            ref=&#123;viewPager =&gt; &#123; this.viewPager = viewPager; &#125;&#125;&gt;</span><br><span class="line">            &#123;pages&#125;</span><br><span class="line">          &lt;/ViewPagerAndroid&gt;</span><br><span class="line">          &lt;ListView</span><br><span class="line">            dataSource=&#123;this.state.dataSource&#125;</span><br><span class="line">            renderRow=&#123;(rowData) =&gt;</span><br><span class="line">                    &lt;TouchableOpacity&gt;</span><br><span class="line">                        &lt;View style=&#123;&#123; flexDirection:<span class="string">'row'</span> &#125;&#125;&gt;</span><br><span class="line">                          &lt;Image source=&#123;&#123; uri: rowData.thumbnail &#125;&#125; style=&#123;&#123;height:<span class="number">60</span>,width:<span class="number">80</span>, margin:<span class="number">12</span>,&#125;&#125; /&gt;</span><br><span class="line">                          &lt;View&gt;</span><br><span class="line">                            &lt;Text style=&#123;&#123; marginTop:<span class="number">12</span>, color:<span class="string">'#234'</span>, fontSize:<span class="number">16</span>,&#125;&#125;&gt;&#123;rowData.name&#125;&lt;/Text&gt;</span><br><span class="line">                            &lt;Text style=&#123;&#123; marginTop:<span class="number">12</span>, color:<span class="string">'#888'</span>, fontSize:<span class="number">12</span>,&#125;&#125;&gt;&#123;rowData.description&#125;&lt;/Text&gt;</span><br><span class="line">                            &lt;View style=&#123;&#123;height:<span class="number">1.5</span>,  backgroundColor:<span class="string">'#222'</span> &#125;&#125;&gt;&lt;/View&gt;</span><br><span class="line">                          &lt;/View&gt;</span><br><span class="line">                        &lt;/View&gt;</span><br><span class="line">                      &lt;/TouchableOpacity&gt;</span><br><span class="line">                      &#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/ScrollView&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  viewPager:&#123;</span><br><span class="line">    height : <span class="number">200</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = NewsView;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/hanks-zyh/Hrn" target="_blank" rel="external">github地址</a></p>
<blockquote>
<p>文章来自: <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要练习从服务器获取数据,然后展示到界面,最外层用ScrollView包裹起来顶部是一个ViewPager,api使用的知乎日报的api,在这里只使用了一个<a href="http://news-at.zhihu.com/api/4/themes">主题日报列表查看</a>的api,获取到json数据之后,显示到ListView中.最终效果如下:</p>
<p><img src="http://file.bmob.cn/M02/2B/29/oYYBAFaDpFCAC55oAEUmvcxK3O0625.gif" alt="zhihu"></p>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 练习用户信息界面]]></title>
    <link href="http://hanks.xyz/2015/12/29/react-userinfo/"/>
    <id>http://hanks.xyz/2015/12/29/react-userinfo/</id>
    <published>2015-12-29T10:35:03.000Z</published>
    <updated>2016-01-03T16:01:32.000Z</updated>
    <content type="html"><![CDATA[<p>wuwu. 好饿~~<br>直接看效果图L:</p>
<p><img src="http://file.bmob.cn/M02/28/D4/oYYBAFaCYr6AIlcRAALzw1jyVMk263.png" alt="用户信息界面"><br><a id="more"></a></p>
<p>代码:</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><br><span class="line">'use strict'</span><br><span class="line"></span><br><span class="line">var React = require('react-native');</span><br><span class="line">var &#123;</span><br><span class="line">  Image,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  ViewPagerAndroid,</span><br><span class="line">  BackAndroid,</span><br><span class="line">  ScrollView,</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BackAndroid.addEventListener('hardwareBackPress', function() &#123;</span><br><span class="line">  if(_navigator == null)&#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  if(_navigator.getCurrentRoutes().length === 1)&#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  _navigator.pop();</span><br><span class="line">  return true;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var _navigator ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var UserInfoView = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  getInitialState: function()&#123;</span><br><span class="line">    _navigator = this.props.navigator;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: function()&#123;</span><br><span class="line">    return (</span><br><span class="line">        <span class="tag">&lt;<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/img</span>3<span class="variable">.</span>100<span class="variable">bt.com</span><span class="end-block">/upload</span><span class="end-block">/ttq</span>/20120908/1347116765019<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;  <span class="variable">height</span>:230 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">flex</span>:1,<span class="variable">alignItems</span>:'<span class="variable">center</span>', <span class="variable">backgroundColor</span>: '<span class="variable">rgba</span>(0, 0, 0, 0<span class="variable">.</span>6)' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/img</span>3<span class="variable">.</span>100<span class="variable">bt.com</span><span class="end-block">/upload</span><span class="end-block">/ttq</span>/20120908/1347116765019<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">              <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">width</span>:60,  <span class="variable">height</span>:60, <span class="variable">marginTop</span>:30,<span class="variable">borderRadius</span>:40, <span class="variable">borderWidth</span>:2,<span class="variable">borderColor</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0' &#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:18, <span class="variable">color</span>:'<span class="begin-block">#CECFCE</span>', <span class="variable">margin</span>:4 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span> Jassell Charm<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:14, <span class="variable">color</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Product Design<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">width</span>:140, <span class="variable">marginLeft</span>:40, <span class="variable">marginTop</span>:30, <span class="variable">marginRight</span>:40, <span class="variable">flexDirection</span>:'<span class="variable">row</span>', <span class="variable">justifyContent</span>:'<span class="variable">space-between</span>', <span class="variable">alignItems</span>:'<span class="variable">center</span>',   &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:12, <span class="variable">color</span>:'<span class="begin-block">#CECFCE</span>',&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>420<span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#3<span class="variable">A</span>87<span class="variable">DF</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span> Foller<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:12, <span class="variable">color</span>:'<span class="begin-block">#CECFCE</span>',&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>247<span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#3<span class="variable">A</span>87<span class="variable">DF</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span> Foller<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">Image</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;</span><br><span class="line">          <span class="variable">backgroundColor</span>: '#191919',</span><br><span class="line">          <span class="variable">height</span>: 56,</span><br><span class="line">          <span class="variable">justifyContent</span>:'<span class="variable">space-between</span>',</span><br><span class="line">          <span class="variable">flexDirection</span>:'<span class="variable">row</span>',</span><br><span class="line">          <span class="variable">alignItems</span>:'<span class="variable">center</span>',</span><br><span class="line">        &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0', <span class="variable">fontSize</span>:16, <span class="variable">flex</span>:1,<span class="variable">alignSelf</span>:'<span class="variable">center</span>' ,<span class="variable">textAlign</span>: '<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>FEED<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#545351', <span class="variable">fontSize</span>:16, <span class="variable">flex</span>:1,<span class="variable">alignSelf</span>:'<span class="variable">center</span>',<span class="variable">textAlign</span>: '<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>PHOTOS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">backgroundColor</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0', <span class="variable">height</span>:2, <span class="variable">width</span>:140&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">flexDirection</span>:'<span class="variable">row</span>', <span class="variable">height</span>:80,   &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">width</span>:80, <span class="variable">alignItems</span>:'<span class="variable">center</span>' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:8, <span class="variable">width</span>:8, <span class="variable">borderColor</span>:'<span class="begin-block">#F</span>1<span class="variable">A</span>289',  <span class="variable">borderWidth</span>:2, <span class="variable">borderRadius</span>:4, <span class="variable">marginTop</span>:40 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">flex</span>:1, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">justifyContent</span>:'<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#8<span class="variable">B</span>8<span class="variable">B</span>8<span class="variable">A</span>', <span class="variable">fontSize</span>:14, <span class="variable">marginBottom</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Checked in at <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">color</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Nola Bar and Restaurant<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'<span class="begin-block">#CBCCCB</span>', <span class="variable">fontSize</span>:12, <span class="variable">marginTop</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>WENNESDAY 7:00 PM<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">flexDirection</span>:'<span class="variable">row</span>', <span class="variable">height</span>:80,   &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">width</span>:80, <span class="variable">alignItems</span>:'<span class="variable">center</span>' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:40, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>', <span class="variable">overflow</span>:'<span class="variable">visible</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:8, <span class="variable">width</span>:8, <span class="variable">borderColor</span>:'#54<span class="variable">D</span>8<span class="variable">E</span>7',  <span class="variable">borderWidth</span>:2, <span class="variable">borderRadius</span>:4, &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">flex</span>:1, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>', <span class="variable">overflow</span>:'<span class="variable">visible</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">justifyContent</span>:'<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#8<span class="variable">B</span>8<span class="variable">B</span>8<span class="variable">A</span>', <span class="variable">fontSize</span>:14, <span class="variable">marginBottom</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Hey team let us meet at 7:00 PM <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'<span class="begin-block">#CBCCCB</span>', <span class="variable">fontSize</span>:12, <span class="variable">marginTop</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>WENNESDAY 6:32 PM<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">flexDirection</span>:'<span class="variable">row</span>', &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">width</span>:80, <span class="variable">alignItems</span>:'<span class="variable">center</span>' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:40, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>', <span class="variable">overflow</span>:'<span class="variable">visible</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:8, <span class="variable">width</span>:8, <span class="variable">borderColor</span>:'#3885<span class="variable">E</span>5',  <span class="variable">borderWidth</span>:2, <span class="variable">borderRadius</span>:4,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:200, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>', <span class="variable">overflow</span>:'<span class="variable">visible</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#8<span class="variable">B</span>8<span class="variable">B</span>8<span class="variable">A</span>', <span class="variable">fontSize</span>:14, <span class="variable">marginBottom</span>:5, <span class="variable">marginTop</span>:20, &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Bonfite with friends <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'<span class="begin-block">#CBCCCB</span>', <span class="variable">fontSize</span>:12, <span class="variable">marginTop</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>DEC 5<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>:'<span class="variable">http</span>:/<span class="end-block">/img.hb.aicdn.com</span>/735<span class="variable">afbfa</span>2<span class="variable">f</span>6<span class="variable">fee</span>24<span class="variable">d</span>1<span class="variable">a</span>10<span class="variable">e</span>1<span class="variable">a</span>22<span class="variable">b</span>23<span class="variable">c</span>63<span class="variable">f</span>707<span class="variable">ea</span>82281<span class="variable">c</span>3<span class="variable">-ajdFRe</span>_<span class="variable">fw</span>658' &#125;&#125;</span><span class="xml"><span class="tag"> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">borderRadius</span>:5, <span class="variable">height</span>:120, <span class="variable">width</span>:200&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = UserInfoView;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/hanks-zyh/Hrn" target="_blank" rel="external">github地址</a></p>
<blockquote>
<p>文章来自: <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>wuwu. 好饿~~<br>直接看效果图L:</p>
<p><img src="http://file.bmob.cn/M02/28/D4/oYYBAFaCYr6AIlcRAALzw1jyVMk263.png" alt="用户信息界面"><br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 实现Android中的ViewPager]]></title>
    <link href="http://hanks.xyz/2015/12/29/react-viewpager/"/>
    <id>http://hanks.xyz/2015/12/29/react-viewpager/</id>
    <published>2015-12-29T10:11:29.000Z</published>
    <updated>2015-12-29T10:40:04.000Z</updated>
    <content type="html"><![CDATA[<p>ViewPager在Android中的使用率也算是非常高的,React-Native也提供了类似Android的ViewPager组件,<code>ViewPagerAndroid</code> , 使用 <code>ViewPagerAndroid</code>可以轻松实现Android中的ViewPager.<br><img src="http://file.bmob.cn/M02/28/37/oYYBAFaCLeqAHyUJABoVzaZyVT0309.gif" alt="ViewPager"><br><a id="more"></a><br>使用 uiautomatorviewer 来查看一下布局,确实也就是Android原生的 <code>ViewPager</code>.<br><img src="http://file.bmob.cn/M02/28/37/oYYBAFaCLgiAUKPYAAOGa8ySm0w899.png" alt="ViewPager"></p>
<p><strong>声明ViewPagerAndroid</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> &#123;</span><br><span class="line">  ViewPagerAndroid,</span><br><span class="line">&#125;</span> = React;</span><br></pre></td></tr></table></figure></p>
<p>声明之后就可以使用了.在render 函数中返回 <code>&lt;ViewPagerAndroid&gt;&lt;/ViewPagerAndroid&gt;</code></p>
<p><strong>把ViewPagerAndroid添加到界面</strong><br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">ViewPagerAndroid</span></span><br><span class="line">  style=&#123;styles.viewPager&#125;</span><br><span class="line">  initialPage=&#123;<span class="number">0</span>&#125;</span><br><span class="line">  onPageScroll=&#123;this.onPageScroll&#125;</span><br><span class="line">  onPageSelected=&#123;this.onPageSelected&#125;</span><br><span class="line">  <span class="keyword">ref</span>=&#123;viewPager =&gt; &#123; this.viewPager = viewPager; &#125;&#125;&gt;</span><br><span class="line">  &#123;pages&#125;</span><br><span class="line">&lt;/<span class="type">ViewPagerAndroid</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>给ViewPagerAndroid添加内容</strong><br>ViewPagerAndroid 的内容是 {pages}, pages是一个数组,里面是一组子view, 通过push方法添加view</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">var pages = [];</span><br><span class="line">for (var i = 0; i <span class="tag">&lt; <span class="attribute">PAGES</span>; <span class="attribute">i</span>++) &#123;</span><br><span class="line">  <span class="attribute">var</span> <span class="attribute">pageStyle</span> = &#123;</span><br><span class="line">    <span class="attribute">backgroundColor:</span> <span class="attribute">BGCOLOR</span>[<span class="attribute">i</span> % <span class="attribute">BGCOLOR.length</span>],</span><br><span class="line">    <span class="attribute">flex:</span> <span class="attribute">1</span>,</span><br><span class="line">    <span class="attribute">alignItems:</span> '<span class="attribute">stretch</span>'</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attribute">pages.push</span>(</span><br><span class="line">    &lt;<span class="attribute">View</span> <span class="attribute">key</span>=<span class="value">&#123;i&#125;</span> <span class="attribute">style</span>=<span class="value">&#123;pageStyle&#125;</span> <span class="attribute">collapsable</span>=<span class="value">&#123;false&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Image</span></span><br><span class="line">        <span class="attribute">style</span>=<span class="value">&#123;styles.image&#125;</span></span><br><span class="line">        <span class="attribute">source</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">uri</span>: <span class="variable">IMAGE</span>_<span class="variable">URIS</span>[<span class="variable">i</span> % <span class="variable">BGCOLOR.length</span>]&#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">      /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi"></span><br><span class="line">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableWithoutFeedback,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">  View,</span><br><span class="line">  ViewPagerAndroid,</span><br><span class="line">  BackAndroid,</span><br><span class="line">&#125; = React;</span><br><span class="line"><span class="keyword">var</span> PAGES = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> BGCOLOR = [<span class="string">'#fdc08e'</span>, <span class="string">'#fff6b9'</span>, <span class="string">'#99d1b7'</span>, <span class="string">'#dde5fe'</span>, <span class="string">'#f79273'</span>];</span><br><span class="line"><span class="keyword">var</span> IMAGE_URIS = [</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1410/20141008tleBaldridge001h990.jpg'</span>,</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1409/volcanicpillar_vetter_960.jpg'</span>,</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1409/m27_snyder_960.jpg'</span>,</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1409/PupAmulti_rot0.jpg'</span>,</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1510/lunareclipse_27Sep_beletskycrop4.jpg'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">BackAndroid.addEventListener(<span class="string">'hardwareBackPress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(_navigator == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(_navigator.getCurrentRoutes().length === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _navigator.pop();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _navigator ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ViewPager  = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    _navigator = <span class="keyword">this</span>.props.navigator;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      page: <span class="number">0</span>,</span><br><span class="line">      animationsAreEnabled: <span class="literal">true</span>,</span><br><span class="line">      progress: &#123;</span><br><span class="line">        position: <span class="number">0</span>,</span><br><span class="line">        offset: <span class="number">0</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  onPageSelected: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;page: e.nativeEvent.position&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onPageScroll: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;progress: e.nativeEvent&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  move: <span class="function"><span class="keyword">function</span>(<span class="params">delta</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> page = <span class="keyword">this</span>.state.page + delta;</span><br><span class="line">    <span class="keyword">this</span>.go(page);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  go: <span class="function"><span class="keyword">function</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.animationsAreEnabled) &#123;</span><br><span class="line">      <span class="keyword">this</span>.viewPager.setPage(page);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.viewPager.setPageWithoutAnimation(page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;page&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pages = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; PAGES; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> pageStyle = &#123;</span><br><span class="line">        backgroundColor: BGCOLOR[i % BGCOLOR.length],</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        alignItems: <span class="string">'stretch'</span></span><br><span class="line">      &#125;;</span><br><span class="line">      pages.push(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">key</span>=<span class="value">&#123;i&#125;</span> <span class="attribute">style</span>=<span class="value">&#123;pageStyle&#125;</span> <span class="attribute">collapsable</span>=<span class="value">&#123;false&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;styles.image&#125;</span></span><br><span class="line">            <span class="attribute">source</span>=<span class="value">&#123;&#123;uri:</span> <span class="attribute">IMAGE_URIS</span>[<span class="attribute">i</span> % <span class="attribute">BGCOLOR.length</span>]&#125;&#125;</span><br><span class="line">          /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      )</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> &#123; page, animationsAreEnabled &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="title">ViewPagerAndroid</span></span><br><span class="line">           <span class="attribute">style</span>=<span class="value">&#123;styles.viewPager&#125;</span></span><br><span class="line">           <span class="attribute">initialPage</span>=<span class="value">&#123;0&#125;</span></span><br><span class="line">           <span class="attribute">onPageScroll</span>=<span class="value">&#123;this.onPageScroll&#125;</span></span><br><span class="line">           <span class="attribute">onPageSelected</span>=<span class="value">&#123;this.onPageSelected&#125;</span></span><br><span class="line">           <span class="attribute">ref</span>=<span class="value">&#123;viewPager</span> =&gt;</span> &#123; this.viewPager = viewPager; &#125;&#125;&gt;</span><br><span class="line">           &#123;pages&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="title">ViewPagerAndroid</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">    container: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">      backgroundColor: <span class="string">'white'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    imageContainer: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">      alignItems: <span class="string">'stretch'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    image: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    viewPager: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ViewPager;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/hanks-zyh/Hrn" target="_blank" rel="external">github地址</a></p>
<blockquote>
<p>文章来自: <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>ViewPager在Android中的使用率也算是非常高的,React-Native也提供了类似Android的ViewPager组件,<code>ViewPagerAndroid</code> , 使用 <code>ViewPagerAndroid</code>可以轻松实现Android中的ViewPager.<br><img src="http://file.bmob.cn/M02/28/37/oYYBAFaCLeqAHyUJABoVzaZyVT0309.gif" alt="ViewPager"><br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 的Navigator控制界面跳转]]></title>
    <link href="http://hanks.xyz/2015/12/24/react-navigator/"/>
    <id>http://hanks.xyz/2015/12/24/react-navigator/</id>
    <published>2015-12-24T11:08:08.000Z</published>
    <updated>2015-12-29T10:41:40.000Z</updated>
    <content type="html"><![CDATA[<p>例子:<br><img src="http://file.bmob.cn/M02/17/17/oYYBAFZ70QWAYn4DABTb3uKu6GM103.gif" alt="界面跳转"></p>
<p>回顾一下,一个简单的界面包含一下几块<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Sample React Native App</span><br><span class="line"> * https://github.com/hanks-zyh</span><br><span class="line"> */</span></span><br><span class="line"><span class="pi"></span><br><span class="line">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">&#125; =  React;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AwesomeProject = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="title">Text</span>&gt;</span>Hello, hanks<span class="tag">&lt;/<span class="title">Text</span>&gt;</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</span><br></pre></td></tr></table></figure>
<p>接下来练习<code>Navigator</code>的使用,<code>Navigator</code>标签负责不同界面之间的跳转;</p>
<p><a href="http://facebook.github.io/react-native/docs/navigator.html#content" target="_blank" rel="external">官方文档</a></p>
<h2 id="基础用法">基础用法</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;Navigator</span><br><span class="line">    initialRoute=&#123;&#123;name: <span class="string">'My First Scene'</span>, index: <span class="number">0</span>&#125;&#125;</span><br><span class="line">    renderScene=&#123;(route, navigator) =&gt;</span><br><span class="line">      &lt;MySceneComponent</span><br><span class="line">        name=&#123;route.name&#125;</span><br><span class="line">        onForward=&#123;() =&gt; &#123;</span><br><span class="line">          var nextIndex = route.index + <span class="number">1</span>;</span><br><span class="line">          navigator.push(&#123;</span><br><span class="line">            name: <span class="string">'Scene '</span> + nextIndex,</span><br><span class="line">            index: nextIndex,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        onBack=&#123;() =&gt; &#123;</span><br><span class="line">          if (route.index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            navigator.pop();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure>
<p>基础方法 <code>push</code>, <code>pop</code>, <strong>Navigator</strong> 的<code>renderScene</code> 方法可以获取到 <code>navigator</code> 和 <code>route</code>对象,然后就可使用 <code>navigator</code>的  <code>push</code>, <code>pop</code> 控制界面.</p>
<p>获取  <code>navigator</code> 和 <code>route</code> 的例子</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//...</span><br><span class="line">&lt;Navigator</span><br><span class="line">  ddebugOverlay=&#123;false&#125;</span><br><span class="line">  initialRoute=&#123;&#123; title: <span class="string">'Main'</span>, id:<span class="string">'http'</span>&#125;&#125;</span><br><span class="line">  configureScence=&#123;&#123; configureScence &#125;&#125;</span><br><span class="line">  renderScene=&#123;renderSceneAndroid&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">var _navigator; //全局navigator对象</span><br><span class="line">//...</span><br><span class="line">renderSceneAndroid: <span class="keyword">function</span>(route, navigator)&#123;</span><br><span class="line">  _navigator = navigator;</span><br><span class="line"></span><br><span class="line">  if(route.id === <span class="string">'http'</span>)&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;HttpView navigator=&#123;navigator&#125; route=&#123;route&#125; /&gt;</span><br><span class="line">     );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if(route.id === <span class="string">'shop'</span>)&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;ShopView navigator=&#123;navigator&#125; route=&#123;route&#125;/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//...</span><br><span class="line">// 调用push 跳转</span><br><span class="line">&lt;TouchableOpacity onPress=&#123; () =&gt; _navigator.push(&#123;title:<span class="string">'Http'</span>,id:<span class="string">'http'</span>&#125;) &#125;  style=&#123; styles.button &#125;&gt;</span><br><span class="line">  &lt;Text&gt;NetWork&lt;/Text&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br></pre></td></tr></table></figure>
<p>根据route的id来判断跳到哪个界面, 调用 push 添加新的界面, push的参数为 route:字典</p>
<h2 id="安卓返回按键监听">安卓返回按键监听</h2><p>http.js 中获取 navigator 对象,调用 <code>pop</code> 方法退出界面<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BackAndroid.addEventListener(<span class="string">'hardwareBackPress'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(_navigator == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(_navigator.getCurrentRoutes().length === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _navigator.pop();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/hanks-zyh/Hrn" target="_blank" rel="external">githb源码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>例子:<br><img src="http://file.bmob.cn/M02/17/17/oYYBAFZ70QWAYn4DABTb3uKu6GM103.gif" alt="界面跳转"></p>
<p>回顾一下,一个简单的界面包含一下几块<br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 网络请求]]></title>
    <link href="http://hanks.xyz/2015/12/23/react-network/"/>
    <id>http://hanks.xyz/2015/12/23/react-network/</id>
    <published>2015-12-23T09:53:43.000Z</published>
    <updated>2015-12-23T10:56:24.000Z</updated>
    <content type="html"><![CDATA[<p>大部分的app都需要进行网络连接,通过网络获取服务器的数据,然后更新app的界面展示内容,React-Native自然拥有网络的相关操作.<br><a href="https://facebook.github.io/react-native/docs/network.html#content" target="_blank" rel="external">官方文档</a><br><a id="more"></a></p>
<h2 id="fetch">fetch</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fetch</span><span class="params">(<span class="string">'https://mywebsite.com/endpoint/'</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>自定义请求的方法,请求头,请求体</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fetch<span class="list">(<span class="quoted">'https</span><span class="keyword">://mywebsite</span>.com/endpoint/', &#123;</span><br><span class="line">  method: <span class="quoted">'POST</span>',</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="quoted">'Accept</span>': <span class="quoted">'application/json</span>',</span><br><span class="line">    <span class="quoted">'Content-Type</span>': <span class="quoted">'application/json</span>',</span><br><span class="line">  &#125;,</span><br><span class="line">  body: JSON.stringify<span class="list">(&#123;</span><br><span class="line">    firstParam: <span class="quoted">'yourValue</span>',</span><br><span class="line">    secondParam: <span class="quoted">'yourOtherValue</span>',</span><br><span class="line">  &#125;)</span></span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>//<a href="https://suggest.taobao.com/sug?code=utf-8&amp;q=%E6%89%8B%E6%9C%BA" target="_blank" rel="external">https://suggest.taobao.com/sug?code=utf-8&amp;q=%E6%89%8B%E6%9C%BA</a></p>
<h3 id="异步">异步</h3><p>使用<code>then</code>  </p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://mywebsite.com/endpoint.php'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.text())</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(responseText)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(responseText);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>使用 <code>async/await</code> 在异步函数中调用</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async <span class="title">getUsersFromApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    let response = <span class="function">await <span class="title">fetch</span><span class="params">(<span class="string">'https://mywebsite.com/endpoint/'</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> response.users;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(<span class="keyword">error</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">error</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="WebSocket">WebSocket</h2><p><a href="https://facebook.github.io/react-native/docs/network.html#websocket" target="_blank" rel="external">websocket</a></p>
<h2 id="XMLHttpRequest">XMLHttpRequest</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.onreadystatechange = <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>, request.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.open(<span class="string">'GET'</span>, <span class="string">'https://mywebsite.com/endpoint.php'</span>);</span><br><span class="line">request.send();</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="例子">例子</h2><p><img src="http://file.bmob.cn/M02/14/F5/oYYBAFZ6e6KAZGvcACWsrjngMOY887.gif" alt="react-network"></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">var React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line">var &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Image,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">  ToastAndroid,</span><br><span class="line">  Alert,</span><br><span class="line">&#125; = React;</span><br><span class="line">var AwesomeProject = React.createClass(&#123;</span><br><span class="line">  getByFetch : function()&#123;</span><br><span class="line">    fetch(<span class="string">'https://m.baidu.com'</span> )</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.text())</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(responseText)</span> =&gt;</span> &#123;</span><br><span class="line">      ToastAndroid.show(responseText, ToastAndroid.SHORT);</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="keyword">new</span> Date().getMilliseconds());</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(error);</span><br><span class="line">    &#125;).done();</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'请求是异步的:'</span>+<span class="keyword">new</span> Date().getMilliseconds());</span><br><span class="line">  &#125;,</span><br><span class="line">  getByXMLHttpRequest : function()&#123;</span><br><span class="line">    var request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">        ToastAndroid.show(<span class="string">'success'</span>+ request.responseText ,ToastAndroid.SHORT);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">'error'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    request.open(<span class="string">'GET'</span>, <span class="string">'https://m.baidu.com'</span>);</span><br><span class="line">    request.send();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">postSource</span>:  function()&#123;</span><br><span class="line">    fetch(<span class="string">'https://m.baidu.com'</span> )</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.text())</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(responseText)</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="regexp">//</span> Works <span class="literal">on</span> both iOS <span class="keyword">and</span> Android</span><br><span class="line">        Alert.alert(</span><br><span class="line">          <span class="string">'请求结果'</span>,</span><br><span class="line">          responseText.substring(<span class="number">0</span>,<span class="number">100</span>),</span><br><span class="line">          [</span><br><span class="line">            &#123;<span class="attribute">text</span>: <span class="string">'Ask me later'</span>, <span class="attribute">onPress</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">'Ask me later pressed'</span>)&#125;,</span><br><span class="line">            &#123;<span class="attribute">text</span>: <span class="string">'Cancel'</span>, <span class="attribute">onPress</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">'Cancel Pressed'</span>), <span class="attribute">style</span>: <span class="string">'cancel'</span>&#125;,</span><br><span class="line">            &#123;<span class="attribute">text</span>: <span class="string">'OK'</span>, <span class="attribute">onPress</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">'OK Pressed'</span>)&#125;,</span><br><span class="line">          ]</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(error);</span><br><span class="line">    &#125;).done();</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">render</span>: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attribute">flex</span>:<span class="number">1</span>, <span class="attribute">justifyContent</span>:<span class="string">'center'</span>, <span class="attribute">alignItems</span>:<span class="string">'center'</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>.getByFetch&#125; style=&#123; styles.button &#125;&gt;</span><br><span class="line">          &lt;Text  &gt;GET <span class="keyword">by</span> fetch&lt;/Text&gt;</span><br><span class="line">        &lt;/TouchableOpacity&gt;</span><br><span class="line">        &lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>.getByXMLHttpRequest&#125; style=&#123; styles.button &#125;&gt;</span><br><span class="line">          &lt;Text &gt;GET <span class="keyword">by</span> XmlHttpRequest&lt;/Text&gt;</span><br><span class="line">        &lt;/TouchableOpacity&gt;</span><br><span class="line">        &lt;TouchableOpacity onPress= &#123; <span class="keyword">this</span>.postSource &#125; style=&#123; styles.button &#125;&gt;</span><br><span class="line">          &lt;Text &gt;POST&lt;/Text&gt;</span><br><span class="line">        &lt;/TouchableOpacity&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var styles = StyleSheet.create(&#123;</span><br><span class="line">    <span class="attribute">button</span>: &#123;</span><br><span class="line">      width : <span class="number">180</span>,</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="attribute">justifyContent</span>:<span class="string">'center'</span>,</span><br><span class="line">      <span class="attribute">backgroundColor</span>: <span class="string">'#e2e2e2'</span>,</span><br><span class="line">      <span class="attribute">alignItems</span>:<span class="string">'center'</span>,</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, <span class="function"><span class="params">()</span> =&gt;</span> AwesomeProject);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>大部分的app都需要进行网络连接,通过网络获取服务器的数据,然后更新app的界面展示内容,React-Native自然拥有网络的相关操作.<br><a href="https://facebook.github.io/react-native/docs/network.html#content">官方文档</a><br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 组件练习-购物app侧滑菜单]]></title>
    <link href="http://hanks.xyz/2015/12/22/react-components/"/>
    <id>http://hanks.xyz/2015/12/22/react-components/</id>
    <published>2015-12-22T10:58:22.000Z</published>
    <updated>2015-12-22T11:01:38.000Z</updated>
    <content type="html"><![CDATA[<p>参照官方例子练习组件的使用,练习View Image Text 还有Android平台的DrawerLayoutAndroid<br>效果图:<br><img src="http://file.bmob.cn/M02/11/DF/oYYBAFZ5LF6AVgO5AIY4EJ1JHfk120.gif" alt="React-Native"></p>
<h2 id="React-Native_中的_width,height的_100%">React-Native  中的 width,height的 100%</h2><p>在React-Native 中没有百分比这样的宽高,但是有替代的,具体见 <a href="https://github.com/facebook/css-layout/issues/57#ref-issue-86696744" target="_blank" rel="external">issue</a><br><code>flex:1</code> 相当于 <code>height:100%</code><br><code>alignSelf:&#39;stretch&#39;</code> 相当于 <code>width:100%</code></p>
<a id="more"></a>
<h2 id="React-Native_的style">React-Native 的style</h2><ul>
<li>直接写在View中</li>
</ul>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123;<span class="symbol">fontFamily:</span> <span class="string">'notoserif'</span>, <span class="symbol">fontStyle:</span> <span class="string">'italic'</span>, <span class="symbol">fontWeight:</span> <span class="string">'bold'</span>&#125;&#125;</span>&gt;</span><br><span class="line"><span class="constant">NotoSerif</span> <span class="constant">Bold</span> <span class="constant">Italic</span></span><br><span class="line">&lt;<span class="regexp">/Text&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 StyleSheet.createClass 创建</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var styles = StyleSheet.create(&#123;</span><br><span class="line">  base: &#123;</span><br><span class="line">    width: <span class="number">38</span>,</span><br><span class="line">    height: <span class="number">38</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  background: &#123;</span><br><span class="line">    backgroundColor: <span class="string">'#222222'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  active: &#123;</span><br><span class="line">    borderWidth: <span class="number">2</span>,</span><br><span class="line">    borderColor: <span class="string">'#00ff00'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>以上两种混合</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;[styles.remainder,</span> &#123;<span class="attribute">color:</span> '#<span class="attribute">a1a1a1</span>'&#125;]&#125;&gt;</span></span><br><span class="line">simple text</span><br><span class="line"><span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Flex">Flex</h2><p><a href="http://hanks.xyz/2015/12/21/react-flexbox/">React-Native中的布局 </a></p>
<h2 id="DrawerLayoutAndroid侧滑菜单">DrawerLayoutAndroid侧滑菜单</h2><p><code>DrawerLayoutAndroid</code> 只在android中,它的 <code>renderNavigationView</code> 代表侧滑菜单内容, 子View代表主界面布局<br>通过<code>ref={(drawer) =&gt; { this.drawer = drawer; }}</code> 获取<code>drawer</code>对象<br>打开: <code>openDrawer()</code><br>关闭: <code>closeDrawer()</code></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">DrawerLayoutAndroid</span></span><br><span class="line">  drawerWidth=&#123;<span class="number">300</span>&#125;</span><br><span class="line">  drawerPosition=&#123;<span class="type">DrawerLayoutAndroid</span>.positions.<span class="type">Left</span>&#125;</span><br><span class="line">  <span class="keyword">ref</span>=&#123;(drawer) =&gt; &#123; this.drawer = drawer; &#125;&#125;</span><br><span class="line">  renderNavigationView=&#123;() =&gt; navigationView&#125;&gt;</span><br><span class="line">  &lt;<span class="type">View</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">&lt;/<span class="type">DrawerLayoutAndroid</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="按钮的点击效果">按钮的点击效果</h2><ul>
<li><a href="https://facebook.github.io/react-native/docs/touchablehighlight.html#content" target="_blank" rel="external">TouchableHighlight</a></li>
<li><a href="https://facebook.github.io/react-native/docs/touchablenativefeedback.html#content" target="_blank" rel="external">TouchableNativeFeedback</a></li>
<li><a href="https://facebook.github.io/react-native/docs/touchableopacity.html#content" target="_blank" rel="external">TouchableOpacity</a></li>
<li><a href="https://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#content" target="_blank" rel="external">TouchableWithoutFeedback</a></li>
</ul>
<p>根据需要的效果选择</p>
<h2 id="点击函数的触发">点击函数的触发</h2><p>定义函数</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openDrawer: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.drawer.openDrawer();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>设置点击事件</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onPress=&#123;<span class="keyword">this</span>.openDrawer&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">/**</span><br><span class="line"> * hanks</span><br><span class="line"> * https://github.com/hanks-zyh</span><br><span class="line"> */</span><br><span class="line">'use strict';</span><br><span class="line"></span><br><span class="line">var React = require('react-native');</span><br><span class="line">var &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Image,</span><br><span class="line">  DrawerLayoutAndroid,</span><br><span class="line">  ProgressBarAndroid,</span><br><span class="line">  ScrollView,</span><br><span class="line">  ListView,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">&#125; = React;</span><br><span class="line">var AwesomeProject = React.createClass(&#123;</span><br><span class="line">  openDrawer: function () &#123;</span><br><span class="line">      this.drawer.openDrawer();</span><br><span class="line">  &#125;,</span><br><span class="line">  getInitialState:function()&#123;</span><br><span class="line">    var ds = new ListView.DataSource( &#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125; );</span><br><span class="line">    return &#123;</span><br><span class="line">      dataSource : ds.cloneWithRows(['CLOTHES','PACKAGES','SHOES',]),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: function() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var navigationView = (</span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">flex</span>: 1, <span class="variable">backgroundColor</span>: '<span class="begin-block">#fff</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/img.hb.aicdn.com</span>/735<span class="variable">afbfa</span>2<span class="variable">f</span>6<span class="variable">fee</span>24<span class="variable">d</span>1<span class="variable">a</span>10<span class="variable">e</span>1<span class="variable">a</span>22<span class="variable">b</span>23<span class="variable">c</span>63<span class="variable">f</span>707<span class="variable">ea</span>82281<span class="variable">c</span>3<span class="variable">-ajdFRe</span>_<span class="variable">fw</span>658' &#125;&#125;</span><span class="xml"><span class="tag"> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;  <span class="variable">height</span>:200 &#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ListView</span></span><br><span class="line">          <span class="attribute">dataSource</span>=<span class="value">&#123;this.state.dataSource&#125;</span></span><br><span class="line">          <span class="attribute">renderRow</span>=<span class="value">&#123;</span> (<span class="attribute">rowData</span>) =&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;</span><br><span class="line">                <span class="variable">height</span>: 56,</span><br><span class="line">                <span class="variable">flexDirection</span> : '<span class="variable">row</span>',</span><br><span class="line">                <span class="variable">alignItems</span>:'<span class="variable">center</span>',</span><br><span class="line">                <span class="variable">paddingLeft</span>: 20,</span><br><span class="line">              &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span> = &#123; <span class="attribute">require</span>('<span class="attribute">.</span>/<span class="attribute">img</span>/<span class="attribute">list4.png</span>') &#125; <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">height</span>:10, <span class="variable">width</span>:10, <span class="variable">margin</span>:8 &#125;&#125;</span><span class="xml"><span class="tag">/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.listItem</span> &#125;&gt;</span>&#123;rowData&#125;<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">           &#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="title">DrawerLayoutAndroid</span></span><br><span class="line">        <span class="attribute">drawerWidth</span>=<span class="value">&#123;300&#125;</span></span><br><span class="line">        <span class="attribute">drawerPosition</span>=<span class="value">&#123;DrawerLayoutAndroid.positions.Left&#125;</span></span><br><span class="line">        <span class="attribute">ref</span>=<span class="value">&#123;(drawer)</span> =&gt;</span> &#123; this.drawer = drawer; &#125;&#125;</span><br><span class="line">        renderNavigationView=&#123;() =&gt; navigationView&#125;</span><br><span class="line">        &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="title">ScrollView</span> <span class="attribute">contentContainerStyle</span>=<span class="value">&#123;styles.contentContainer&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span> = </span></span><span class="expression">&#123;&#123;</span><br><span class="line">          <span class="variable">backgroundColor</span>: '<span class="begin-block">#f</span>4<span class="variable">ec</span>34',</span><br><span class="line">          <span class="variable">height</span>:54,</span><br><span class="line">          <span class="variable">flexDirection</span>:'<span class="variable">row</span>',</span><br><span class="line">          <span class="variable">justifyContent</span>:'<span class="variable">space-between</span>',</span><br><span class="line">          <span class="variable">alignItems</span>:'<span class="variable">center</span>',</span><br><span class="line">          <span class="variable">paddingLeft</span>: 20,</span><br><span class="line">          <span class="variable">paddingRight</span>:20,</span><br><span class="line">        &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">TouchableOpacity</span> <span class="attribute">onPress</span>=<span class="value">&#123;this.openDrawer&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>=<span class="value">&#123;require('.</span>/<span class="attribute">img</span>/<span class="attribute">list4.png</span>')&#125; <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;  <span class="variable">width</span>: 20, <span class="variable">height</span>: 20&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="title">TouchableOpacity</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:18,  <span class="variable">color</span>:'#484848' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>SHOP<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>=<span class="value">&#123;require('.</span>/<span class="attribute">img</span>/<span class="attribute">search.png</span>')&#125; <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;  <span class="variable">width</span>: 20, <span class="variable">height</span>: 20&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/img.hb.aicdn.com</span><span class="end-block">/cbf</span>3<span class="variable">ebcae</span>08<span class="variable">ef</span>62<span class="variable">ef</span>02<span class="variable">dd</span>61<span class="variable">aa</span>2407414<span class="variable">dc</span>64<span class="variable">e</span>794150313<span class="variable">-KRUD</span>1<span class="variable">s</span>_<span class="variable">fw</span>658' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">          <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">height</span>: 220, <span class="variable">margin</span>: 20&#125;&#125;</span><span class="xml"><span class="tag">  /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:16,  <span class="variable">color</span>:'#484848', <span class="variable">alignSelf</span>:'<span class="variable">center</span>' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>HOT PRODUCTS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoRow</span> &#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">YQAPKVXXXXa</span>9<span class="variable">XFXXwu</span>0<span class="variable">bFXXX.png</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span> &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName</span> &#125;&gt;</span>TEL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$99<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">DteFKVXXXXXQapXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span>  <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>ARFL JUYHS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$34.2<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">dQGTKVXXXXaaXVXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TKLL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$182<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:16,  <span class="variable">color</span>:'#484848',  <span class="variable">alignSelf</span>:'<span class="variable">center</span>' , <span class="variable">marginTop</span>:20 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>NEW COLLECTIONS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoRow</span> &#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">rzGNKVXXXXbGXVXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TEL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$99<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">rzGNKVXXXXbGXVXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>ARFL JUYHS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$34.2<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">uBUxKVXXXXcGXpXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TKLL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$182<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:16,  <span class="variable">color</span>:'#484848',  <span class="variable">alignSelf</span>:'<span class="variable">center</span>' , <span class="variable">marginTop</span>:20 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>MOST POP<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoRow</span> &#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">Rqa</span>3<span class="variable">KVXXXXb</span>6<span class="variable">XpXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TEL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$99<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">Rqa</span>3<span class="variable">KVXXXXb</span>6<span class="variable">XpXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>ARFL JUYHS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$34.2<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">lMksKVXXXXa</span>7<span class="variable">XpXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TKLL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$182<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">DrawerLayoutAndroid</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var styles = StyleSheet.create(&#123;</span><br><span class="line"> contentContainer: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> listItem:&#123;</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"> photoRow:&#123;</span><br><span class="line">   flexDirection:'row',</span><br><span class="line">   justifyContent: 'space-between',</span><br><span class="line">   paddingLeft: 20,</span><br><span class="line">   paddingRight: 20,</span><br><span class="line">   marginTop:10,</span><br><span class="line"> &#125;,</span><br><span class="line"> photoItem:&#123;</span><br><span class="line">   height: 120,</span><br><span class="line">   width:90 ,</span><br><span class="line">   alignItems: 'stretch' ,</span><br><span class="line">   alignSelf:'center'</span><br><span class="line"> &#125;,</span><br><span class="line"> photoName:&#123;</span><br><span class="line">   fontSize:14,</span><br><span class="line">   color:'#f39d7f',</span><br><span class="line">   alignSelf:'center',</span><br><span class="line"> &#125;,</span><br><span class="line"> photoPrice:&#123;</span><br><span class="line">   fontSize:12,  color:'#484848', alignSelf:'center'</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent('AwesomeProject', () =&gt; AwesomeProject);</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>参照官方例子练习组件的使用,练习View Image Text 还有Android平台的DrawerLayoutAndroid<br>效果图:<br><img src="http://file.bmob.cn/M02/11/DF/oYYBAFZ5LF6AVgO5AIY4EJ1JHfk120.gif" alt="React-Native"></p>
<h2 id="React-Native_中的_width,height的_100%">React-Native  中的 width,height的 100%</h2><p>在React-Native 中没有百分比这样的宽高,但是有替代的,具体见 <a href="https://github.com/facebook/css-layout/issues/57#ref-issue-86696744">issue</a><br><code>flex:1</code> 相当于 <code>height:100%</code><br><code>alignSelf:&#39;stretch&#39;</code> 相当于 <code>width:100%</code></p>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native中的布局]]></title>
    <link href="http://hanks.xyz/2015/12/21/react-flexbox/"/>
    <id>http://hanks.xyz/2015/12/21/react-flexbox/</id>
    <published>2015-12-21T07:11:14.000Z</published>
    <updated>2015-12-29T14:10:12.000Z</updated>
    <content type="html"><![CDATA[<p>React-Native 使用 FlexBox布局来放置元素</p>
<blockquote>
<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。</p>
</blockquote>
<p><a href="http://facebook.github.io/react-native/docs/flexbox.html#content" target="_blank" rel="external">Flexbox</a></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alignItems <span class="class"><span class="keyword">enum</span>('<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">stretch</span>')</span></span><br><span class="line"></span><br><span class="line">alignSelf <span class="class"><span class="keyword">enum</span>('<span class="title">auto</span>', '<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">stretch</span>')</span></span><br><span class="line"></span><br><span class="line">flex number</span><br><span class="line"></span><br><span class="line">flexDirection <span class="class"><span class="keyword">enum</span>('<span class="title">row</span>', '<span class="title">column</span>')</span></span><br><span class="line"></span><br><span class="line">flexWrap <span class="class"><span class="keyword">enum</span>('<span class="title">wrap</span>', '<span class="title">nowrap</span>')</span></span><br><span class="line"></span><br><span class="line">justifyContent <span class="class"><span class="keyword">enum</span>('<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">space</span>-<span class="title">between</span>', '<span class="title">space</span>-<span class="title">around</span>')</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="练习">练习</h2><p><img src="https://dn-coding-net-production-pp.qbox.me/711188c5-babe-478d-989f-0bd70916c0ea.png" alt="flex"></p>
<p><strong>一个点</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">box</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">5</span>,</span><br><span class="line">  height:<span class="number">65</span>,</span><br><span class="line">  width:<span class="number">65</span>,</span><br><span class="line">  borderRadius:<span class="number">5</span>,</span><br><span class="line">  backgroundColor:<span class="string">'#ffffff'</span>,</span><br><span class="line">  justifyContent: <span class="string">'center'</span>,</span><br><span class="line">  alignItems:<span class="string">'center'</span>,</span><br><span class="line">  margin:<span class="number">10</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br><span class="line"><span class="tag">item</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">borderRadius</span>:<span class="value"><span class="number">7.5</span>,</span><br><span class="line">  height:<span class="number">15</span>,</span><br><span class="line">  width:<span class="number">15</span>,</span><br><span class="line">  backgroundColor:<span class="string">'#333333'</span></span><br><span class="line"></span></span></span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>两个点</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box2&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">box2</span>:&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">65</span>,</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">65</span>,</span><br><span class="line">    <span class="attribute">borderRadius</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attribute">backgroundColor</span>:<span class="string">'#ffffff'</span>,</span><br><span class="line">    <span class="attribute">flexDirection</span>:<span class="string">'column'</span>,</span><br><span class="line">    <span class="attribute">justifyContent</span>: <span class="string">'space-between'</span>,</span><br><span class="line">    <span class="attribute">alignItems</span>:<span class="string">'center'</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p><strong>三个点</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box3&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item32</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item33</span>&#125;/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">box3</span>:<span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">5</span>,</span><br><span class="line">    margin:<span class="number">10</span>,</span><br><span class="line">    height:<span class="number">65</span>,</span><br><span class="line">    width:<span class="number">65</span>,</span><br><span class="line">    borderRadius:<span class="number">5</span>,</span><br><span class="line">    backgroundColor:<span class="string">'#ffffff'</span>,</span><br><span class="line">    flexDirection:<span class="string">'column'</span>,</span><br><span class="line">    justifyContent: <span class="string">'space-between'</span>,</span><br><span class="line">  </span></span></span>&#125;,</span><br><span class="line">  <span class="tag">item32</span>:<span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">borderRadius</span>:<span class="value"><span class="number">7.5</span>,</span><br><span class="line">    height:<span class="number">15</span>,</span><br><span class="line">    width:<span class="number">15</span>,</span><br><span class="line">    alignSelf:<span class="string">'center'</span>,</span><br><span class="line">    backgroundColor:<span class="string">'#333333'</span></span><br><span class="line">  </span></span></span>&#125;,</span><br><span class="line">  <span class="tag">item33</span>:<span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">alignSelf</span>:<span class="value"><span class="string">'flex-end'</span>,</span><br><span class="line">    borderRadius:<span class="number">7.5</span>,</span><br><span class="line">    height:<span class="number">15</span>,</span><br><span class="line">    width:<span class="number">15</span>,</span><br><span class="line">    backgroundColor:<span class="string">'#333333'</span></span><br><span class="line">  </span></span></span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>四个点</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box4&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column41</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column42</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">box4</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">5</span>,</span><br><span class="line">  margin:<span class="number">10</span>,</span><br><span class="line">  height:<span class="number">65</span>,</span><br><span class="line">  width:<span class="number">65</span>,</span><br><span class="line">  borderRadius:<span class="number">5</span>,</span><br><span class="line">  backgroundColor:<span class="string">'#ffffff'</span>,</span><br><span class="line">  justifyContent: <span class="string">'space-between'</span>,</span><br><span class="line">  flexDirection:<span class="string">'row'</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br><span class="line"><span class="tag">column41</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">justifyContent</span>:<span class="value"><span class="string">'space-between'</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br><span class="line"><span class="tag">column42</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">justifyContent</span>:<span class="value"><span class="string">'space-between'</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>五个点</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box4&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column41</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column52</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column42</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">column52</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">justifyContent</span>:<span class="value"><span class="string">'center'</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br></pre></td></tr></table></figure>
<p>参考链接:<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><br><a href="http://segmentfault.com/a/1190000002658374" target="_blank" rel="external">http://segmentfault.com/a/1190000002658374</a></p>
<blockquote>
<p>文章出处 <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>React-Native 使用 FlexBox布局来放置元素</p>
<blockquote>
<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。</p>
</blockquote>
<p><a href="http://facebook.github.io/react-native/docs/flexbox.html#content">Flexbox</a></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alignItems <span class="class"><span class="keyword">enum</span>('<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">stretch</span>')</span></span><br><span class="line"></span><br><span class="line">alignSelf <span class="class"><span class="keyword">enum</span>('<span class="title">auto</span>', '<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">stretch</span>')</span></span><br><span class="line"></span><br><span class="line">flex number</span><br><span class="line"></span><br><span class="line">flexDirection <span class="class"><span class="keyword">enum</span>('<span class="title">row</span>', '<span class="title">column</span>')</span></span><br><span class="line"></span><br><span class="line">flexWrap <span class="class"><span class="keyword">enum</span>('<span class="title">wrap</span>', '<span class="title">nowrap</span>')</span></span><br><span class="line"></span><br><span class="line">justifyContent <span class="class"><span class="keyword">enum</span>('<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">space</span>-<span class="title">between</span>', '<span class="title">space</span>-<span class="title">around</span>')</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atom安装Nuclide]]></title>
    <link href="http://hanks.xyz/2015/12/18/atom-nuclide/"/>
    <id>http://hanks.xyz/2015/12/18/atom-nuclide/</id>
    <published>2015-12-18T04:10:29.000Z</published>
    <updated>2015-12-18T04:37:24.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://nuclide.io/" target="_blank" rel="external"><strong>Nuclide</strong></a> 是Facebook 基于Atom开发的IDE,本地环境Ubuntu 64位, 通过Atom的setting界面安装 nuclide 总出错, 出错后打开atom巨卡,然后通过手动安装成功. 包括安装 <a href="http://flowtype.org" target="_blank" rel="external">flow</a>同样也是手动安装成功.</p>
<a id="more"></a>
<h2 id="手动安装_Nuclide">手动安装 Nuclide</h2><ol>
<li>首先删除 <code>~/.atom/packages</code>目录下nuclide开头的文件夹</li>
<li>找个其他目录下载nuclide,然后手动安装</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/facebook/nuclide.git</span><br><span class="line">$ cd nuclide</span><br><span class="line">$ npm install     <span class="comment"># 安装包依赖</span></span><br><span class="line">$ apm link          <span class="comment"># link 到atom的package</span></span><br></pre></td></tr></table></figure>
<ol>
<li>再次打开 Atom</li>
</ol>
<p><img src="https://dn-coding-net-production-pp.qbox.me/99f52cd3-3dd5-401a-a35e-39389dfbdcf8.png" alt="nuclide"></p>
<h2 id="安装Flow">安装Flow</h2><p>Flow is a static type checker, designed to find type errors in JavaScript programs<br><a href="https://atom.io/packages/nuclide-flow" target="_blank" rel="external">nuclide-flow</a><br><a href="http://flowtype.org/docs/getting-started.html" target="_blank" rel="external">FLow安装文档</a></p>
<ol>
<li><p>下载<br>Mac OS X: <a href="https://facebook.github.io/flow/downloads/flow-osx-latest.zip" target="_blank" rel="external">https://facebook.github.io/flow/downloads/flow-osx-latest.zip</a><br>Linux (64 bit): <a href="https://facebook.github.io/flow/downloads/flow-linux64-latest.zip" target="_blank" rel="external">https://facebook.github.io/flow/downloads/flow-linux64-latest.zip</a></p>
</li>
<li><p>解压</p>
</li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> unzip <span class="keyword">flow</span>.zip</span><br></pre></td></tr></table></figure>
<ol>
<li>添加到PATH</li>
</ol>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; cd flow</span><br><span class="line">$&gt; echo -e <span class="string">"\nPATH=\"</span>\<span class="variable">$PATH</span>:$(pwd)/\<span class="string">""</span> &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</span><br></pre></td></tr></table></figure>
<p><code>flow check</code>命令进行检查</p>
<ul>
<li>首先文件夹目录下需要有<code>.flowconfig</code>文件</li>
<li>在需要检查的js文件加上 <code>/* @flow */</code> 注释</li>
<li>如果当前安装的flow版本和<code>flowconfig</code>里面写的版本不一样时,需要修改<code>flowconfig</code>,修改flow版本为所安装的版本</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://nuclide.io/"><strong>Nuclide</strong></a> 是Facebook 基于Atom开发的IDE,本地环境Ubuntu 64位, 通过Atom的setting界面安装 nuclide 总出错, 出错后打开atom巨卡,然后通过手动安装成功. 包括安装 <a href="http://flowtype.org">flow</a>同样也是手动安装成功.</p>]]>
    
    </summary>
    
      <category term="Atom" scheme="http://hanks.xyz/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[运行React-Native例子UIExplorer]]></title>
    <link href="http://hanks.xyz/2015/12/18/react-native-UIExplorer/"/>
    <id>http://hanks.xyz/2015/12/18/react-native-UIExplorer/</id>
    <published>2015-12-17T17:16:28.000Z</published>
    <updated>2015-12-18T03:18:26.000Z</updated>
    <content type="html"><![CDATA[<p>运行 FaceBook 给出的例子UIExplorer, 由于网络问题折腾了半天, 在公司网络死活不行,到家一小会儿搞定. 原因是我使用 npm install 的时候 直接 <code>ctrl+c</code> 断掉了, 需要把目录下的<code>node_modules</code>文件夹删除再重新安装.</p>
<a id="more"></a>
<h3 id="关于NPM">关于NPM</h3><p><a href="http://www.cnblogs.com/chyingp/p/npm.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">NPM小结</a></p>
<h3 id="react-native_环境">react-native 环境</h3><p>参考前面:<a href="http://hanks.xyz/2015/12/15/react-native-start-md/">Ubuntu进行 react-native 的开发</a></p>
<h3 id="APK运行到模拟器">APK运行到模拟器</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/facebook/react-native.git</span><br><span class="line">cd react-native</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p><code>npm install</code> 过程需要下载大约 100多兆的依赖, 所以看网络情况咯</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd react-native</span><br><span class="line">./<span class="string">gradlew :</span><span class="string">Examples:</span><span class="string">UIExplorer:</span><span class="string">android:</span><span class="string">app:</span>installDebug</span><br><span class="line">.<span class="regexp">/packager/</span>packager.sh</span><br></pre></td></tr></table></figure>
<p>注意,使用<code>packager.sh</code> 开启server.<br>然后利用 <code>gradlew</code>命令编译apk</p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/7edbed81-477e-4173-8ea4-f5d0ac0988b7.png" alt="模拟器"></p>
<h3 id="运行到真机">运行到真机</h3><ol>
<li>真机开启USB调试</li>
<li>必须关掉模拟器, react-native要求同时只能连接一个设备, 可以通过 <code>abd devices</code>查看连接个数</li>
<li><code>adb reverse tcp:8081 tcp:8081</code><br>手机必须和电脑在同一个局域网, 然后把手机无线的代理设置为电脑的ip:8081</li>
<li>然后可以安装到真机了</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd react-native</span><br><span class="line">./<span class="string">gradlew :</span><span class="string">Examples:</span><span class="string">UIExplorer:</span><span class="string">android:</span><span class="string">app:</span>installDebug</span><br><span class="line">.<span class="regexp">/packager/</span>packager.sh</span><br></pre></td></tr></table></figure>
<p><img src="https://dn-coding-net-production-pp.qbox.me/b78d351b-bc3f-40b5-840a-db8a82153fa2.png" alt="真机"></p>
<p>文章出处: <a href="http://hanks.xyz">http://hanks.xyz</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>运行 FaceBook 给出的例子UIExplorer, 由于网络问题折腾了半天, 在公司网络死活不行,到家一小会儿搞定. 原因是我使用 npm install 的时候 直接 <code>ctrl+c</code> 断掉了, 需要把目录下的<code>node_modules</code>文件夹删除再重新安装.</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu进行 React-Native 的开发]]></title>
    <link href="http://hanks.xyz/2015/12/15/react-native-start-md/"/>
    <id>http://hanks.xyz/2015/12/15/react-native-start-md/</id>
    <published>2015-12-15T04:07:52.000Z</published>
    <updated>2015-12-18T02:55:32.000Z</updated>
    <content type="html"><![CDATA[<p>尝试在　<code>Ubuntu 14.04</code>　上面进行 react-native 的开发, 安装<a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">官方文档</a>进行配置,记录配置流程</p>
<h2 id="安装_node-js">安装 node.js</h2><p>在<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载源码安装即可, 安装后查看版本<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span><span class="identifier"> </span><span class="title">-v</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装_watchman">安装 watchman</h2><p><a href="https://facebook.github.io/watchman/docs/install.html" target="_blank" rel="external">文档</a></p>
<p>安装依赖<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> install autoconf  automake python-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>安装 watchman, 如果出错, 查看安装依赖的详细文档<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="char">$ </span>git clone <span class="method">https:</span>//github.com/facebook/watchman.git</span><br><span class="line"><span class="char">$ </span>cd watchman</span><br><span class="line"><span class="char">$ </span>git checkout v4<span class="number">.3</span><span class="number">.0</span>  # the latest stable release</span><br><span class="line"><span class="char">$ </span>./autogen.sh</span><br><span class="line"><span class="char">$ </span>./configure</span><br><span class="line"><span class="char">$ </span>make</span><br><span class="line"><span class="char">$ </span>sudo make install</span><br></pre></td></tr></table></figure></p>
<h2 id="安装_react-native">安装 react-native</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> react-<span class="keyword">native</span>-cli</span></span><br></pre></td></tr></table></figure>
<h2 id="创建react-native_项目">创建react-native 项目</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-<span class="keyword">native</span> init AwesomeProject</span><br></pre></td></tr></table></figure>
<h2 id="运行">运行</h2><p>启动 server, 如果没有启动server , 会报错 <code>React Native: ReferenceError: Can&#39;t find variable: require (line 1 in the generated bundle)</code></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-<span class="keyword">native</span> start</span><br></pre></td></tr></table></figure>
<p><img src="https://dn-coding-net-production-pp.qbox.me/8cc2616a-d10b-4367-a093-9982589d1a27.png" alt=" react-native start  "></p>
<p>编译apk,并运行到模拟器, 需要配置好Android开发的环境变量(ANDROID_HOME,  GRADLE_HOME )</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-<span class="keyword">native</span> run-android</span><br></pre></td></tr></table></figure>
<p><img src="https://dn-coding-net-production-pp.qbox.me/a97d02dc-4546-47e4-899a-644390e87352.png" alt="Android"></p>
<p>做一些修改</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Sample React Native App</span><br><span class="line"> * https://github.com/facebook/react-native</span><br><span class="line"> */</span></span><br><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AwesomeProject = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.welcome&#125;</span>&gt;</span></span><br><span class="line">         Hanks,  Welcome to React Native!</span><br><span class="line">        <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.instructions&#125;</span>&gt;</span></span><br><span class="line">          To get started, edit index.android.js</span><br><span class="line">        <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.reply&#125;</span>&gt;</span></span><br><span class="line">         Yep, I do!</span><br><span class="line">        <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.instructions&#125;</span>&gt;</span></span><br><span class="line">          Shake or press menu button for dev menu</span><br><span class="line">        <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  welcome: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    margin: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    color: <span class="string">'#333333'</span>,</span><br><span class="line">    marginBottom: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 添加style</span></span><br><span class="line">  reply:&#123;</span><br><span class="line">      color: <span class="string">'#e8801b'</span>,</span><br><span class="line">      fontSize: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</span><br></pre></td></tr></table></figure>
<p>再次reload js, 可以通过菜单调出选项</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/0028d35c-c502-49ba-8994-c04c3c5ad6aa.png" alt="Android"></p>
<p>＞文章出处: <a href="http://hanks.xyz">http://hanks.xyz</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>尝试在　<code>Ubuntu 14.04</code>　上面进行 react-native 的开发, 安装<a href="https://facebook.github.io/react-native/docs/getting-started.html">官方文档</a>进行配置,记录配置流程</p>
<h2 id="安装_node-js">安装 node.js</h2><p>在<a href="https://nodejs.org/en/">官网</a>下载源码安装即可, 安装后查看版本<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span><span class="identifier"> </span><span class="title">-v</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装_watchman">安装 watchman</h2><p><a href="https://facebook.github.io/watchman/docs/install.html">文档</a></p>
<p>安装依赖<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> install autoconf  automake python-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
      <category term="Ubuntu" scheme="http://hanks.xyz/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重构 Plaid app - 响应式的MVP模式(一)]]></title>
    <link href="http://hanks.xyz/2015/12/08/refactoring-plaid-1/"/>
    <id>http://hanks.xyz/2015/12/08/refactoring-plaid-1/</id>
    <published>2015-12-08T10:17:00.000Z</published>
    <updated>2015-12-10T02:03:26.000Z</updated>
    <content type="html"><![CDATA[<p>Nick Butcher 在 <a href="https://github.com/nickbutcher/plaid" target="_blank" rel="external">github</a> 上开源了Plaid。这个app不仅很酷,还拥有极致的 UI / UX。如此炫酷的app的代码对开发者来说copy下来阅读一下可谓是最佳实践。于是我也copy下来,决定深入Plaid的代码。和往常一样，你会发现里面的一些代码可以用其他的方式实现。因此不只是谈论代码,我决定花一些时间来重构Plaid的部分源代码。我将写3篇文章来分享我关于如何重构Plaid的,这篇文章是第一部分。</p>
<p>前言: 开始我以为自己能重构整个app. 然而,事实是我太天真了,我低估了这个应用的复杂度和新特性的数量。在我花了几个小时阅读 Nick Butcher 的代码之后, 我发现有些功能仅仅通过使用应用程序很难发现。一句话: 我意识到我没有时间把所有的想法付诸行动。因此我的“重构”集中于应用程序的“主页”和“搜索屏幕”。本来想看看有没有更多模块可以重构，但是我没有太多空闲时间来做了。重构代码可以在<a href="https://github.com/sockeqwe/plaid" target="_blank" rel="external">github上</a>找到</p>
<a id="more"></a>
<blockquote>
<ul>
<li>原文链接 :  <a href="http://hannesdorfmann.com/android/plaid-refactored-1/" target="_blank" rel="external">REFACTORING PLAID APP - A REACTIVE MVP APPROACH (PART 1)</a></li>
<li>原文作者 : <a href="http://hannesdorfmann.com/" target="_blank" rel="external">HANNES DORFMANN</a></li>
<li>译文出自 : <a href="http://hanks.xyz/2015/12/08/refactoring-plaid-1/">hanks.xyz</a></li>
<li>译者 : <a href="https://github.com/hanks-zyh" target="_blank" rel="external">hanks-zyh</a></li>
<li>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a></li>
<li>状态 :  完成</li>
</ul>
</blockquote>
<h2 id="初见">初见</h2><p>整体的用户体验和用户交互都非常赞.看下面这条tweet:<br> <img src="https://dn-coding-net-production-pp.qbox.me/754a0ecf-5545-4c24-9d4a-3f16bf89ed8e.png" alt="图片"></p>
<p>使用这个app真是在享受. 它的 UI / UX 对每个开发者或者设计师很激励, 然而,在使用过程中我遇到了一些bug:</p>
<ul>
<li><p>同时显示了加载提示和错误提示:</p>
<iframe width="880" height="660" src="https://www.youtube.com/embed/zCwESjEpNdk" frameborder="0" allowfullscreen></iframe>
</li>
<li><p>在筛选面板中你可以从 Dribbble, Designer News 和 Product Hunt 选择你想要显示的来源.但是当取消选择正在加载数据的”源”的时候,你会遇到item还在显示的问题:</p>
<iframe width="880" height="660" src="https://www.youtube.com/embed/nJ3VUjpW0N0" frameborder="0" allowfullscreen></iframe>
</li>
<li><p>而且app没有考虑屏幕旋转.当屏幕旋转界面会被重新创建,重新执行http请求,你可以看到加载提示</p>
<iframe width="880" height="660" src="https://www.youtube.com/embed/tuIDrtvL0lg" frameborder="0" allowfullscreen></iframe>

</li>
</ul>
<p>通常这样的“问题”是由于<strong>面条式代码</strong> 和架构不够好。所以我们来看看显示项目列表的源代码: 在 <code>HomeActivity</code> (大约750行代码)处理UI元素的可见性,如 <code>RecylcerView</code> 或 <code>ProgressBar</code>. <code>HomeActivity</code> 包含了何时显示Source-Filters-Drawer(右边侧滑栏)的逻辑。此外,它的 <code>onactivityresult()</code>方法里面  做了很多事情,包括发布新的post到designers news。而且它使用 <code>DataManager</code>为选定的 filter 加载数据。你看, <code>HomeActivity</code> 有很多责任,可能太多了。<code>DataManager</code> 基本上使用 <code>retrofit</code> 和 <code>asynctask</code> 来执行http请求加载数据。这里的最头疼的问题是分页,尤其是RecyclerView滑动到底部时需要加载更多数据。<code>DataManager</code> 内部使用<code>HashMap</code>来记录每个源显示的页面数据(后端的endpoint 如 “Dribbble Popular” , “Dribbble Recent” 或者 “Designer News Popular”)。项目中使用<code>FeedAdapter</code>来显示到 RecyclerView上。 并且<code>SearchActivity</code>跟<code>HomeActivity</code>非常相似:它也使用<code>DataManager</code>和<code>FeedAdapter</code>。</p>
<h2 id="架构">架构</h2><p>我觉得当前的项目架构不够清晰。<code>HomeActivity</code>管理了太多事情,简直就是神一样的存在。另一个“问题”是,<code>HomeActivity</code>从不同的方法和不同的事件中调用相同的(内部)方法去改变UI状态,如 <code>checkEmptyState()</code> 在<code>HomeActivity</code>的4个不同的地方被调用.</p>
<p>我们将使用 <code>Model-View-Presenter</code> 来重构一下.  passive view 仅仅用来展示, <code>presenter</code> 告诉 <code>passive view</code> 什么时候展示. 我比较热衷于MVP架构. 经常有人问我为什么我建议使用 passive view,而不是控制器或MVP派生的其他模式。好吧,如果你使用没有 passive view的MVP,你基本上是把<strong>面条式代码</strong>写成了一半的 presenter 一半的 passive view。</p>
<h2 id="HomeActivity_in_MVP">HomeActivity in MVP</h2><p>我们使用 <code>MVP +  passive view</code> 分出两个类: <code>HomeActivity</code> 和 <code>HomeView</code>,  <code>HomeActivity</code>作为View (passive view ) 实现了<code>HomeView</code>接口:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface HomeView : MvpView &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showLoading</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showContent</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showError</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showLoadingMore</span><span class="params">(showing: <span class="typename">Boolean</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showLoadingMoreError</span><span class="params">(t: <span class="typename">Throwable</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addOlderItems</span><span class="params">(items: <span class="typename">List&lt;PlaidItem&gt;</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在 <code>HomeActivity</code> 负责管理UI(是否可见,位置,动画),但是由 <code>presenter</code> 决定什么时候去执行, 所以View的状态由<code>HomePresenter</code> 管理, <code>HomePresenter</code> 的代码如下:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePresenter</span></span>(<span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> itemsLoader</span>: ItemsLoader<span class="type">&lt;List&lt;PlaidItem&gt;</span>&gt;) : RxPresenter<span class="type">&lt;HomeView, List&lt;PlaidItem&gt;</span>&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadItems</span><span class="params">()</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        view?.showLoading()</span><br><span class="line">        subscribe(</span><br><span class="line">                itemsLoader.firstPage(),</span><br><span class="line">                &#123; <span class="comment">// onError</span></span><br><span class="line">                    view?.showError()</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123; <span class="comment">// onNext</span></span><br><span class="line">                    view?.addOlderItems(it)</span><br><span class="line">                    view?.showContent()</span><br><span class="line">                &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadMore</span><span class="params">()</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        view?.showLoadingMore(<span class="literal">true</span>)</span><br><span class="line">        subscribe(</span><br><span class="line">                itemsLoader.olderPages(),</span><br><span class="line">                &#123; <span class="comment">// onError</span></span><br><span class="line">                    view?.showLoadingMoreError(it)</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123; <span class="comment">// onNext</span></span><br><span class="line">                    view.addOlderItems(it)</span><br><span class="line">                    view.showLoadingMore(<span class="literal">false</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可能你注意到了,我使用的是kotlin语言,主要是因为我喜欢这个语言并且有幸看到kotlin的发展,由于kotlin的互操作性(与java相互调用)使得我很容易的重用 Nick Butcher的 java 代码(主要是UI 或者View 方面的东西).</p>
<p>为了实现 MVP, 我们使用了 <strong>Mosby</strong> 库,这是一个MVP 库,当旋转屏幕的时候允许我们保持 presenters, 这样就不会在旋转屏幕时重新启动界面,加载提示,进行请求了, <strong>Mosby</strong> 也可以在旋转屏幕的时候保持view的状态.</p>
<p>此外我决定在Model层使用  <code>RxJava</code> (这样在 presenters中可以使用 <code>subscribe()</code> 方法). <code>ItemsLoader</code>类 是我重构的 reactive版本的 DataManager. 我来花一分钟解释一下.</p>
<h2 id="SearchActivity_in_MVP">SearchActivity in MVP</h2><p>就像前面所说的, <code>SearchActivity</code> 和 <code>HomeActivity</code> 很像, 它展示了一个列表(grid),并且会在  <code>RecyclerView</code>滑动到底部的时候加载更多items, 所以 <code>SearchActivity</code> 应用MVP跟前面一样:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface SearchView extends MvpView &#123;</span><br><span class="line">  void showLoading();</span><br><span class="line">  void showContent();</span><br><span class="line">  void showError(Throwable t);</span><br><span class="line">  void showLoadingMore(boolean showing);</span><br><span class="line">  void showLoadingMoreError(Throwable t);</span><br><span class="line">  void addOlderItems(List<span class="type">&lt;PlaidItem&gt;</span> items);</span><br><span class="line">  void showSearchNotStarted();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchPresenter</span></span>(<span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> itemsLoaderFactory</span>: SearchItemsLoaderFactory) : RxPresenter<span class="type">&lt;SearchView, List&lt;PlaidItem&gt;</span>&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable"><span class="keyword">var</span> itemsLoader</span>: ItemsLoader<span class="type">&lt;List&lt;PlaidItem&gt;</span>&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">search</span><span class="params">(query: <span class="typename">String</span>)</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create items loader for the given query string</span></span><br><span class="line">        itemsLoader = itemsLoaderFactory.create(query)</span><br><span class="line"></span><br><span class="line">        view?.showLoading()</span><br><span class="line"></span><br><span class="line">        subscribe(itemsLoader!!.firstPage(), &#123; <span class="comment">// Error handling</span></span><br><span class="line">            view?.showError(it)</span><br><span class="line">        &#125;, &#123; <span class="comment">// onNext</span></span><br><span class="line">            view?.addOlderItems(it)</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            view?.showContent()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">searchMore</span><span class="params">(query: <span class="typename">String</span>)</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        view?.showLoadingMore(<span class="literal">true</span>)</span><br><span class="line">        subscribe(itemsLoader!!.olderPages(), &#123; <span class="comment">// Error handling</span></span><br><span class="line">            view?.showLoadingMore(<span class="literal">false</span>)</span><br><span class="line">            view?.showLoadingMoreError(it)</span><br><span class="line">        &#125;, &#123; <span class="comment">// onNext</span></span><br><span class="line">            view?.addOlderItems(it)</span><br><span class="line">        &#125;, &#123; <span class="comment">// onComplete</span></span><br><span class="line">            view?.showLoadingMore(<span class="literal">false</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clearSearch</span><span class="params">()</span> &#123;</span></span><br><span class="line">        <span class="comment">// Unsubscribe any previous search subscriptions</span></span><br><span class="line">        unsubscribe()</span><br><span class="line"></span><br><span class="line">        view.showSearchNotStarted()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟 <code>HomePresenter</code> 唯一不同的是,  <code>SearchPresenter</code> 通过传入一个<code>SearchItemsLoaderFactory</code> 作为构造方法的参数,为每次搜索查询创建了一个 <code>ItemsLoader</code>. 我们来简单看一下它是怎么工作的.</p>
<h2 id="ItemsLoader_和_Pagination">ItemsLoader 和 Pagination</h2><p>目前我们完成了 <code>View</code> 和 <code>Presenter</code>, 现在讨论一下如何重构 “Model”</p>
<p>在我们开始之前: 了解一下 <code>PlaidItem</code>类 ( 包含title和 image url). 这个类是单个item的基类<br><code>Shot</code> extends <code>PlaidItem</code> :代表从Dribbble加载的item<br><code>Story</code> extends <code>PlaidItem</code>: 代表从Designer News加载的item<br><code>Post</code> extends <code>PlaidItem</code>: 代表从 Product Hunt 加载的item<br>现在我们讨论一下使用<code>RxJava</code> 来高效的重写一下 <code>DataManager</code>, 我使用RxJava是因为它简直酷毙了, 你将会体会到它的强大(特别是这个系列的第二篇)并且从中受益.</p>
<p>加载项的困难的部分是,我们从不同的后端支持分页和加载items。我们“自下而上”构建 <code>ItemsLoader</code> 。“底部”有一个执行 http 的 Retrofit 接口。现在你可以搜索Dribbble和DesignerNews。分页的问题: Dribbble 调用 loadItems(0,100) 来加载100个items, 调用loadItems(100、200)加载下一个页面的100个, 而DesignerNews是每次page加1,通过调用 loadItems(0,1)来加载第一个页面, 调用loadItems(1,2)加载下一个页面。我们需要一个通用的API。我们可以使用kotlin的高级函数(传递函数参数或者匿名函数)。所以我们需要的是一个组件,这个组件包含一个可以执行http请求并返回一个Observable的方法。所以我们需要这样的:  <code>backendMethodToCall:(Int,Int)-&gt; Observable&lt;T&gt;</code>, 第一个参数代表page,第二个代表limit(每页加载多少条), T 泛型代表返回结果的类型(事实上类型总是&lt; PlaidItem&gt;)。<br> 我们把这个组件叫做 <code>RouteCaller</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteCaller</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> startPage</span>: <span class="typename">Int</span> = <span class="number">0</span>,</span><br><span class="line">                     <span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> itemsPerPage</span>: <span class="typename">Int</span>,</span><br><span class="line">                     <span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> backendMethodToCall</span>: (<span class="typename">Int</span>, <span class="typename">Int</span>) -&gt; Observable<span class="type">&lt;T&gt;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Offset for loading more</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> olderPageOffset</span> = AtomicInteger(startPage)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A queue that is used to retry "older"</span><br><span class="line">     * pages if they have failed before continue with even more older</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> olderFailedButRetryLater</span>: Queue<span class="type">&lt;Int&gt;</span> = LinkedBlockingQueue<span class="type">&lt;Int&gt;</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Get an observable to load older data from backend.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getOlderWithRetry</span><span class="params">()</span>: Observable<span class="type">&lt;T&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable"><span class="keyword">val</span> pageOffset</span> = <span class="keyword">if</span> (</span><br><span class="line">        olderFailedButRetryLater.isEmpty()) &#123;</span><br><span class="line">            olderPageOffset.addAndGet(itemsPerPage)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            olderFailedButRetryLater.poll()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backendMethodToCall(pageOffset, itemsPerPage)</span><br><span class="line">                .doOnError &#123;</span><br><span class="line">                    olderFailedButRetryLater.add(pageOffset)</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Get an observable to load the newest data from backend.</span><br><span class="line">     * This method should be invoked on pull to refresh</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getFirst</span><span class="params">()</span>: Observable<span class="type">&lt;T&gt;</span> &#123;</span></span><br><span class="line">        <span class="keyword">return</span> backendMethodToCall(startPage, itemsPerPage)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>RouteCaller</code> 接受一个<code>method(Int, Int) -&gt; Observable&lt;T&gt;</code> 作为构造函数的参数, 根据传入不同的参数执行不同的动作:</p>
<ul>
<li>getFirst() 加载第一页</li>
<li>getOlderWithRetry(): 加载老的数据.<br>我们使用 <code>olderFailedButRetryLater</code> 字段来记录当前页码, 当执行加载更多的时候加1, 此外当加载下一页数据失败后,我们在 <code>.doOnError()</code> 方法中进行重试<br>所以 <code>RouteCaller</code>的职责就是传输参数,执行实际的后端请求,于是有下面的结构:</li>
</ul>
<p><img src="http://hannesdorfmann.com/images/plaid/routing1.png" alt="RouteCaller"></p>
<p>我们有两个接口 <code>DesignerNewsService</code> 和 <code>DribbleService</code> 去执行搜索, 这意味着我们需要两个 <code>RouteCaller</code>:</p>
<p><img src="http://hannesdorfmann.com/images/plaid/routing1.png" alt="RouteCaller"></p>
<p>下一个问题是:如何实例化一个 <code>RouteCalls</code>? 我们为每一个后端服务各定义一个 <code>RouteCallerFactory</code>,<br>它提供一个方法 <code>getAllBackendCallers()</code> 来得到一个 Observable的 <code>List&lt;RouteCaller&gt;</code>.</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">interface RouteCallerFactory<span class="type">&lt;T&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Get all available backend route callers</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllBackendCallers</span><span class="params">()</span>: Observable<span class="type">&lt;List&lt;RouteCaller&lt;T&gt;</span>&gt;&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DesignerNewsSearchCallerFactory</span></span>(<span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> searchQuery</span>: String, <span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> backend</span>: DesignerNewsService) : RouteCallerFactory<span class="type">&lt;List&lt;PlaidItem&gt;</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable"><span class="keyword">val</span> extractPlaidItemsFromStory</span> = <span class="function"><span class="title">fun</span><span class="params">(story: <span class="typename">StoriesResponse</span>)</span>: List<span class="type">&lt;PlaidItem&gt;</span> &#123;</span></span><br><span class="line">        <span class="keyword">return</span> story.stories</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The method to execute from RouteCaller</span></span><br><span class="line">    <span class="variable"><span class="keyword">val</span> searchCall</span> = <span class="function"><span class="title">fun</span><span class="params">(pageOffset: <span class="typename">Int, itemsPerPage: Int</span>)</span>: Observable<span class="type">&lt;List&lt;PlaidItem&gt;</span>&gt; &#123;</span></span><br><span class="line">        <span class="keyword">return</span> backend.search(searchQuery, pageOffset).map(extractPlaidItemsFromStory)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a list with one single RouteCaller() with "searchCall" as method reference</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> callers</span> = arrayListOf(RouteCaller(<span class="number">0</span>, <span class="number">100</span>, searchCall))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAllBackendCallers</span><span class="params">()</span>: Observable<span class="type">&lt;List&lt;RouteCaller&lt;List&lt;PlaidItem&gt;</span>&gt;&gt;&gt; &#123;</span></span><br><span class="line">        <span class="keyword">return</span> Observable.just(callers)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你是初学kotlin,乍一看 <code>DesignerNewsSearchCallerFactory</code> 有点奇怪,我们没有使用Lambda而是创建一个searchCall属性,它实际上是一个函数 <code>(Int, Int) -&gt; Observable&lt;List&lt;PlaidItem&gt;&gt;</code>。</p>
<p>这样做是有原因的: 最近我看到Android团队在<code>Android2015开发者峰会</code>被问到何时添加Java 8支持。<strong>Reto Meier</strong> 回答说,许多开发人员主要是对Lambda 感兴趣, 当他问观众:想要Android加入Lambda 的请举手,然后几乎所有人举手了。我认为,对于Lambda 有一种普遍的误解: Lambda如此强大是因为它的高阶函数和函数传递。Lambda 只不过是一个是匿名函数。实际上,Lambda并不能测试,它们是硬编码的。例如,我还会实现这样的:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RouteCaller<span class="list">(<span class="number">0</span>, <span class="number">100</span>, &#123; pageOffset, limit -&gt; backend.search<span class="list">(<span class="keyword">searchQuery</span>, pageOffset)</span> &#125;)</span></span><br></pre></td></tr></table></figure>
<p>Next we introduce a Router which is responsible to combine all RouteCaller from different RouteCallerFactories to one single Observable list:</p>
<p>我们应该怎么写单元测试呢? 不可能给匿名函数写单元测试,因为它们是”硬编码的”,  然而,如果我们传递一个函数作为参数,那么很容易为这个函数写一个单元测试. 在Java8中,传递一个函数参数这样写 <code>::searchCall</code>. 不幸的是, kotlin还不支持,目前仅仅支持静态方法,因此这里定义一个函数作为属性. 在这个系列文章的最后我会介绍一下我使用kotlin的体会.</p>
<p>好了,看一下”搜索”的结构</p>
<p><img src="http://hannesdorfmann.com/images/plaid/routing3.png" alt="RouteCallerFactory"></p>
<p>注意,<code>getAllBackendCallers()</code> 返回一个列表,其中包含一个RouteCaller,但这个想法是 RouteCallerFactory创建所有RouteCallers。稍后我们将看到,在Dribbble上RouteCallers HomeDribbbleCallerFactory返回一个RouteCaller的列表,代表每个端点加载item,如受欢迎的项目,最近的,动画等.</p>
<p><img src="http://hannesdorfmann.com/images/plaid/routing4.png" alt="RouteCallerFactory"></p>
<p>下面我们介绍<code>Router</code>, 它负责组合所有的 RouteCaller, 将不同的 RouteCallerFactories 返回一个单个的 Observable的list:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">private</span> <span class="variable"><span class="keyword">val</span> routeFactories</span>: List<span class="type">&lt;RouteCallerFactory&lt;T&gt;</span>&gt;) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllRoutes</span><span class="params">()</span>: Observable<span class="type">&lt;List&lt;RouteCaller&lt;T&gt;</span>&gt;&gt; &#123;</span></span><br><span class="line">        <span class="variable"><span class="keyword">val</span> callers</span> = ArrayList<span class="type">&lt;Observable&lt;List&lt;RouteCaller&lt;T&gt;</span>&gt;&gt;&gt;()</span><br><span class="line"></span><br><span class="line">        routeFactories.forEach &#123;</span><br><span class="line">            callers.add(it.getAllBackendCallers())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Observable.combineLatest(callers, &#123; calls -&gt;</span><br><span class="line">            <span class="variable"><span class="keyword">val</span> items</span> = ArrayList<span class="type">&lt;RouteCaller&lt;T&gt;</span>&gt;(calls.size)</span><br><span class="line">            calls.forEach &#123;</span><br><span class="line">                items.addAll(it <span class="keyword">as</span> List<span class="type">&lt;RouteCaller&lt;T&gt;</span>&gt;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            items <span class="comment">// return items</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如你所见 <code>Route</code> 接收一个<code>RouteCallerFactory</code>列表,换句话说:通过构造函数可以配置Route。下面来完成“路由图”:</p>
<p><img src="http://hannesdorfmann.com/images/plaid/routing5.png" alt=""></p>
<p>好了,到目前为止,我们重构了“routing 部分”。最后<code>Router</code>提供了一个 <code>Observable&lt;List&lt;RouteCaller&lt;T&gt;&gt;&gt;</code> 。那么什么时候在RecyclerView中显示item呢?这就是<code>ItemsLoader</code>的职责了。正如它的名字,该组件用来加载item:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemsLoader</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">protected</span> <span class="variable"><span class="keyword">val</span> router</span>: Router<span class="type">&lt;T&gt;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">firstPage</span><span class="params">()</span>: Observable<span class="type">&lt;T&gt;</span> &#123;</span></span><br><span class="line">        <span class="keyword">return</span> FirstPage<span class="type">&lt;T&gt;</span>(router.getAllRoutes()).asObservable()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">olderPages</span><span class="params">()</span>: Observable<span class="type">&lt;T&gt;</span> &#123;</span></span><br><span class="line">        <span class="keyword">return</span> OlderPage<span class="type">&lt;T&gt;</span>(router.getAllRoutes()).asObservable()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ItemsLoader</code> 接受一个 <code>Router</code> 作为构造函数的参数, 此外接受两个方法, firstPage()返回一个代表first page的 <code>Observable</code>, olderPages()返回一个代表older pager的 <code>Observable</code>.一个page代表RecyclerView显示的一页items,当我们滑动到底部的时候加载下一页数据.<br>看一下 <code>Page</code>, <code>FirstPage</code> 和 <code>OlderPage</code> 的代码:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="type">T</span>&gt;</span>(<span class="variable"><span class="keyword">val</span> routeCalls</span>: Observable<span class="type">&lt;List&lt;RouteCaller&lt;T&gt;</span>&gt;&gt;) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable"><span class="keyword">var</span> failed</span> = AtomicInteger()</span><br><span class="line">    <span class="keyword">private</span> <span class="variable"><span class="keyword">var</span> backendCallsCount</span>: <span class="typename">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Return an observable for this page</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">asObservable</span><span class="params">()</span>: Observable<span class="type">&lt;T?&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routeCalls.flatMap &#123; routeCalls -&gt;</span><br><span class="line"></span><br><span class="line">            backendCallsCount = routeCalls.size</span><br><span class="line">            <span class="variable"><span class="keyword">val</span> observables</span> = arrayListOf<span class="type">&lt;Observable&lt;T&gt;</span>&gt;()</span><br><span class="line">            routeCalls.forEach &#123; call -&gt;</span><br><span class="line">                    <span class="variable"><span class="keyword">val</span> observable</span> = getRouteCall(call).onErrorResumeNext &#123; error -&gt;</span><br><span class="line">                      <span class="comment">// Suppress errors as long as not all fail</span></span><br><span class="line">                        error.printStackTrace()</span><br><span class="line">                        <span class="variable"><span class="keyword">val</span> fails</span> = failed.incrementAndGet()</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (fails == backendCallsCount) &#123;</span><br><span class="line">                            Observable.error(error) <span class="comment">// All failed so emmit error</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Observable.empty() <span class="comment">// Not all failed, so ignore this error and emit nothing</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    observables.add(observable);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// return the created Observable</span></span><br><span class="line">                Observable.merge(observables)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> abstract <span class="function"><span class="keyword">fun</span> <span class="title">getRouteCall</span><span class="params">(caller: <span class="typename">RouteCaller&lt;T&gt;</span>)</span>: Observable<span class="type">&lt;T&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPage</span>&lt;<span class="type">T</span>&gt;</span>(routeCalls: Observable<span class="type">&lt;List&lt;RouteCaller&lt;T&gt;</span>&gt;&gt;) : Page<span class="type">&lt;T&gt;</span>(routeCalls) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getRouteCall</span><span class="params">(caller: <span class="typename">RouteCaller&lt;T&gt;</span>)</span>: Observable<span class="type">&lt;T&gt;</span> &#123;</span></span><br><span class="line">        <span class="keyword">return</span> caller.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OlderPage</span>&lt;<span class="type">T</span>&gt;</span>(routeCalls: Observable<span class="type">&lt;List&lt;RouteCaller&lt;T&gt;</span>&gt;&gt;) : Page<span class="type">&lt;T&gt;</span>(routeCalls) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getRouteCall</span><span class="params">(caller: <span class="typename">RouteCaller&lt;T&gt;</span>)</span>: Observable<span class="type">&lt;T&gt;</span> &#123;</span></span><br><span class="line">        <span class="keyword">return</span> caller.getOlderWithRetry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Page</code>类负责调用<code>RouteCaller</code>的方法来执行http请求,我们不希望因为某个后端的调用失败导致整个页面数据获取失败,因此我们使用 <code>onErrorResumeNext()</code> 来拦截错误,然后返回一个http请求调用失败的 error.然后 <code>Presenter</code>通过<code>ItemsLoader</code> 订阅页面的 <code>observable</code>.</p>
<h2 id="依赖注入">依赖注入</h2><p>你可能注意到了,到目前为止几乎所有的组件都拥有一个接受其他组件作为参数的构造方法. 这是设计好的,现在我们使用 <code>Dagger</code>(我使用的 <code>Dagger1</code>) 来组合我们需要的元素:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Module</span>(</span><br><span class="line">    injects = &#123;</span><br><span class="line">        HomePresenter.<span class="keyword">class</span></span><br><span class="line">    &#125;,</span><br><span class="line">    addsTo = ApplicationModule.<span class="keyword">class</span> <span class="comment">// contains Retrofit interfaces</span></span><br><span class="line">)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HomeModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Provides</span> <span class="annotation">@Singleton</span> HomePresenter provideSearchPresenter(SourceDao sourceDao,</span><br><span class="line">      DribbbleService dribbbleBackend,</span><br><span class="line">      DesignerNewsService designerNewsBackend,</span><br><span class="line">      ProductHuntService productHuntBackend ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the router</span></span><br><span class="line">    <span class="built_in">List</span>&lt;RouteCallerFactory&lt;<span class="built_in">List</span>&lt;? <span class="keyword">extends</span> PlaidItem&gt;&gt;&gt; routeCallerFactories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    routeCallerFactories.add(<span class="keyword">new</span> HomeDribbbleCallerFactory(dribbbleBackend, sourceDao));</span><br><span class="line">    routeCallerFactories.add(<span class="keyword">new</span> HomeDesingerNewsCallerFactory(designerNewsBackend, sourceDao));</span><br><span class="line">    routeCallerFactories.add(<span class="keyword">new</span> HomeProductHuntCallerFactory(productHuntBackend, sourceDao));</span><br><span class="line"></span><br><span class="line">    Router&lt;<span class="built_in">List</span>&lt;? <span class="keyword">extends</span> PlaidItem&gt;&gt; router = <span class="keyword">new</span> Router&lt;&gt;(routeCallerFactories);</span><br><span class="line"></span><br><span class="line">    ItemsLoader&lt;<span class="built_in">List</span>&lt;? <span class="keyword">extends</span> PlaidItem&gt;&gt; itemsLoader = <span class="keyword">new</span> ItemsLoader&lt;&gt;(router);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HomePresenterImpl(itemsLoader);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>正如你所见, 我们可以使用 <code>Dagger</code>来配置 <code>Router</code> 和 <code>ItemsLoader</code>. 我们给 <code>SearchModule</code>的<code>SearchPresenter</code>  配置一个 <code>ItemsLoader</code>和<code>Router</code>. 优势就是,如果有一天我们想要添加另一个“源”,如reddit,我们唯一要做的就是定义一个<code>RedditService</code>(Retrofit), <code>RedditCallerFactoy</code>并在<code>Router</code>中添加这个<code>CallerFactory</code>。我们可以在一个具体的 dagger module中,而不用修改其他类(开闭原则)。换句话说:我们已经通过依赖注入建立了一个可配置“插件系统”。<br>您可能已经注意到 <code>SourceDao</code> 类的代码。我们将在第二篇博客中讨论如何将响应式编程进行得更彻底。</p>
<h2 id="第一部分总结">第一部分总结</h2><p>这是这个系列博客的第一篇.这篇文章中我们使用了MVP模式,并且重构了一下从后端加载数据的方法. 主要任务就是将大的复杂的任务拆分成小的可重用的组件,如 <code>ItemsLoader</code>, <code>Page</code>, <code>Router</code> 和 <code>RouteCaller</code> ,更加遵循 SOLID (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion) ,如 DataManager 的实现.</p>
<p>总之,有更好的方法去实现这样一个app. 特别是 <code>ItemsLoader</code> 可以以完全不同的方式实现,我首先想到的是使用<code>RxJava</code>的 <code>SwitchOnNext()</code>或者 <code>merge</code>操作符去创建一个Observable去加载下一页数据. 但是,关于UI和错误处理,如果我可以单一观测分割成两个可见(first Page,older Page )会更容易实现</p>
<p>总之,欢迎提建议或反馈!<br>在第二部分, 我将使用<code>RxJava</code> 去重构Plaid 来实现一个 “真正意义上的响应式”的app.</p>
<blockquote>
<p>文章出处<a href="http://hanks.xyz">Hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Nick Butcher 在 <a href="https://github.com/nickbutcher/plaid">github</a> 上开源了Plaid。这个app不仅很酷,还拥有极致的 UI / UX。如此炫酷的app的代码对开发者来说copy下来阅读一下可谓是最佳实践。于是我也copy下来,决定深入Plaid的代码。和往常一样，你会发现里面的一些代码可以用其他的方式实现。因此不只是谈论代码,我决定花一些时间来重构Plaid的部分源代码。我将写3篇文章来分享我关于如何重构Plaid的,这篇文章是第一部分。</p>
<p>前言: 开始我以为自己能重构整个app. 然而,事实是我太天真了,我低估了这个应用的复杂度和新特性的数量。在我花了几个小时阅读 Nick Butcher 的代码之后, 我发现有些功能仅仅通过使用应用程序很难发现。一句话: 我意识到我没有时间把所有的想法付诸行动。因此我的“重构”集中于应用程序的“主页”和“搜索屏幕”。本来想看看有没有更多模块可以重构，但是我没有太多空闲时间来做了。重构代码可以在<a href="https://github.com/sockeqwe/plaid">github上</a>找到</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="Refactoring" scheme="http://hanks.xyz/tags/Refactoring/"/>
    
      <category term="Rxjava" scheme="http://hanks.xyz/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rx中的线程切换]]></title>
    <link href="http://hanks.xyz/2015/12/06/rx_thread/"/>
    <id>http://hanks.xyz/2015/12/06/rx_thread/</id>
    <published>2015-12-06T15:26:00.000Z</published>
    <updated>2015-12-10T02:01:54.000Z</updated>
    <content type="html"><![CDATA[<p>初学者在使用<code>RxJava</code>的过程中，经常搞不清Observable的事件序列和每次操作应该怎样切换线程，切换哪个线程<br>首先需要搞懂在<code>RxJava</code> 中<code>.subscribeOn()</code> 和  <code>observeOn()</code> 之间的区别：</p>
<ul>
<li><code>.subscribeOn()</code> 用来指定<code>Observable</code>应该操作的调度器(<code>Scheduler</code>)</li>
<li><code>.observeOn()</code> 指定 <code>Observable</code>在一个指定的调度器(<code>Scheduler</code>)上给观察者发送通知</li>
<li>默认情况下， 事件序列操作的线程与调用<code>.subscribe()</code>的线程一致</li>
</ul>
<p>没理解？<br><a id="more"></a></p>
<blockquote>
<p>英文原文: <a href="https://medium.com/@diolor/observe-in-the-correct-thread-1939bb9bb9d2#.nn1m7lrb8" target="_blank" rel="external">https://medium.com/@diolor/observe-in-the-correct-thread-1939bb9bb9d2#.nn1m7lrb8</a><br><br>翻译: <a href="https://github.com/hanks-zyh" target="_blank" rel="external">hanks</a><br>注: 不是完全翻译,添加了具体例子</p>
</blockquote>
<h2 id="例子">例子</h2><h3 id="1-主线程_/_-subscribe()_线程">1.主线程 /  .subscribe() 线程</h3><p>在 Activity的 <code>onCreate()</code>(主线程) 方法中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  .subscribe();</span><br></pre></td></tr></table></figure>
<p>调用情况如下：</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/37e26756-da0d-46bb-bb2f-9b77ff067957.png" alt="图片"></p>
<p><strong>实验:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">            .doOnNext(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                    Log.i(<span class="string">"RxThread"</span>, <span class="string">"doOnNext:"</span> + integer +<span class="string">", run In :"</span> + Thread.currentThread().getName() );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                    Log.i(<span class="string">"RxThread"</span>, <span class="string">"get result:"</span> + integer +<span class="string">", run In :"</span> + Thread.currentThread().getName() );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>输出结果:</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">39.225</span> <span class="number">15603</span>-<span class="number">15603</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">1</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">39.225</span> <span class="number">15603</span>-<span class="number">15603</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">1</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">39.225</span> <span class="number">15603</span>-<span class="number">15603</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">2</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">39.225</span> <span class="number">15603</span>-<span class="number">15603</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">2</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">39.225</span> <span class="number">15603</span>-<span class="number">15603</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">3</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">39.225</span> <span class="number">15603</span>-<span class="number">15603</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">3</span>, run In :main</span><br></pre></td></tr></table></figure>
<h3 id="2-_-subscribeOn()">2. .subscribeOn()</h3><p>即使你在主线程中添加下面的代码，但是整段代码将运行在 <code>.subscribeOn()</code>定义的线程上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  .subscribeOn(Schedulers.newThread())</span><br><span class="line">  .subscribe();</span><br></pre></td></tr></table></figure>
<p><img src="https://dn-coding-net-production-pp.qbox.me/5004ed8c-6b4d-42fc-93d8-ed22c4af79d3.png" alt="图片"></p>
<p><strong>实验:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">           .doOnNext(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"doOnNext:"</span> + integer +<span class="string">", run In :"</span> + Thread.currentThread().getName() );</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">           .subscribeOn(Schedulers.newThread())</span><br><span class="line">           .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"get result:"</span> + integer +<span class="string">", run In :"</span> + Thread.currentThread().getName() );</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>输出结果:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">17.717</span> <span class="number">14294</span>-<span class="number">14319</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">1</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">17.717</span> <span class="number">14294</span>-<span class="number">14319</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">1</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">17.717</span> <span class="number">14294</span>-<span class="number">14319</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">2</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">17.717</span> <span class="number">14294</span>-<span class="number">14319</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">2</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">17.717</span> <span class="number">14294</span>-<span class="number">14319</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">3</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">17.717</span> <span class="number">14294</span>-<span class="number">14319</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">3</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="3-_-observeOn()">3. .observeOn()</h3><p>加入在主线程中添加下面的代码，首先 <code>Observable</code> 将在 <code>.subscribe()</code> 的线程上创建，但是 <code>.observeOn()</code>方法被调用之后，代码将运行在指定的线程上：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">Observable</span><span class="class">.just</span>(1,2,3)</span><br><span class="line">  <span class="class">.observeOn</span>(<span class="tag">Schedulers</span><span class="class">.newThread</span>())</span><br><span class="line">  <span class="class">.subscribe</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://dn-coding-net-production-pp.qbox.me/97cc479d-fd85-4825-bdfa-b3b3b742a829.png" alt="图片"></p>
<p><strong>实验:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">           <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).doOnNext(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">                   <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                       Log.i(<span class="string">"RxThread"</span>, <span class="string">"doOnNext:"</span> + integer + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                               .getName());</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">               .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">                   <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                       Log.i(<span class="string">"RxThread"</span>, <span class="string">"get result:"</span> + integer + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                               .getName());</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.start();</span><br></pre></td></tr></table></figure></p>
<p><strong>输出结果:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">06.493</span> <span class="number">18584</span>-<span class="number">18606</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">1</span>, run In :Thread-<span class="number">155</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">06.493</span> <span class="number">18584</span>-<span class="number">18606</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">2</span>, run In :Thread-<span class="number">155</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">06.493</span> <span class="number">18584</span>-<span class="number">18606</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">3</span>, run In :Thread-<span class="number">155</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">06.521</span> <span class="number">18584</span>-<span class="number">18584</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">1</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">06.521</span> <span class="number">18584</span>-<span class="number">18584</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">2</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">06.521</span> <span class="number">18584</span>-<span class="number">18584</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">3</span>, run In :main</span><br></pre></td></tr></table></figure>
<h3 id="3-_Combined_logic">3. Combined logic</h3><p>由于操作可以被组合使用,于是有了下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  .subscribeOn(Schedulers.newThread())</span><br><span class="line">  .observeOn(Schedulers.newThread())</span><br><span class="line">  .subscribe();</span><br></pre></td></tr></table></figure>
<p><img src="https://dn-coding-net-production-pp.qbox.me/5abaaea0-babd-490c-abcb-6d404d3aa285.png" alt="图片"></p>
<p><strong>实验:</strong></p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">new</span> <span class="keyword">Thread</span>() &#123;</span><br><span class="line">     @Override <span class="keyword">public</span> <span class="literal">void</span> run() &#123;</span><br><span class="line">         Observable<span class="built_in">.</span>just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="built_in">.</span>doOnNext(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</span><br><span class="line">             @Override <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">                 <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="string">"RxThread"</span>, <span class="string">"doOnNext:"</span> + <span class="built_in">integer</span> + <span class="string">", run In :"</span> + <span class="keyword">Thread</span><span class="built_in">.</span>currentThread()</span><br><span class="line">                         <span class="built_in">.</span>getName());</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">         <span class="built_in">.</span>subscribeOn(Schedulers<span class="built_in">.</span>newThread())</span><br><span class="line">         <span class="built_in">.</span>observeOn(AndroidSchedulers<span class="built_in">.</span>mainThread())</span><br><span class="line">         <span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</span><br><span class="line">             @Override <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">                 <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="string">"RxThread"</span>, <span class="string">"get result:"</span> + <span class="built_in">integer</span> + <span class="string">", run In :"</span> + <span class="keyword">Thread</span><span class="built_in">.</span>currentThread()</span><br><span class="line">                         <span class="built_in">.</span>getName());</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;<span class="built_in">.</span>start();</span><br></pre></td></tr></table></figure>
<p><strong>输出结果:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">53.066</span> <span class="number">20247</span>-<span class="number">20274</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">1</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">53.066</span> <span class="number">20247</span>-<span class="number">20274</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">2</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">53.066</span> <span class="number">20247</span>-<span class="number">20274</span>/com.hanks.rxsearch I/RxThread: doOnNext:<span class="number">3</span>, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">53.077</span> <span class="number">20247</span>-<span class="number">20247</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">1</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">53.077</span> <span class="number">20247</span>-<span class="number">20247</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">2</span>, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">53.077</span> <span class="number">20247</span>-<span class="number">20247</span>/com.hanks.rxsearch I/RxThread: get result:<span class="number">3</span>, run In :main</span><br></pre></td></tr></table></figure>
<h2 id="Tips_/_Gotchas:">Tips / Gotchas:</h2><h3 id="1-_“UI线程运行异常”">1. “UI线程运行异常”</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  .subscribeOn(Schedulers.newThread())</span><br><span class="line">  .subscribe(<span class="comment">/** logic which touches ui **/</span>/); <span class="comment">//在newThread中调用</span></span><br></pre></td></tr></table></figure>
<p>obviously.</p>
<h3 id="2-_逻辑处理放在后台(newThread)">2. 逻辑处理放在后台(newThread)</h3><p>错误姿势：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  .subscribeOn(Schedulers.newThread())</span><br><span class="line">  .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">  .flatMap(<span class="comment">/** logic which doesn't touch ui **/</span>/)</span><br><span class="line">  .subscribe();</span><br></pre></td></tr></table></figure>
<p><strong>实验:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">       <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Observable.just(<span class="string">"Android-Picasso"</span>, <span class="string">"Android-Glide"</span>, <span class="string">"Android-Fresco"</span>).doOnNext(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"doOnNext:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                           .getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">           .subscribeOn(Schedulers.newThread())</span><br><span class="line">           .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">           .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"flatMap:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread());</span><br><span class="line">                   <span class="keyword">return</span> Observable.from(str.split(<span class="string">"-"</span>) ); <span class="comment">// 返回平方</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">           .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"get result:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                           .getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;.start();</span><br></pre></td></tr></table></figure>
<p><strong>输出结果:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.181</span> <span class="number">8161</span>-<span class="number">8190</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Picasso, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.181</span> <span class="number">8161</span>-<span class="number">8190</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Glide, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.181</span> <span class="number">8161</span>-<span class="number">8190</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Fresco, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: flatMap:Android-Picasso, run In :Thread[main,<span class="number">5</span>,main]</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: get result:Android, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: get result:Picasso, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: flatMap:Android-Glide, run In :Thread[main,<span class="number">5</span>,main]</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: get result:Android, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: get result:Glide, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: flatMap:Android-Fresco, run In :Thread[main,<span class="number">5</span>,main]</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: get result:Android, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">00.243</span> <span class="number">8161</span>-<span class="number">8161</span>/com.hanks.rxsearch I/RxThread: get result:Fresco, run In :main</span><br></pre></td></tr></table></figure>
<p>正确姿势:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  .subscribeOn(Schedulers.newThread())</span><br><span class="line">  .flatMap(<span class="comment">/** logic which doesn't touch ui **/</span>/)</span><br><span class="line">  .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">  .subscribe();</span><br></pre></td></tr></table></figure>
<p>第二段代码中 <code>flatMap</code> (或者其他逻辑处理)将运行在后台线程， 如果是在Android中，这样做不会阻塞UI，阻塞UI的话有可能导致ANR之类的异常。这跟 <code>AsyncTask</code>中的 <code>doInBackground()</code>类似，在 <code>doInBackground()</code>中做耗时操作</p>
<p><strong>实验:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">       <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Observable.just(<span class="string">"Android-Picasso"</span>, <span class="string">"Android-Glide"</span>, <span class="string">"Android-Fresco"</span>).doOnNext(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"doOnNext:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                           .getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">           .subscribeOn(Schedulers.newThread())</span><br><span class="line">           .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"flatMap:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread());</span><br><span class="line">                   <span class="keyword">return</span> Observable.from(str.split(<span class="string">"-"</span>) ); <span class="comment">// 返回平方</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">           .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">           .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"get result:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                           .getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;.start();</span><br></pre></td></tr></table></figure>
<p><strong>输出结果:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.025</span> <span class="number">6812</span>-<span class="number">6839</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Picasso, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.025</span> <span class="number">6812</span>-<span class="number">6839</span>/com.hanks.rxsearch I/RxThread: flatMap:Android-Picasso, run In :Thread[RxNewThreadScheduler-<span class="number">1</span>,<span class="number">5</span>,main]</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.025</span> <span class="number">6812</span>-<span class="number">6839</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Glide, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.025</span> <span class="number">6812</span>-<span class="number">6839</span>/com.hanks.rxsearch I/RxThread: flatMap:Android-Glide, run In :Thread[RxNewThreadScheduler-<span class="number">1</span>,<span class="number">5</span>,main]</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.025</span> <span class="number">6812</span>-<span class="number">6839</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Fresco, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.025</span> <span class="number">6812</span>-<span class="number">6839</span>/com.hanks.rxsearch I/RxThread: flatMap:Android-Fresco, run In :Thread[RxNewThreadScheduler-<span class="number">1</span>,<span class="number">5</span>,main]</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.043</span> <span class="number">6812</span>-<span class="number">6812</span>/com.hanks.rxsearch I/RxThread: get result:Android, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.043</span> <span class="number">6812</span>-<span class="number">6812</span>/com.hanks.rxsearch I/RxThread: get result:Picasso, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.043</span> <span class="number">6812</span>-<span class="number">6812</span>/com.hanks.rxsearch I/RxThread: get result:Android, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.043</span> <span class="number">6812</span>-<span class="number">6812</span>/com.hanks.rxsearch I/RxThread: get result:Glide, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.043</span> <span class="number">6812</span>-<span class="number">6812</span>/com.hanks.rxsearch I/RxThread: get result:Android, run In :main</span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">41</span>:<span class="number">27.043</span> <span class="number">6812</span>-<span class="number">6812</span>/com.hanks.rxsearch I/RxThread: get result:Fresco, run In :main</span><br></pre></td></tr></table></figure>
<h3 id="3-_最早的_-subscribeOn()_生效">3. 最早的 <code>.subscribeOn()</code> 生效</h3><p>看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  .subscribeOn(thread1)</span><br><span class="line">  .subscribeOn(thread2)</span><br><span class="line">  .subscribe();</span><br></pre></td></tr></table></figure>
<p><code>Observable</code> 的创建和  <code>.subscribeOn()</code> 的调用都将在 thread1 上面执行，所以没有必要多次调用 <code>.subscribeOn()</code>,因为只有第一次的是有用的。</p>
<p><strong>实验:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">      <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Observable.just(<span class="string">"Android-Picasso"</span>, <span class="string">"Android-Glide"</span>, <span class="string">"Android-Fresco"</span>).doOnNext(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">              <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                  Log.i(<span class="string">"RxThread"</span>, <span class="string">"doOnNext:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                          .getName());</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .subscribeOn(Schedulers.newThread())</span><br><span class="line">          .subscribeOn(Schedulers.io())</span><br><span class="line">          .subscribeOn(Schedulers.computation())</span><br><span class="line">          .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">              <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                  Log.i(<span class="string">"RxThread"</span>, <span class="string">"get result:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                          .getName());</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;.start();</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">17.581</span> <span class="number">15622</span>-<span class="number">15652</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Picasso, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">17.581</span> <span class="number">15622</span>-<span class="number">15652</span>/com.hanks.rxsearch I/RxThread: get result:Android-Picasso, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">17.581</span> <span class="number">15622</span>-<span class="number">15652</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Glide, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">17.581</span> <span class="number">15622</span>-<span class="number">15652</span>/com.hanks.rxsearch I/RxThread: get result:Android-Glide, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">17.581</span> <span class="number">15622</span>-<span class="number">15652</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Fresco, run In :RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">17.581</span> <span class="number">15622</span>-<span class="number">15652</span>/com.hanks.rxsearch I/RxThread: get result:Android-Fresco, run In :RxNewThreadScheduler-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>实验</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">       <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Observable.just(<span class="string">"Android-Picasso"</span>, <span class="string">"Android-Glide"</span>, <span class="string">"Android-Fresco"</span>).doOnNext(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"doOnNext:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                           .getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">           .subscribeOn(Schedulers.io())</span><br><span class="line">           .subscribeOn(Schedulers.newThread())</span><br><span class="line">           .subscribeOn(Schedulers.computation())</span><br><span class="line">           .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">               <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                   Log.i(<span class="string">"RxThread"</span>, <span class="string">"get result:"</span> + str + <span class="string">", run In :"</span> + Thread.currentThread()</span><br><span class="line">                           .getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;.start();</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">52</span>:<span class="number">13.378</span> <span class="number">16424</span>-<span class="number">16454</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Picasso, run In :RxCachedThreadScheduler-<span class="number">2</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">52</span>:<span class="number">13.379</span> <span class="number">16424</span>-<span class="number">16454</span>/com.hanks.rxsearch I/RxThread: get result:Android-Picasso, run In :RxCachedThreadScheduler-<span class="number">2</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">52</span>:<span class="number">13.379</span> <span class="number">16424</span>-<span class="number">16454</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Glide, run In :RxCachedThreadScheduler-<span class="number">2</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">52</span>:<span class="number">13.379</span> <span class="number">16424</span>-<span class="number">16454</span>/com.hanks.rxsearch I/RxThread: get result:Android-Glide, run In :RxCachedThreadScheduler-<span class="number">2</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">52</span>:<span class="number">13.379</span> <span class="number">16424</span>-<span class="number">16454</span>/com.hanks.rxsearch I/RxThread: doOnNext:Android-Fresco, run In :RxCachedThreadScheduler-<span class="number">2</span></span><br><span class="line"><span class="number">12</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">52</span>:<span class="number">13.379</span> <span class="number">16424</span>-<span class="number">16454</span>/com.hanks.rxsearch I/RxThread: get result:Android-Fresco, run In :RxCachedThreadScheduler-<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p><code>Android</code> <code>Rxjava</code> <code>Rxandroid</code></p>
<blockquote>
<p><strong>文章出处</strong> (<a href="http://hanks.xyz">http://hanks.xyz</a>)</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>初学者在使用<code>RxJava</code>的过程中，经常搞不清Observable的事件序列和每次操作应该怎样切换线程，切换哪个线程<br>首先需要搞懂在<code>RxJava</code> 中<code>.subscribeOn()</code> 和  <code>observeOn()</code> 之间的区别：</p>
<ul>
<li><code>.subscribeOn()</code> 用来指定<code>Observable</code>应该操作的调度器(<code>Scheduler</code>)</li>
<li><code>.observeOn()</code> 指定 <code>Observable</code>在一个指定的调度器(<code>Scheduler</code>)上给观察者发送通知</li>
<li>默认情况下， 事件序列操作的线程与调用<code>.subscribe()</code>的线程一致</li>
</ul>
<p>没理解？<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="Rxandroid" scheme="http://hanks.xyz/tags/Rxandroid/"/>
    
      <category term="Rxjava" scheme="http://hanks.xyz/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OS X中Java环境变量配置]]></title>
    <link href="http://hanks.xyz/2015/12/04/mac_java_enviroment/"/>
    <id>http://hanks.xyz/2015/12/04/mac_java_enviroment/</id>
    <published>2015-12-04T15:50:26.000Z</published>
    <updated>2015-12-04T16:10:58.000Z</updated>
    <content type="html"><![CDATA[<p>类似Linux下Java环境的配置,流程就是 <code>下载</code> -&gt; <code>解压</code> -&gt; <code>配置环境变量文件</code></p>
<h3 id="下载_jdk">下载 jdk</h3><p>到oracle官网下最新 jdk <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">下载链接</a>,  注意下载的是jdk(Java Development Kit ),不是jre(Java Runtime Environment)</p>
<h3 id="配置Java环境变量">配置Java环境变量</h3><p>安装过jdk之后, 查看jdk的安装路径, 一般在 <code>/Library/Java/JavaVirtualMachines</code>目录下面<br>然后编辑环境变量, 打开文件 <code>/etc/profile</code></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>在底部添加下面的环境变量, windows上面是图形化的编辑, linux 和 mac 下都是 添加到 <code>/etc/profile</code>文件中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=<span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/"</span></span><br><span class="line">CLASS_PATH=<span class="string">"<span class="variable">$JAVA_HOME</span>/lib"</span></span><br><span class="line">PATH=<span class="string">".;<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin"</span></span><br></pre></td></tr></table></figure>
<h3 id="验证配置">验证配置</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="property">version</span></span><br></pre></td></tr></table></figure>
<p>看到版本信息则为配置成功.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>类似Linux下Java环境的配置,流程就是 <code>下载</code> -&gt; <code>解压</code> -&gt; <code>配置环境变量文件</code></p>
<h3 id="下载_jdk">下载 jdk</h3><p>到oracle官网下最新 jdk <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载链接</a>,  注意下载的是jdk(Java Development Kit ),不是jre(Java Runtime Environment)</p>
<h3 id="配置Java环境变量">配置Java环境变量</h3><p>安装过jdk之后, 查看jdk的安装路径, 一般在 <code>/Library/Java/JavaVirtualMachines</code>目录下面<br>然后编辑环境变量, 打开文件 <code>/etc/profile</code></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Java" scheme="http://hanks.xyz/tags/Java/"/>
    
      <category term="OS X" scheme="http://hanks.xyz/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu 安装 OS X 10.11  虚拟机]]></title>
    <link href="http://hanks.xyz/2015/12/02/mac-os-in-Ubuntu/"/>
    <id>http://hanks.xyz/2015/12/02/mac-os-in-Ubuntu/</id>
    <published>2015-12-02T15:50:26.000Z</published>
    <updated>2015-12-03T03:11:08.000Z</updated>
    <content type="html"><![CDATA[<p>看到<a href="http://bbs.feng.com/read-htm-tid-9908410.html" target="_blank" rel="external">论坛</a>里有人在windows平台上面利用 <code>VirtualBox</code> 成功安装了 <code>OS X 10.11</code>,(我的是Ubuntu 14.04)于是尝试一下虚拟机装mac,既然 <code>VirtualBox</code> 有linux版, 于是尝试在Ubuntu下装mac os虚拟机.<br><a id="more"></a></p>
<h3 id="下载_VirtualBox">下载 <code>VirtualBox</code></h3><p>到 <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">VirtualBox 官网</a>下载, 我已经安装过了,版本是 5.0.8, 最新的 5.0.10</p>
<h3 id="下载_mac_os_虚拟机文件">下载 mac os 虚拟机文件</h3><p>到这个论坛里下载安装好的<a href="http://bbs.feng.com/read-htm-tid-9908410.html" target="_blank" rel="external">OS X 10.11 El Capitan GM by TechReviews.vmdk</a></p>
<h3 id="添加虚拟机">添加虚拟机</h3><p> 打开 <code>VirtualBox</code>, 新建mac os 虚拟机, <strong>需要记住自己填写的名字</strong>,下面需要用命令更改配置<br>我分配了8G内存, 虚拟硬盘使用刚才下载的<br> <img src="https://dn-coding-net-production-pp.qbox.me/44703706-0ca7-4163-89ff-968e8962c57f.png" alt="图片"><br>注意设置<code>启动顺序</code>,和<code>芯片组</code><br> <img src="https://dn-coding-net-production-pp.qbox.me/1f97a9c1-09b0-428a-aac9-60a098b78d6c.png" alt="图片"><br>设置<code>显存</code>为128MB<br> <img src="https://dn-coding-net-production-pp.qbox.me/2adabc19-197d-46b4-a960-0203a6c7fd52.png" alt="图片"></p>
<h3 id="更改配置">更改配置</h3><p>输入以下命令,注意使用的 <code>VboxManage</code> 命令</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage modifyvm <span class="string">"OSXElCapitan"</span>  --cpuidset <span class="number">00000001</span> <span class="number">000306</span>a9 <span class="number">04100800</span> <span class="number">7f</span>bae3ff bfebfbff</span><br><span class="line">VBoxManage setextradata <span class="string">"OSXElCapitan"</span>  <span class="string">"VBoxInternal/Devices/efi/0/Config/DmiSystemProduct"</span> <span class="string">"MacBookPro11,3"</span></span><br><span class="line">VBoxManage setextradata <span class="string">"OSXElCapitan"</span>  <span class="string">"VBoxInternal/Devices/efi/0/Config/DmiSystemVersion"</span> <span class="string">"1.0"</span></span><br><span class="line">VBoxManage setextradata <span class="string">"OSXElCapitan"</span>  <span class="string">"VBoxInternal/Devices/efi/0/Config/DmiBoardProduct"</span> <span class="string">"Iloveapple"</span></span><br><span class="line">VBoxManage setextradata <span class="string">"OSXElCapitan"</span>  <span class="string">"VBoxInternal/Devices/smc/0/Config/DeviceKey"</span> <span class="string">"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"</span></span><br><span class="line">VBoxManage setextradata <span class="string">"OSXElCapitan"</span>  <span class="string">"VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC"</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>如需要更改 虚拟机分辨率 1440×900 输入命令如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage setextradata <span class="string">"OSXElCapitan"</span> <span class="string">"VBoxInternal2/EfiGopMode"</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<p>其中数字表示如下, 虚拟机默认分辨率值是 2 – 1024×768</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> – <span class="number">640</span>×<span class="number">480</span></span><br><span class="line"><span class="number">1</span> – <span class="number">800</span>×<span class="number">600</span></span><br><span class="line"><span class="number">2</span> – <span class="number">1024</span>×<span class="number">768</span></span><br><span class="line"><span class="number">3</span> – <span class="number">1280</span>×<span class="number">1024</span></span><br><span class="line"><span class="number">4</span> – <span class="number">1440</span>×<span class="number">900</span></span><br></pre></td></tr></table></figure>
<h3 id="启动虚拟机">启动虚拟机</h3><ol>
<li>关闭 VirtualBOX</li>
<li>重新正常启动 VirtualBOX, 及启动 OSXYosemite 虚拟机文件</li>
<li>进行一些系统设置</li>
</ol>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/2ba64c95-f5f1-4e66-b878-5bdc6d873c6e.png" alt="图片"></p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/9d66a4d0-b141-4920-bde4-2a89d0afcc15.png" alt="图片"></p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/255e709e-3416-4e89-80a8-30c10768332b.png" alt="图片"></p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/ba9d827a-41dd-4f8c-8ae9-1467907024e4.png" alt="图片"></p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/a256c81f-0820-4b8d-bd0a-e55eca3b4d05.png" alt="图片"></p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/f3c72d29-4966-46b4-99cc-faad0d7af4f3.png" alt="图片"></p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/9cf7a273-c89d-4715-b0c4-62e76a228faa.png" alt="图片"></p>
<h3 id="安装_xcode_7">安装 xcode 7</h3><p>下载xcode</p>
<hr>
<p>参考链接:<br><br><a href="http://bbs.feng.com/read-htm-tid-9908410.html" target="_blank" rel="external">http://bbs.feng.com/read-htm-tid-9908410.html</a><br><br><a href="http://bbs.feng.com/read-htm-tid-8474315.html" target="_blank" rel="external">http://bbs.feng.com/read-htm-tid-8474315.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>看到<a href="http://bbs.feng.com/read-htm-tid-9908410.html">论坛</a>里有人在windows平台上面利用 <code>VirtualBox</code> 成功安装了 <code>OS X 10.11</code>,(我的是Ubuntu 14.04)于是尝试一下虚拟机装mac,既然 <code>VirtualBox</code> 有linux版, 于是尝试在Ubuntu下装mac os虚拟机.<br>]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://hanks.xyz/tags/Ubuntu/"/>
    
      <category term="mac os" scheme="http://hanks.xyz/tags/mac-os/"/>
    
      <category term="virtualBox" scheme="http://hanks.xyz/tags/virtualBox/"/>
    
  </entry>
  
</feed>
