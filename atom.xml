<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hanks.xyz]]></title>
  <subtitle><![CDATA[coding]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://hanks.xyz/"/>
  <updated>2016-03-08T15:31:41.000Z</updated>
  <id>http://hanks.xyz/</id>
  
  <author>
    <name><![CDATA[Hanks]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用 setUserVisibleHint 方法判断 Fragment 是否可见]]></title>
    <link href="http://hanks.xyz/2016/03/08/Fragment-setUserVisibleHint/"/>
    <id>http://hanks.xyz/2016/03/08/Fragment-setUserVisibleHint/</id>
    <published>2016-03-08T15:12:43.000Z</published>
    <updated>2016-03-08T15:31:41.000Z</updated>
    <content type="html"><![CDATA[<p>场景：ViewPager中嵌套多个Fragment，判断Fragment是否可见<br><a id="more"></a><br>以下为Kotlin代码</p>
<p><code>MainActivity.kt</code><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.hanks.fragmentvisiable</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> fragmentList</span>: List<span class="type">&lt;Fragment&gt;</span> ? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="typename">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="typename">Bundle?</span>)</span> &#123;</span></span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        fragmentList = listOf<span class="type">&lt;Fragment&gt;</span>(Fragment01(),Fragment02(),Fragment03()) <span class="comment">// 创建Fragment集合</span></span><br><span class="line">        viewPager.adapter = MainFragmentPageAdapter(supportFragmentManager) <span class="comment">// 给ViewPager设置Adapter</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">internal <span class="class"><span class="keyword">class</span> <span class="title">MainFragmentPageAdapter</span></span>(fragmentManager: FragmentManager) : FragmentPagerAdapter(fragmentManager) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(p0: <span class="typename">Int</span>)</span>: Fragment? = fragmentList?.<span class="title">get</span><span class="params">(p0)</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span>: Int = fragmentList!!.size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用了 <code>Kotlin</code> 的特性，代码简洁很多。</p>
<p><code>layout_main.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.v4.view.ViewPager</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/viewPager"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>Fragment02.kt</code><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.hanks.fragmentvisiable</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> android.util.TypedValue</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by hanks on 16/3/8.</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fragment02</span> : <span class="typename">Fragment</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="typename">LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?</span>)</span>: View? &#123;</span></span><br><span class="line">        <span class="variable"><span class="keyword">val</span> view</span> = TextView(context)</span><br><span class="line">        view.text = <span class="string">"Fragment02"</span></span><br><span class="line">        view.setTextSize(TypedValue.COMPLEX_UNIT_SP,<span class="number">30</span>f)</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重写 setUserVisibleHint</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setUserVisibleHint</span><span class="params">(isVisibleToUser: <span class="typename">Boolean</span>)</span> &#123;</span></span><br><span class="line">        super.setUserVisibleHint(isVisibleToUser)</span><br><span class="line">        Log.d(<span class="string">"Fragment"</span>,<span class="string">"Fragment02 $isVisibleToUser"</span>) <span class="comment">// 打印isVisibleToUser</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Fragment01 Fragment03与Fragment02类似</p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/8bf10795-f85a-4da1-9bbb-995b73aa74a2.gif" alt="gif"> </p>
<p>结果：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`启动时`：                : <span class="number">03</span>-<span class="number">08</span> <span class="number">10</span>:<span class="number">18</span>:<span class="number">19.238</span> <span class="number">20377</span>-<span class="number">20377</span>/xyz.hanks.fragmentvisiable D/Fragment: Fragment02 <span class="literal">false</span></span><br><span class="line">`Fragment01-&gt;Fragment02` : <span class="number">03</span>-<span class="number">08</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">15.586</span> <span class="number">20377</span>-<span class="number">20377</span>/xyz.hanks.fragmentvisiable D/Fragment: Fragment02 <span class="literal">true</span></span><br><span class="line">`Fragment02-&gt;Fragment03` : <span class="number">03</span>-<span class="number">08</span> <span class="number">10</span>:<span class="number">20</span>:<span class="number">01.038</span> <span class="number">20377</span>-<span class="number">20377</span>/xyz.hanks.fragmentvisiable D/Fragment: Fragment02 <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>场景：ViewPager中嵌套多个Fragment，判断Fragment是否可见<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="Fragment" scheme="http://hanks.xyz/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kotlin for Android - 0x00 配置]]></title>
    <link href="http://hanks.xyz/2016/03/08/kotlin-for-android-00/"/>
    <id>http://hanks.xyz/2016/03/08/kotlin-for-android-00/</id>
    <published>2016-03-08T14:15:12.000Z</published>
    <updated>2016-03-08T15:30:10.000Z</updated>
    <content type="html"><![CDATA[<p> <img src="https://dn-coding-net-production-pp.qbox.me/f4726bb1-04c7-43a9-8877-e701bdb29d61.png" alt="Kotlin 1.0"> </p>
<p>Kotlin 发布了1.0.0正式版，准备使用 <code>Kotlin</code>重写下项目, 先拿一些简单的例子练习。</p>
<a id="more"></a>
<h2 id="工具配置">工具配置</h2><p>使用 <strong>Android Studio</strong> 开发Android， 在 <code>Plugins</code> 中搜索 <strong><code>Kotlin</code></strong>, 安装插件<br> <img src="https://dn-coding-net-production-pp.qbox.me/066cdf44-c2e5-4688-a2eb-c5e8c86a2334.png" alt="Kotlin插件"> </p>
<h2 id="项目配置">项目配置</h2><p>新建一个 Android 项目，然后配置一下 <strong>build.gradle</strong>，可以使用工具或者手动配置</p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/eb7770ec-3c4a-4ba2-b6ff-33535c985628.png" alt="插件配置Kotlin"> </p>
<p><strong><code>app/build.gradle</code></strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'kotlin-android'</span>               <span class="comment">// kotlin 插件</span></span><br><span class="line">apply plugin: <span class="string">'kotlin-android-extensions'</span>    <span class="comment">// 对Android的扩展</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.2"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"xyz.hanks.fragmentvisiable"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">sourceSets</span> &#123;</span><br><span class="line">        main.java.srcDirs += <span class="string">'src/main/kotlin'</span> <span class="comment">// 添加kotlin目录为源文件目录</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.2.0'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"</span> <span class="comment">// 设置依赖库</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    ext.kotlin_version = <span class="string">'1.0.0'</span>    <span class="comment">// kotlin 版本</span></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"</span>       <span class="comment">// </span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"</span>  <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来就可以使用Kotlin进行Android开发了。</p>
<p>关于使用Anko库，可以查看这篇<a href="http://hanks.xyz/2015/10/21/Anko_for_Android/">Anko for Android</a></p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p> <img src="https://dn-coding-net-production-pp.qbox.me/f4726bb1-04c7-43a9-8877-e701bdb29d61.png" alt="Kotlin 1.0"> </p>
<p>Kotlin 发布了1.0.0正式版，准备使用 <code>Kotlin</code>重写下项目, 先拿一些简单的例子练习。</p>]]>
    
    </summary>
    
      <category term="Andorid" scheme="http://hanks.xyz/tags/Andorid/"/>
    
      <category term="Kotlin" scheme="http://hanks.xyz/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创建 Material Design 的真实动画]]></title>
    <link href="http://hanks.xyz/2016/03/08/material-interpolator/"/>
    <id>http://hanks.xyz/2016/03/08/material-interpolator/</id>
    <published>2016-03-07T16:53:41.000Z</published>
    <updated>2016-03-07T17:18:20.000Z</updated>
    <content type="html"><![CDATA[<p>material design 规范中，一个重要方面在于如何在“动作”完整的展现物体的各个真实的特性，譬如优雅、简约、美观和神奇的无缝的用户体验，下面的动画将帮助大家理解这些理念。</p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/7a258a47-be74-49da-894a-70c0cfdb2e3c.gif" alt="动画"> </p>
<a id="more"></a>
<p>推荐一个网站: <a href="http://inloop.github.io/interpolator/" target="_blank" rel="external">http://inloop.github.io/interpolator/</a></p>
<p>填入函数，即可立即查看效果</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x&lt;=<span class="number">0.5</span>)&#123;</span><br><span class="line">    <span class="number">4</span>*x*x*x</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="number">4</span>*(x-<span class="number">1</span>)*(x-<span class="number">1</span>)*(x-<span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/cb75178e-fe7f-46d9-9a72-79b4f190454d.gif" alt="动画"> </p>
<p>以此自定义Interpolator，Interpolator 时间插值类，定义动画变换的速度。Interpolator接口，继承自TimeInterpolator，TimeInterpolator时间插值器允许动画进行非线性运动变换，如加速和限速等，该接口中只有接口中有一个方法 <code>float getInterpolation(float input)</code> 这个方法。传入的值是一个 <code>0.0~1.0</code>的值，返回值可以小于0.0也可以大于1.0。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by hanks on 2016/3/7.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaterialInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="number">0.5</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">4</span>*x*x*x;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>*(x-<span class="number">1</span>)*(x-<span class="number">1</span>)*(x-<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/b5aefe9e-514d-4d6f-8959-26254160f51d.gif" alt="MaterialInterpolator"></p>
<p>Lollipop在 <code>android.R.interpolator</code> 中加入了几个 interpolator，包括<code>fast_out_linear_in</code> , <code>fast_out_slow_in</code>,和<code>linear_out_slow_in</code> ：对于产生逼真的物理效果至关重要。现在我们可以通过使用兼容包中的 <code>FastOutLinearInInterpolator</code>,  <code>FastOutSlowInInterpolator</code> , <code>LinearOutSlowInInterpolator</code> 类来达到同样的效果。 除此之外，我们还可以使用 <code>PathInterpolatorCompat</code> 来制造二次方或三次方的贝塞尔曲线动画。</p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>material design 规范中，一个重要方面在于如何在“动作”完整的展现物体的各个真实的特性，譬如优雅、简约、美观和神奇的无缝的用户体验，下面的动画将帮助大家理解这些理念。</p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/7a258a47-be74-49da-894a-70c0cfdb2e3c.gif" alt="动画"> </p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="interpolator" scheme="http://hanks.xyz/tags/interpolator/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu 14.04 搭建Swift3.0 开发环境]]></title>
    <link href="http://hanks.xyz/2016/02/29/ubuntu-swift/"/>
    <id>http://hanks.xyz/2016/02/29/ubuntu-swift/</id>
    <published>2016-02-29T14:38:53.000Z</published>
    <updated>2016-02-29T15:06:26.000Z</updated>
    <content type="html"><![CDATA[<p>Swift已经出了3.0，开发文档有linux环境的，简单玩一下<br><img src="https://dn-coding-net-production-pp.qbox.me/9225762d-fab3-4ba9-a62e-5c4dc9e4a761.png" alt="Ubuntu+Swift"> </p>
<h2 id="下载">下载</h2><p>下载压缩包：<a href="https://swift.org/download/" target="_blank" rel="external">https://swift.org/download/</a></p>
<p>选择自己的环境，下载对应的压缩包，我这里下载 <strong>swift-DEVELOPMENT-SNAPSHOT-2016-02-25-a-ubuntu14.04.tar.gz</strong><br>到<code>~/Download/Swift</code> 目录下</p>
<a id="more"></a>
<p><img src="https://dn-coding-net-production-pp.qbox.me/f660d089-4996-4bb7-9f05-678e5bebf094.png" alt="下载"> </p>
<h2 id="解压缩">解压缩</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/Download/swift</span><br><span class="line"><span class="preprocessor"># 解压缩</span></span><br><span class="line">$ tar zxvf swift-DEVELOPMENT-SNAPSHOT-<span class="number">2016</span>-<span class="number">02</span>-<span class="number">25</span>-a-ubuntu14<span class="number">.04</span>.tar.gz</span><br></pre></td></tr></table></figure>
<h2 id="配置环境变量">配置环境变量</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 .bashrc </span></span><br><span class="line"><span class="title">vim</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 在文件底部插入环境变量</span></span><br><span class="line"><span class="keyword">export</span> SWIFT_HOME=~/Downloads/swift/swift-DEVELOPMENT-SNAPSHOT-<span class="number">2016</span>-<span class="number">02</span>-<span class="number">25</span>-a-ubuntu14<span class="number">.04</span></span><br><span class="line"><span class="keyword">export</span> PATH=$SWIFT_HOME/usr/bin:$PATH</span><br></pre></td></tr></table></figure>
<h2 id="验证环境变量">验证环境变量</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">swift </span>--version</span><br><span class="line"><span class="keyword">Swift </span>version <span class="number">3</span>.<span class="number">0</span>-dev (LLVM <span class="keyword">b361b0fc05, </span>Clang <span class="number">11493</span>b0f62, <span class="keyword">Swift </span>fc261045a5)</span><br><span class="line"><span class="label">Target</span>: x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure>
<p><a href="http://swift.org/" target="_blank" rel="external">swift官网</a></p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/ad395462-1494-4ffb-8744-6fd7256d51c0.png" alt="图片"> </p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Swift已经出了3.0，开发文档有linux环境的，简单玩一下<br><img src="https://dn-coding-net-production-pp.qbox.me/9225762d-fab3-4ba9-a62e-5c4dc9e4a761.png" alt="Ubuntu+Swift"> </p>
<h2 id="下载">下载</h2><p>下载压缩包：<a href="https://swift.org/download/">https://swift.org/download/</a></p>
<p>选择自己的环境，下载对应的压缩包，我这里下载 <strong>swift-DEVELOPMENT-SNAPSHOT-2016-02-25-a-ubuntu14.04.tar.gz</strong><br>到<code>~/Download/Swift</code> 目录下</p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://hanks.xyz/tags/Swift/"/>
    
      <category term="Ubuntu" scheme="http://hanks.xyz/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kotlin + RxJava = Functional Powerhouse]]></title>
    <link href="http://hanks.xyz/2016/02/17/kotlin-rxjava/"/>
    <id>http://hanks.xyz/2016/02/17/kotlin-rxjava/</id>
    <published>2016-02-17T14:13:18.000Z</published>
    <updated>2016-02-17T15:02:00.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文链接 : <a href="http://tomstechnicalblog.blogspot.com/2016/02/kotlin-rxjava-what-rxjava-should-be.html" target="_blank" rel="external">Kotlin + RxJava = Functional Powerhouse</a><br>原文作者 : <a href="http://tomstechnicalblog.blogspot.com/2016/02/kotlin-rxjava-what-rxjava-should-be.html" target="_blank" rel="external">Thomas Nield</a><br>译文出自 : <a href="http://hanks.xyz">Hanks.xyz</a><br>译者 : <a href="https://github.com/hanks-zyh/" target="_blank" rel="external">hanks-zyh</a></p>
</blockquote>
<p>作为一个软件开发人员,我总是寻找方法来达到更少的代码做更多的事情。如果我只要修改一点代码就可以不断适应业务需求变化那就更好了，所以我必须把代码重写。</p>
<p>Java语言一直是我的首选,因为它实用、可伸缩的、高性能、便携和静态类型。我在项目中熟练的运用Java,但我开始感到它比较麻烦(我一直关注着C#)。幸好去年我发现了RxJava，响应式编程使我完成的任务。</p>
<p>我几乎在我所有的项目总使用RxJava,我变得更高效,我的应用程序的质量也得到提高。但我慢慢开始意识到Java语言的局限性阻碍了RxJava。尽管Java 8提供了lambdas ,一些函数式编程任务还是非常冗长。<br><a id="more"></a></p>
<p>例如,使用 <code>compose()</code> 操作符接收一个<code>Transformer</code>，这样你可以使用现有的RxJava操作符来自定义操作符。但是问题是它很快就变得冗长了。</p>
<p>一个简单的例子。我可以创建一个 <code>Transformer</code>,将一个 <code>Observable&lt;T&gt;</code> 变成一个 <code>&lt;ImmutableList&lt;T&gt;&gt;</code> 因为我喜欢Google Guava’s 的不可变的集合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Launcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Observable&lt;String&gt; source = Observable.just(<span class="string">"Alpha"</span>, </span><br><span class="line">            <span class="string">"Beta"</span>, <span class="string">"Gamma"</span>, <span class="string">"Delta"</span>, <span class="string">"Epsilon"</span>);</span><br><span class="line"></span><br><span class="line">        source.compose(toImmutableList()).subscribe(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Observable.Transformer&lt;T,ImmutableList&lt;T&gt;&gt; toImmutableList() &#123;</span><br><span class="line">        <span class="keyword">return</span> obs -&gt; obs.collect(() -&gt; ImmutableList.&lt;T&gt;builder(),</span><br><span class="line">             (b,t) -&gt; b.add(t)).map(b -&gt; b.build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了Java 8能简化一大部分代码。但 <code>toImmutableList</code>这个函数和main函数在同一个类中,如果我放在一个单独的工厂类中,它将慢慢开始冗长了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Launcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Observable&lt;String&gt; source = Observable.just(<span class="string">"Alpha"</span>, <span class="string">"Beta"</span>, <span class="string">"Gamma"</span>, </span><br><span class="line">            <span class="string">"Delta"</span>, <span class="string">"Epsilon"</span>);</span><br><span class="line"></span><br><span class="line">        source.compose(GuavaTransformers.toImmutableList()).subscribe(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*This would be in the GuavaTransformers class */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Observable.Transformer&lt;T,ImmutableList&lt;T&gt;&gt; toImmutableList() &#123;</span><br><span class="line">        <span class="keyword">return</span> obs -&gt; obs.collect(() -&gt; ImmutableList.&lt;T&gt;builder(), </span><br><span class="line">            (b,t) -&gt; b.add(t)).map(b -&gt; b.build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更糟糕的是，如果我开始创建更复杂的 <code>Transformers</code> 或带参数的操作符， <code>compose()</code> 语句开始变得很丑。如果我想给 <code>ImmutableListMultimap</code> 添加item，它开始变得更不友好了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaLauncher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Observable&lt;String&gt; source = Observable.just(<span class="string">"Alpha"</span>, <span class="string">"Beta"</span>, <span class="string">"Gamma"</span>,</span><br><span class="line">             <span class="string">"Delta"</span>, <span class="string">"Epsilon"</span>);</span><br><span class="line"></span><br><span class="line">        source.compose(GuavaTransformers</span><br><span class="line">            .toImmutableListMultiMap(s -&gt; s.length())).subscribe(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*This would be in the GuavaTransformers class */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Observable.Transformer&lt;T,ImmutableList&lt;T&gt;&gt; toImmutableList() &#123;</span><br><span class="line">        <span class="keyword">return</span> obs -&gt; obs.collect(() -&gt; ImmutableList.&lt;T&gt;builder(), </span><br><span class="line">            (b,t) -&gt; b.add(t)).map(b -&gt; b.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T,K&gt; Observable.Transformer&lt;T,ImmutableListMultimap&lt;K,T&gt;&gt; </span><br><span class="line">            toImmutableListMultiMap(Func1&lt;T,K&gt; keyMapper) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obs -&gt; obs.collect(() -&gt; ImmutableListMultimap.&lt;K,T&gt;builder(),</span><br><span class="line">            (b,t) -&gt; b.put(keyMapper.call(t), t)).map(b -&gt; b.build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这可能是个小例子，但是对于较大的应用这些问题可以迅速成为放大。即便使用了RxJava和Java 8的lambdas， 原来的代码也会慢慢变得难以理解，甚至我们还没涉及到元组和数据类的相关内容! 但 <code>Kotlin</code> 解决了所有的问题。</p>
<h2 id="Introducing_Kotlin">Introducing Kotlin</h2><p>我试着看了Scala、Python和其他语言。我特别看了Scala，尽管它很厉害,但我发现它太深奥。然后有一天我发现JetBrains分享他们的新语言称为 <code>Kotlin</code> 。他们宣传它作为工业级,业务性的语言，强调实用性而不是便捷。JetBrains, 流行的Java IDE Intellij IDEA的创造者, 建造它,因为他们觉得他们可以更有效率的使用一种语言,Java。在学习<code>Kotlin</code> 和重写两个国内项目学习后,我很快就被安利并且准备使用它。<code>Kotlin</code> 可以和Java相互调用使它更好安利了。</p>
<p>但在这篇文章中,我想分享我使用<code>Kotlin</code>和<code>RxJava</code>的经验。具有讽刺意味的是,我发现RxJava和<code>Kotlin</code>一起用比和Java一起更好用本身。它只是表示函数式编程的概念。</p>
<p>例如， 我可以通过Observable的扩展方法“添加”一些方法,甚至不用扩展类！这并不是什么新鲜事,如果你学过C#, 但这对于Java来说是一等一的大事。下面我使用Kotlin来添加<code>toImmutableList()</code>和<code>toImmutableListMultimap()</code>。然后我可以直接调用这些方法的而不用使用<code>compose()</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line"></span><br><span class="line">    val source = Observable.just("Alpha", "Beta", "Gamma", "Delta", "Epsilon")</span><br><span class="line"></span><br><span class="line">    source.toImmutableListMultimap &#123; it.length &#125;.subscribe &#123; println(it) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun &lt;T&gt; Observable&lt;T&gt;.toImmutableList() =</span><br><span class="line">        collect(&#123; ImmutableList.builder&lt;T&gt;()&#125;,&#123; b, t -&gt; b.add(t)&#125;).map &#123; it.build() &#125;</span><br><span class="line"></span><br><span class="line">inline fun &lt;K,T&gt; Observable&lt;T&gt;.toImmutableListMultimap(</span><br><span class="line">    crossinline keyMapper: (T) -&gt; K) = collect(&#123; ImmutableListMultimap.builder&lt;K,T&gt;()&#125;,</span><br><span class="line">        &#123; b, t -&gt; b.put(keyMapper(t), t)&#125;).map &#123; it.build() &#125;</span><br></pre></td></tr></table></figure>
<p>这里有很多值得注意的地方：</p>
<ol>
<li><p>我们没有将这些函数在类的内部。不像Java,<code>Kotlin</code>并不强迫你把静态方法在类。这很有用,有助于消除很多样板,特别是对于程序的程序。</p>
</li>
<li><p>变量类型可以通过类型推断，我们不必显示的声明这是一个Observable<string>类型的变量。如果你想声明，可以使用下面的样式。在<code>Kotlin</code>类型是在变量名后面(:隔开)。之所以这样做, 是因为变量名很可能比类型更有用,所以它是宣先定义变量名。</string></p>
</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">val</span> source</span>: Observable<span class="type">&lt;String&gt;</span> = Observable.just(<span class="string">"Alpha"</span>, <span class="string">"Beta"</span>, <span class="string">"Gamma"</span>,</span><br><span class="line">     <span class="string">"Delta"</span>, <span class="string">"Epsilon"</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>你可以更容易的使用Lambdas。而不必写出一个像 <code>s -&gt; s.length()</code>这样一对一的映射(),你可以用更简洁的表达他的长度。指的是单输入项排放(这是出现在其他JVM语言)。同样,没有paranthesis()接收参数。你使用<code>{ }</code>表达整个函数的运算符。这特别有用,你随时可以把多行放在一个<code>{ }</code>内。</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">source. toImmutableListMultimap &#123; it. length &#125;. subscribe&#123; println(it)&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 你可以使用扩展函数“添加”函数/方法到一个类中而不用创建一个新的子类。下面这条语句添加一个`toImmutableList()`函数，它可以在程序中被直接访问(除非你让它私有或改变其范围)。这是怎么做的?编译器只是在编译成字节码时使它成为了一个静态方法,但是你得到了好的语法糖以及看到它自动完成。你不需要目标泛型类型与扩展方法。例如,我可以做一个concatStr()扩展方法专门针对 `Observable<span class="type">&lt;String&gt;</span>`而不是`Observable<span class="type">&lt;T&gt;</span>`。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">```kotlin</span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Observable<span class="type">&lt;T&gt;</span>.<span class="title">toImmutableList</span><span class="params">()</span> =</span></span><br><span class="line">       collect(&#123; ImmutableList.builder<span class="type">&lt;T&gt;</span>()&#125;,&#123; b, t -&gt; b.add(t)&#125;).map &#123; it.build()&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>函数参数类型是简单得多。而不是表达一种功能性Func1 &lt; T,K &gt;,您可以使用一个SAM-less类型表达式(T)- &gt; K .这个就更容易,这个函数接收一个T和把它变成一种K .它不是一个抽象方法(SAM)这使得它更容易的原因和遗漏的问题“我正在使用单一方法接口?”。当然,<code>Kotlin</code>将处理转换λ山姆当调用Java库,但是它不会用<code>Kotlin</code>。此外,使用内联函数接受函数参数和crossinline关键词,就可以获得巨大的效率通过消除对象的开销。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inline fun &lt;K,T&gt; Observable&lt;T&gt;.toImmutableListMultimap(</span><br><span class="line">   crossinline keyMapper: (T) -&gt; K) = collect(&#123;ImmutableListMultimap.builder&lt;K,T&gt;()&#125;,</span><br><span class="line">         &#123; b, t -&gt; b.put(keyMapper(t), t)&#125;).map &#123; it.build() &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Data_Classes">Data Classes</h3><p>Another great feature of Kotlin is data classes.  Have you ever wanted to simply zip two values together, but had to create an entire class just to pair them up with hashCode(), equals(), and toString() implemented?<br><code>Kotlin</code>的另一个特性是数据类。你有没有遇到过当你想简单地压缩两个值,但必须创建一个完整的类来并且实现hashCode(),equals()和toString()?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaLauncher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Observable&lt;String&gt; letter = Observable.just(<span class="string">"Alpha"</span>, <span class="string">"Beta"</span>, <span class="string">"Gamma"</span>, </span><br><span class="line">            <span class="string">"Delta"</span>, <span class="string">"Epsilon"</span>);</span><br><span class="line"></span><br><span class="line">        Observable&lt;Integer&gt; number = Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        Observable&lt;CodePair&gt; zipped = Observable.zip(letter,number, </span><br><span class="line">            (l,n) -&gt; <span class="keyword">new</span> CodePair(l,n));</span><br><span class="line"></span><br><span class="line">        zipped.subscribe(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CodePair</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String letter;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer number;</span><br><span class="line"></span><br><span class="line">        CodePair(String letter, Integer number) &#123;</span><br><span class="line">            <span class="keyword">this</span>.letter = letter;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            CodePair codePair = (CodePair) o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!letter.equals(codePair.letter)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> number.equals(codePair.number);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> result = letter.hashCode();</span><br><span class="line">            result = <span class="number">31</span> * result + number.hashCode();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"CodePair&#123;"</span> +</span><br><span class="line">                    <span class="string">"letter='"</span> + letter + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", number="</span> + number +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这很不爽，我不得不写36行代码来创建一个带有两个属性的<code>CodePair</code>类。这个问题多次出现在函数式编程中,唯一的选择是创建元组,这只会使代码更加难懂。</p>
<p>但是在<code>Kotlin</code>,你可以声明一个<code>data class</code>。这允许您快速声明一个类,在一行声明所有的属性,它会照顾hashCode(), equals(), toString()和实现builder。</p>
<p>48行混乱的Java代码在<code>Kotlin</code>现在变成5行。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="typename">Array&lt;String&gt;</span>)</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    data <span class="class"><span class="keyword">class</span> <span class="title">CodePair</span></span>(<span class="variable"><span class="keyword">val</span> letter</span>: String, <span class="variable"><span class="keyword">val</span> number</span>: <span class="typename">Int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable"><span class="keyword">val</span> letter</span> = Observable.just(<span class="string">"Alpha"</span>, <span class="string">"Beta"</span>, <span class="string">"Gamma"</span>, <span class="string">"Delta"</span>, <span class="string">"Epsilon"</span>)</span><br><span class="line">    <span class="variable"><span class="keyword">val</span> number</span> = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable"><span class="keyword">val</span> zipped</span> = Observable.zip(letter, number) &#123; l, n -&gt; CodePair(l, n) &#125;</span><br><span class="line"></span><br><span class="line">    zipped.subscribe &#123; System.out.println(it) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在main函数内声明CodePair类，它只存在于main函数的范围内。它有命名属性字母和数字你可以访问。这在Java看起来不切实际。能够动态声明简单类,常见的方法实现做了，使得开发者可以快速开发出组织清晰的代码。</p>
<h2 id="Conclusions">Conclusions</h2><p>我只简单分享<code>Kotlin</code>能做什么,有或没有RxJava。这不是一个教程，只是快速展示如何在<code>Kotlin</code>RxJava表达不同。我希望通过分享我的经验使你想去了解一下<code>Kotlin</code>。我知道与Scala结合RxScala可以做很多事情,但<code>Kotlin</code>是不同的。它既像Java一样强大又像Python一样灵活。当你把RxJava扔到混合<code>Kotlin</code>,我发现这是一个非常好的结合。我忘记提到没有原始类型和装箱拆箱? <code>Kotlin</code>有很多特性，将范围发布在这里,像<a href="https://kotlinlang.org/docs/reference/null-safety.html" target="_blank" rel="external">空指针安全</a>。</p>
<p><a href="https://kotlinlang.org/docs/tutorials/kotlin-android.html" target="_blank" rel="external"><code>Kotlin</code>也支持Android</a>。你也可以checkout<a href="https://github.com/ReactiveX/RxKotlin" target="_blank" rel="external">RxKotlin</a>库(RxJava的扩展，利用了<code>Kotlin</code>功能(如给集合添加<code>toObservable()</code>方法)。</p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文链接 : <a href="http://tomstechnicalblog.blogspot.com/2016/02/kotlin-rxjava-what-rxjava-should-be.html">Kotlin + RxJava = Functional Powerhouse</a><br>原文作者 : <a href="http://tomstechnicalblog.blogspot.com/2016/02/kotlin-rxjava-what-rxjava-should-be.html">Thomas Nield</a><br>译文出自 : <a href="http://hanks.xyz">Hanks.xyz</a><br>译者 : <a href="https://github.com/hanks-zyh/">hanks-zyh</a></p>
</blockquote>
<p>作为一个软件开发人员,我总是寻找方法来达到更少的代码做更多的事情。如果我只要修改一点代码就可以不断适应业务需求变化那就更好了，所以我必须把代码重写。</p>
<p>Java语言一直是我的首选,因为它实用、可伸缩的、高性能、便携和静态类型。我在项目中熟练的运用Java,但我开始感到它比较麻烦(我一直关注着C#)。幸好去年我发现了RxJava，响应式编程使我完成的任务。</p>
<p>我几乎在我所有的项目总使用RxJava,我变得更高效,我的应用程序的质量也得到提高。但我慢慢开始意识到Java语言的局限性阻碍了RxJava。尽管Java 8提供了lambdas ,一些函数式编程任务还是非常冗长。<br>]]>
    
    </summary>
    
      <category term="Kotlin" scheme="http://hanks.xyz/tags/Kotlin/"/>
    
      <category term="RxJava" scheme="http://hanks.xyz/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Framework分析-点击Launcher中的图标启动Activity]]></title>
    <link href="http://hanks.xyz/2016/02/01/framework-activity-oncreate/"/>
    <id>http://hanks.xyz/2016/02/01/framework-activity-oncreate/</id>
    <published>2016-02-01T15:50:11.000Z</published>
    <updated>2016-02-03T13:49:52.000Z</updated>
    <content type="html"><![CDATA[<p>Launcher也是一个应用，点击一个图标，开启一个新的应用。分析从点击图标到新的应用的Activity执行onCreate的执行流程.注意学习Binder机制<br> <img src="https://dn-coding-net-production-pp.qbox.me/29c9c5db-a084-4667-863e-912e07a27a73.png" alt="图片"> </p>
<a id="more"></a>
<p><img src="http://file.bmob.cn/M02/77/98/oYYBAFavgz6AfVmFAAR8ykLhngM223.png" alt="Laucher启动一个新的应用"></p>
<ol>
<li>无论是通过Launcher来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都通过Binder进程间通信进入到ActivityManagerService进程中，并且调用ActivityManagerService.startActivity接口； </li>
<li>ActivityManagerService调用ActivityStack.startActivityMayWait来做准备要启动的Activity的相关信息；</li>
<li>ActivityStack通知ApplicationThread要进行Activity启动调度了，这里的ApplicationThread代表的是调用ActivityManagerService.startActivity接口的进程，对于通过点击应用程序图标的情景来说，这个进程就是Launcher了，而对于通过在Activity内部调用startActivity的情景来说，这个进程就是这个Activity所在的进程了；</li>
<li>ApplicationThread不执行真正的启动操作，它通过调用ActivityManagerService.activityPaused接口进入到ActivityManagerService进程中，看看是否需要创建新的进程来启动Activity；</li>
<li>对于通过点击应用程序图标来启动Activity的情景来说，ActivityManagerService在这一步中，会调用startProcessLocked来创建一个新的进程，而对于通过在Activity内部调用startActivity来启动新的Activity来说，这一步是不需要执行的，因为新的Activity就在原来的Activity所在的进程中进行启动；</li>
<li>ActivityManagerServic调用ApplicationThread.scheduleLaunchActivity接口，通知相应的进程执行启动Activity的操作；</li>
<li>ApplicationThread把这个启动Activity的操作转发给ActivityThread，ActivityThread通过ClassLoader导入相应的Activity类，然后把它启动起来。</li>
</ol>
<p><img src="http://file.bmob.cn/M02/77/98/oYYBAFavgy2AbDNJAAIS5AMX0Hw805.png" alt="详细流程"></p>
<ol>
<li>Launcher 通过 Binder进程间通信机制通知 ActivityManagerService，它要启动一个Activity；</li>
<li>ActivityManagerService通过Binder进程间通信机制通知Launcher进入Paused状态；</li>
<li>Launcher通过Binder进程间通信机制通知ActivityManagerService，它已经准备就绪进入Paused状态，于是ActivityManagerService就创建一个新的进程，用来启动一个ActivityThread实例，即将要启动的Activity就是在这个ActivityThread实例中运行；</li>
<li>ActivityThread通过Binder进程间通信机制将一个ApplicationThread类型的Binder对象传递给ActivityManagerService，以便以后ActivityManagerService能够通过这个Binder对象和它进行通信；</li>
<li>ActivityManagerService 通过 Binder 进程间通信机制通知 ActivityThread, 现在一切准备就绪，它可以真正执行Activity的启动操作了。</li>
</ol>
<p><strong>ActivityThread</strong>:ActivityThread类有一个main方法，它是应用程序的入口，每启动一个应用进程，都会创建ActivityThread与之对应的实例，是应用程序的UI线程，Android进程启动时会建立消息循环。</p>
<p><strong>ApplicationThread &amp; ApplicatinThreadNative</strong>:ApplicationThread用来实现AMS(ActivityManagerService)与AT(ActivityThread)之间的交互。在AMS需要管理相关Application中的Activity的生命周期时，通过ApplicationThread与AT通讯，ApplicationThreadNative是ApplicationThread在客户端的实现(binder机制)。</p>
<p><strong>ApplicationThreadProxy</strong>:ApplicationThreadProxy是ApplicationThread在服务器端的代理。负责和服务器端的ApplicatingThreadNative通讯。 AMS就是通过该代理与ActivityThread进行通信的(binder机制)。</p>
<p><strong>Activity &amp; Intrumentation</strong>:Activity是应用程序真正做事情的类，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用(也就是说mInstrumentation是Activity类的成员变量，前文图解中也有说明)。<br><code>Instrumentation</code>用来监控应用程序和系统的交互，可以理解为应用进程的管家，AT要创建或暂停某个Activity时，都需要通过Instrumentation。 通俗的理解，<code>Instrumentation</code> 与AT的区别，前者像是一个“家庭”里的“管家”，后者是负责创建这个“家庭”，并负责对外打交道，比如接收AMS的通知等。</p>
<p>推荐<a href="https://www.websequencediagrams.com/" target="_blank" rel="external">在线时序图网站:https://www.websequencediagrams.com/</a></p>
<p>参考链接</p>
<p><a href="http://blog.csdn.net/luoshengyang/article/details/6689748" target="_blank" rel="external">Android应用程序启动过程源代码分析</a><br><a href="http://www.bubuko.com/infodetail-278447.html" target="_blank" rel="external">图解Activity启动流程</a></p>
<p><img src="http://www.splitshire.com/wp-content/uploads/2016/02/SplitShire-2404.jpg" alt="欣赏"></p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Launcher也是一个应用，点击一个图标，开启一个新的应用。分析从点击图标到新的应用的Activity执行onCreate的执行流程.注意学习Binder机制<br> <img src="https://dn-coding-net-production-pp.qbox.me/29c9c5db-a084-4667-863e-912e07a27a73.png" alt="图片"> </p>]]>
    
    </summary>
    
      <category term="Activity" scheme="http://hanks.xyz/tags/Activity/"/>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="Framework" scheme="http://hanks.xyz/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android性能优化]]></title>
    <link href="http://hanks.xyz/2016/01/20/android-optimization/"/>
    <id>http://hanks.xyz/2016/01/20/android-optimization/</id>
    <published>2016-01-20T13:51:09.000Z</published>
    <updated>2016-01-31T01:54:17.000Z</updated>
    <content type="html"><![CDATA[<p>布局优化,绘制优化,内存泄露优化,响应速度优化,listview优化,bitmap优化,多线程优化<br>Traceview,Systrace,Oprofile,Heap Viewer,Memory Monitor,Allocation Tracker<br><a id="more"></a><br><a href="http://bugly.qq.com/blog/?p=166" target="_blank" rel="external">量化流畅度</a></p>
<h3 id="布局优化">布局优化</h3><p>include 重用布局<br>merge 减少层级嵌套<br>viewstub 延迟加载<br>space 空白占位</p>
<h3 id="绘制优化">绘制优化</h3><p>(onMeasure,onLayout,onDraw)<br>ondraw<br>过度绘制</p>
<h3 id="内存泄露优化">内存泄露优化</h3><p><a href="http://yq.aliyun.com/articles/3009" target="_blank" rel="external">Android 内存泄漏总结</a><br>分析工具MAT, leakcanary<br>静态变量引用<br>单例模式<br>属性动画</p>
<h3 id="响应速度优化">响应速度优化</h3><p>anr, 分析/data/anr下的traces.txt<br>启动时间，冷启动</p>
<h3 id="listview优化">listview优化</h3><p>复用view<br>viewholder<br>滑动状态不同加载策略<br>getview不要耗时操作<br>大的item分成小的item<br>创建多种viewtype<br>item的布局嵌套<br>item子view的大小<br>RecyclerView</p>
<h3 id="避免OOM">避免OOM</h3><h4 id="减小对象的内存占用">减小对象的内存占用</h4><p>使用更加轻量的数据结构 ArrayMap/SparseArray<br>避免在Android里面使用Enum<br>减小Bitmap对象的内存占用<br>使用更小的图片 jpg/png/webp</p>
<h4 id="内存对象的重复利用">内存对象的重复利用</h4><p>对象池 LRU策略<br>复用系统自带的资源<br>注意在ListView/GridView等出现大量重复子组件的视图里面对ConvertView的复用<br>Bitmap对象的复用 inBitmap<br>避免在onDraw方法里面执行对象的创建<br>StringBuilder</p>
<h3 id="bitmap优化">bitmap优化</h3><p>重新采样 缩放<br>模糊：缩小，模糊，放大</p>
<h3 id="多线程优化">多线程优化</h3><p>Java内存模型<br>线程池</p>
<p><img src="http://www.splitshire.com/wp-content/uploads/2015/03/SplitShire-5390-1800x1200-970x500.jpg" alt=""></p>
<p>参考链接:</p>
<p><a href="http://hukai.me/android-performance-oom/" target="_blank" rel="external">http://hukai.me/android-performance-oom/</a><br><a href="https://github.com/Piasy/notes/blob/master/Android-Java%2FAndroidPerformancePatterns.md" target="_blank" rel="external">https://github.com/Piasy/notes/blob/master/Android-Java%2FAndroidPerformancePatterns.md</a><br><a href="http://www.trinea.cn/android/performance/" target="_blank" rel="external">http://www.trinea.cn/android/performance/</a><br><a href="http://blog.csdn.net/yanbober/article/details/48394201" target="_blank" rel="external">http://blog.csdn.net/yanbober/article/details/48394201</a><br><a href="http://www.kancloud.cn/kancloud/android-performance/53233" target="_blank" rel="external">http://www.kancloud.cn/kancloud/android-performance/53233</a></p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>布局优化,绘制优化,内存泄露优化,响应速度优化,listview优化,bitmap优化,多线程优化<br>Traceview,Systrace,Oprofile,Heap Viewer,Memory Monitor,Allocation Tracker<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="性能优化" scheme="http://hanks.xyz/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Framework分析-Application的onCreate]]></title>
    <link href="http://hanks.xyz/2016/01/14/framework-application/"/>
    <id>http://hanks.xyz/2016/01/14/framework-application/</id>
    <published>2016-01-14T09:49:35.000Z</published>
    <updated>2016-01-14T14:36:45.000Z</updated>
    <content type="html"><![CDATA[<p>ActivityThread并不是一个Thread，而是一个单纯的Java类，查看一下 <code>ActivityThread</code> 的源码<code>final class ActivityThread</code>，并没有继承Thread或者实现Runnable接口，<code>ActivityThread</code> 其中包含 <code>main</code> 方法,程序的入口地方，怎么看出来的呢? 我们开发过程中总会出现程序异常信息，细心看一下log，查看最下面的几行，最终问题出在 <code>android.app.ActivityThread.main</code>.<br><a id="more"></a></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.Activity</span><span class="class">.performCreate</span>(Activity<span class="class">.java</span>:<span class="number">5133</span>)</span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.Instrumentation</span><span class="class">.callActivityOnCreate</span>(Instrumentation<span class="class">.java</span>:<span class="number">1087</span>)</span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="class">.performLaunchActivity</span>(ActivityThread<span class="class">.java</span>:<span class="number">2175</span>)</span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="class">.handleLaunchActivity</span>(ActivityThread<span class="class">.java</span>:<span class="number">2261</span>) </span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="class">.access</span>$<span class="number">600</span>(ActivityThread<span class="class">.java</span>:<span class="number">141</span>) </span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="variable">$H</span>.<span class="function"><span class="title">handleMessage</span><span class="params">(ActivityThread.java:<span class="number">1256</span>)</span></span> </span><br><span class="line">AndroidRuntime:     at android<span class="class">.os</span><span class="class">.Handler</span><span class="class">.dispatchMessage</span>(Handler<span class="class">.java</span>:<span class="number">99</span>) </span><br><span class="line">AndroidRuntime:     at android<span class="class">.os</span><span class="class">.Looper</span><span class="class">.loop</span>(Looper<span class="class">.java</span>:<span class="number">137</span>) </span><br><span class="line">AndroidRuntime:     at android<span class="class">.app</span><span class="class">.ActivityThread</span><span class="class">.main</span>(ActivityThread<span class="class">.java</span>:<span class="number">5103</span>) </span><br><span class="line">AndroidRuntime:     at java<span class="class">.lang</span><span class="class">.reflect</span><span class="class">.Method</span><span class="class">.invokeNative</span>(Native Method) </span><br><span class="line">AndroidRuntime:     at java<span class="class">.lang</span><span class="class">.reflect</span><span class="class">.Method</span><span class="class">.invoke</span>(Method<span class="class">.java</span>:<span class="number">525</span>) </span><br><span class="line">AndroidRuntime:     at com<span class="class">.android</span><span class="class">.internal</span><span class="class">.os</span><span class="class">.ZygoteInit</span><span class="variable">$MethodAndArgsCaller</span>.<span class="function"><span class="title">run</span><span class="params">(ZygoteInit.java:<span class="number">737</span>)</span></span> </span><br><span class="line">AndroidRuntime:     at com<span class="class">.android</span><span class="class">.internal</span><span class="class">.os</span><span class="class">.ZygoteInit</span><span class="class">.main</span>(ZygoteInit<span class="class">.java</span>:<span class="number">553</span>) </span><br><span class="line">AndroidRuntime:     at dalvik<span class="class">.system</span><span class="class">.NativeStart</span><span class="class">.main</span>(Native Method)</span><br></pre></td></tr></table></figure>
<p>介绍相关几个类的结构:<br><code>class ApplicationThread extends ApplicationThreadNative</code><br><code>abstract class ApplicationThreadNative extends Binder implements IApplicationThread</code><br>ApplicationThread (Binder)对象。其中 Binder负责接收远程AMS的 IPC调用，接收到调用<br>后，则通过Handler把消息发送到消息队列，UI主线程会异步地从消息队列中取出消息并执行相应操作，比如 start、stop、pause 等。</p>
<p><code>class ActivityManagerService extends ActivityManagerNative</code><br><code>abstract class ActivityManagerNative extends Binder implements IActivityManager</code></p>
<p>从 <code>ActivityThread</code> 的<code>main()</code>方法开始分析，</p>
<h3 id="ActivityThread的main方法">ActivityThread的main方法</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    Looper.prepareMainLooper(); <span class="comment">//主线程的Looper对象</span></span><br><span class="line"></span><br><span class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread(); <span class="comment">// 创建ActivityThread</span></span><br><span class="line">    thread.attach(<span class="keyword">false</span>); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        sMainThreadHandler = thread.getHandler(); <span class="comment">//主线程的Handler</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AsyncTask.init();</span><br><span class="line"></span><br><span class="line">    Looper.<span class="built_in">loop</span>(); <span class="comment">//消息循环</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ActivityThread的attach方法">ActivityThread的attach方法</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!system) &#123;</span><br><span class="line">        <span class="comment">// ActivityManagerService(AMS)的代理对象，用于跟AMS通信, IActivityManager具体实现类是 ActivityManagerProxy</span></span><br><span class="line">        <span class="comment">// ActivityManagerNative.getDefault返回ActivityManagerService的远程接口，即ActivityManagerProxy接口</span></span><br><span class="line">            IActivityManager mgr = ActivityManagerNative.getDefault(); </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mgr.attachApplication(mAppThread);<span class="comment">//  mAppThread是ActivityThread的成员变量， mAppThread = new ApplicationThread();</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                <span class="comment">// Ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>attach最终调用了<code>ActivityManagerService</code>的远程接口<code>ActivityManagerProxy</code>的<code>attachApplication</code>函数，传入的参数是mAppThread(ApplicationThread类型的Binder对象)，它的作用是用来进行进程间通信的.</p>
<h3 id="ActivityManagerProxy的attachApplication">ActivityManagerProxy的attachApplication</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">public</span> void attachApplication(<span class="type">IApplicationThread</span> app) throws <span class="type">RemoteException</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Parcel</span> <span class="typedef"><span class="keyword">data</span> = <span class="type">Parcel</span>.obtain<span class="container">()</span>;</span></span><br><span class="line">    <span class="type">Parcel</span> reply = <span class="type">Parcel</span>.obtain();</span><br><span class="line">    <span class="typedef"><span class="keyword">data</span>.writeInterfaceToken<span class="container">(<span class="type">IActivityManager</span>.<span class="title">descriptor</span>)</span>;</span></span><br><span class="line">    <span class="typedef"><span class="keyword">data</span>.writeStrongBinder<span class="container">(<span class="title">app</span>.<span class="title">asBinder</span>()</span>); //将app对象加到<span class="keyword">data</span></span></span><br><span class="line">    mRemote.transact(<span class="type">ATTACH_APPLICATION_TRANSACTION</span>, <span class="typedef"><span class="keyword">data</span>, reply, 0);</span></span><br><span class="line">    //跟服务端通信，transact的最后一个参数的含义是执行<span class="type">IPC</span>调用的模式，<span class="number">0</span> 表示服务端执行完指定服务后会返回一定的数据；<span class="number">1</span> 表示不返回任何数据</span><br><span class="line">    reply.readException();</span><br><span class="line">    <span class="typedef"><span class="keyword">data</span>.recycle<span class="container">()</span>;</span></span><br><span class="line">    reply.recycle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出<code>attachApplication</code>方法其实就是进行远程通信，向服务端发起一个 <code>ATTACH_APPLICATION_TRANSACTION</code>的消息.</p>
<p>补充一下Android中的 <strong>Binder机制</strong>，来自《Android内核剖析》</p>
<p>Binder,英文的意思是别针、回形针。我们经常用别针把两张纸“别” 在一起，而在Andmid中，<br>Binder用于完成进程间通信（IPC)，即把多个进程“别”在一起。比如，普通应用程序可以调用音乐播放服务提供的播放、暂停、停止等功能。Binder工作在Linux层面，属于一个驱动，只是这个驱动不需要硬件，或者说其操作的硬件是基于一小段内存。从线程的角度来讲，Binder驱动代码运行在内核态，客户端程序调用Binder是通过系统调用完成的.<br>Binder是一种架构，这种架构提供了服务端接口、Binder驱动、客户端接口三个模块。<br>首先来看服务端。一个Binder服务端实际上就是一个Binder类的对象，该对象一旦创建，内部就<br>启动一个隐藏线程。该线程接下来会接收Binder驱动发送的消息，收到消息后，会执行到Binder对象中的onTransact()函数，并按照该函数的参数执行不同的服务代码。因此，要实现一个Binder服务，就必须重载onTransact()方法。<br>可以想象，重载 onTransact()函数的主要内容是把onTransact()函数的参数转换为服务函数的参数，而onTransact()函数的参数来源是客户端调用transact()函数时输入的，因此，如果transact()有固定格式的输入，那么 onTransact()就会有固定格式的输出。<br>下面再看Binder驱动。任意一个服务端Binder对象被创建时，同时会在Binder驱动中创建一个<br>mRemote对象，该对象的类型也是Binder类。客户端要访问远程服务时，都是通过mRemote对象。<br><img src="http://file.bmob.cn/M02/47/A0/oYYBAFaXVu6AJgBvAAKJVqakFkA353.png" alt="Binder机制"></p>
<p>根据上面的表示，客户端调用 <code>transact()</code>函数之后，服务端会在 <code>onTransact()</code>中收到客户端传递的消息, 那么在ActivityManagerService的<code>onTransact()</code>方法中查找：</p>
<h3 id="ActivityManagerService的onTransact">ActivityManagerService的onTransact</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span><br><span class="line">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTransact</span><span class="params">(code, data, reply, flags)</span></span>; <span class="comment">//其实是调用父类ActivityManagerNative的onTransact处理</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="comment">// The activity manager only throws security exceptions, so let's</span></span><br><span class="line">        <span class="comment">// log all others.</span></span><br><span class="line">        <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> SecurityException)) &#123;</span><br><span class="line">            Slog.wtf(TAG, <span class="string">"Activity Manager Crash"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ActivityManagerNative的onTransact">ActivityManagerNative的onTransact</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span><br><span class="line">            <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">case</span> ATTACH_APPLICATION_TRANSACTION: &#123;</span><br><span class="line">            data.enforceInterface(IActivityManager.descriptor);</span><br><span class="line">            IApplicationThread app = ApplicationThreadNative.asInterface(</span><br><span class="line">                    data.readStrongBinder()); <span class="comment">// 取出客户端传过来的 app</span></span><br><span class="line">            <span class="keyword">if</span> (app != <span class="keyword">null</span>) &#123;</span><br><span class="line">                attachApplication(app); <span class="comment">//调用 ActivityManagerService的attachApplication 方法</span></span><br><span class="line">            &#125;</span><br><span class="line">            reply.writeNoException();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ActivityManagerService的attachApplication">ActivityManagerService的attachApplication</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">           attachApplicationLocked(thread, callingPid); <span class="comment">//调用 attachApplicationLocked</span></span><br><span class="line">           Binder.restoreCallingIdentity(origId);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ActivityManagerService的attachApplicationLocked">ActivityManagerService的attachApplicationLocked</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private final boolean attachApplicationLocked(IApplicationThread thread,</span><br><span class="line">            int pid) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">         </span><br><span class="line">        thread.bindApplication(processName, appInfo, providers,</span><br><span class="line">                <span class="keyword">app</span>.instrumentationClass, profileFile, profileFd, profileAutoStop,</span><br><span class="line">                <span class="keyword">app</span>.instrumentationArguments, <span class="keyword">app</span>.instrumentationWatcher,</span><br><span class="line">                <span class="keyword">app</span>.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,</span><br><span class="line">                isRestrictedBackupMode || !normalMode, <span class="keyword">app</span>.persistent,</span><br><span class="line">                new Configuration(mConfiguration), <span class="keyword">app</span>.compat, getCommonServicesLocked(),</span><br><span class="line">                mCoreSettingsObserver.getCoreSettingsLocked());   <span class="comment">//  </span></span><br><span class="line">        updateLruProcessLocked(<span class="keyword">app</span>, false, null);</span><br><span class="line">        <span class="keyword">app</span>.lastRequestedGc = <span class="keyword">app</span>.lastLowMemory = SystemClock.uptimeMillis();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终调用客户端的ApplicationThread的bindApplication</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> public final void bindApplication(<span class="type">String</span> processName,</span><br><span class="line">                <span class="type">ApplicationInfo</span> appInfo, <span class="type">List</span>&lt;<span class="type">ProviderInfo</span>&gt; providers,</span><br><span class="line">                <span class="type">ComponentName</span> instrumentationName, <span class="type">String</span> profileFile,</span><br><span class="line">                <span class="type">ParcelFileDescriptor</span> profileFd, boolean autoStopProfiler,</span><br><span class="line">                <span class="type">Bundle</span> instrumentationArgs, <span class="type">IInstrumentationWatcher</span> instrumentationWatcher,</span><br><span class="line">                <span class="type">IUiAutomationConnection</span> instrumentationUiConnection, int debugMode,</span><br><span class="line">                boolean enableOpenGlTrace, boolean isRestrictedBackupMode, boolean persistent,</span><br><span class="line">                <span class="type">Configuration</span> config, <span class="type">CompatibilityInfo</span> compatInfo, <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">IBinder</span>&gt; services,</span><br><span class="line">                <span class="type">Bundle</span> coreSettings) &#123;</span><br><span class="line"></span><br><span class="line">		    <span class="keyword">if</span> (services != null) &#123;</span><br><span class="line">		        // <span class="type">Setup</span> the service cache <span class="keyword">in</span> the <span class="type">ServiceManager</span></span><br><span class="line">		        <span class="type">ServiceManager</span>.initServiceCache(services);</span><br><span class="line">		    &#125;</span><br><span class="line"></span><br><span class="line">		    setCoreSettings(coreSettings);</span><br><span class="line"></span><br><span class="line">		    <span class="type">AppBindData</span> <span class="typedef"><span class="keyword">data</span> = new <span class="type">AppBindData</span><span class="container">()</span>;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.processName = processName;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.appInfo = appInfo;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.providers = providers;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.instrumentationName = instrumentationName;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.instrumentationArgs = instrumentationArgs;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.instrumentationWatcher = instrumentationWatcher;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.instrumentationUiAutomationConnection = instrumentationUiConnection;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.debugMode = debugMode;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.enableOpenGlTrace = enableOpenGlTrace;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.restrictedBackupMode = isRestrictedBackupMode;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.persistent = persistent;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.config = config;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.compatInfo = compatInfo;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.initProfileFile = profileFile;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.initProfileFd = profileFd;</span></span><br><span class="line">		    <span class="typedef"><span class="keyword">data</span>.initAutoStopProfiler = false;</span></span><br><span class="line">		    sendMessage(<span class="type">H</span>.<span class="type">BIND_APPLICATION</span>, <span class="typedef"><span class="keyword">data</span>); // <span class="type">Handler</span>发送消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回调到mH（Handler）的handleMessage方法，然后调用了 <code>handleBindApplication(data)</code> 方法</p>
<h3 id="ApplicationThread的handleBindApplication">ApplicationThread的handleBindApplication</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void handleBindApplication(AppBindData data) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Allow disk access during application and provider setup. This could</span></span><br><span class="line">        <span class="comment">// block processing ordered broadcasts, but later processing would</span></span><br><span class="line">        <span class="comment">// probably end up doing the same disk access.</span></span><br><span class="line">        <span class="keyword">final</span> StrictMode.ThreadPolicy savedPolicy = StrictMode.allowThreadDiskWrites();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// If the app is being launched for full backup or restore, bring it up in</span></span><br><span class="line">            <span class="comment">// a restricted environment with the base application class.</span></span><br><span class="line">            Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>); <span class="comment">//创建一个Application对象</span></span><br><span class="line">            mInitialApplication = app;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// don't bring up providers in restricted mode; they may depend on the</span></span><br><span class="line">            <span class="comment">// app's custom Application class</span></span><br><span class="line">            <span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</span><br><span class="line">                <span class="keyword">List</span>&lt;ProviderInfo&gt; providers = data.providers;</span><br><span class="line">                <span class="keyword">if</span> (providers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    installContentProviders(app, providers);</span><br><span class="line">                    <span class="comment">// For process that contains content providers, we want to</span></span><br><span class="line">                    <span class="comment">// ensure that the JIT is enabled "at some point".</span></span><br><span class="line">                    mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Do this after providers, since instrumentation tests generally start their</span></span><br><span class="line">            <span class="comment">// test thread at this point, and we don't want that racing.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mInstrumentation.onCreate(data.instrumentationArgs);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Exception thrown in onCreate() of "</span></span><br><span class="line">                    + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mInstrumentation.callApplicationOnCreate(app);<span class="comment">// app是Application对象</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                        <span class="string">"Unable to create application "</span> + app.getClass().getName()</span><br><span class="line">                        + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            StrictMode.setThreadPolicy(savedPolicy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>先是创建Application</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public Application makeApplication(boolean forceDefaultAppClass,</span><br><span class="line">        Instrumentation instrumentation) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mApplication != null) &#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Application <span class="keyword">app</span> = null;</span><br><span class="line"></span><br><span class="line">    String appClass = mApplicationInfo.className;</span><br><span class="line">    <span class="keyword">if</span> (forceDefaultAppClass || (appClass == null)) &#123;</span><br><span class="line">        appClass = <span class="string">"android.app.Application"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        java.lang.ClassLoader <span class="keyword">cl</span> = getClassLoader();</span><br><span class="line">        ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, this);</span><br><span class="line">        <span class="keyword">app</span> = mActivityThread.mInstrumentation.newApplication(</span><br><span class="line">                <span class="keyword">cl</span>, appClass, appContext); <span class="comment">// 由instrument通过反射创建Application</span></span><br><span class="line">        appContext.setOuterContext(<span class="keyword">app</span>);</span><br><span class="line">    &#125; catch (Exception <span class="keyword">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mActivityThread.mInstrumentation.onException(<span class="keyword">app</span>, <span class="keyword">e</span>)) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                <span class="string">"Unable to instantiate application "</span> + appClass</span><br><span class="line">                + <span class="string">": "</span> + <span class="keyword">e</span>.<span class="keyword">toString</span>(), <span class="keyword">e</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mActivityThread.mAllApplications.add(<span class="keyword">app</span>);</span><br><span class="line">    mApplication = <span class="keyword">app</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (instrumentation != null) &#123; <span class="comment">//应为上面传过来的参数为null，所以不会执行下面的代码</span></span><br><span class="line">        try &#123;</span><br><span class="line">            instrumentation.callApplicationOnCreate(<span class="keyword">app</span>);</span><br><span class="line">        &#125; catch (Exception <span class="keyword">e</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!instrumentation.onException(<span class="keyword">app</span>, <span class="keyword">e</span>)) &#123;</span><br><span class="line">                throw new RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to create application "</span> + <span class="keyword">app</span>.getClass().getName()</span><br><span class="line">                    + <span class="string">": "</span> + <span class="keyword">e</span>.<span class="keyword">toString</span>(), <span class="keyword">e</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">app</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终于找到了Application的onCreate方法<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Perform</span> calling <span class="keyword">of</span> the application's &#123;@link <span class="type">Application</span><span class="comment">#onCreate&#125;</span></span><br><span class="line"> * <span class="keyword">method</span>.  <span class="type">The</span> default implementation simply calls through to that <span class="keyword">method</span>.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;<span class="type">Note</span>: <span class="type">This</span> <span class="keyword">method</span> will be called immediately after &#123;@link <span class="comment">#onCreate(Bundle)&#125;.</span></span><br><span class="line"> * <span class="type">Often</span> instrumentation tests start their test thread <span class="keyword">in</span> onCreate(); you</span><br><span class="line"> * need to be careful <span class="keyword">of</span> races between these.  (<span class="type">Well</span> between it <span class="keyword">and</span></span><br><span class="line"> * everything <span class="keyword">else</span>, but <span class="keyword">let</span>'s start here.)</span><br><span class="line"> *</span><br><span class="line"> * @param app <span class="type">The</span> application being created.</span><br><span class="line"> */</span><br><span class="line">public <span class="type">void</span> callApplicationOnCreate(<span class="type">Application</span> app) &#123;</span><br><span class="line">    app.onCreate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>概括一下就是，在<code>ActivityThread</code>的<code>main</code>方法中，通过IPC机制和远端进行通信，服务端<code>ActivityManagerService</code>收到消息发送消息通知客户端，客户端的 <code>ApplicationThread</code>收到消息后，通过<code>Handler</code>发送消息，调用<code>handleBindApplication</code>方法，最终是通过 <code>mInstrumentation.callApplicationOnCreate(app)</code>回调到<code>Application</code>的<code>onCreate</code>方法.</p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>ActivityThread并不是一个Thread，而是一个单纯的Java类，查看一下 <code>ActivityThread</code> 的源码<code>final class ActivityThread</code>，并没有继承Thread或者实现Runnable接口，<code>ActivityThread</code> 其中包含 <code>main</code> 方法,程序的入口地方，怎么看出来的呢? 我们开发过程中总会出现程序异常信息，细心看一下log，查看最下面的几行，最终问题出在 <code>android.app.ActivityThread.main</code>.<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="Framework" scheme="http://hanks.xyz/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 鬼畜表情包app]]></title>
    <link href="http://hanks.xyz/2016/01/11/react-native-23333/"/>
    <id>http://hanks.xyz/2016/01/11/react-native-23333/</id>
    <published>2016-01-11T03:33:17.000Z</published>
    <updated>2016-01-11T03:55:16.000Z</updated>
    <content type="html"><![CDATA[<p>QQ群,微信群，各种大神，各种表情，每到半夜，斗图大会，八仙过海，各显神通，良辰日天齐上阵。不服，下载鬼畜表情，参加到战斗中，无奈啊，app做的不是太方便，想起抓包把图片一下都下载下来，想起最近看到RN，正好练练手。<br><a id="more"></a></p>
<h3 id="单文件批量抓取">单文件批量抓取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Sample React Native App</span><br><span class="line"> * https://github.com/hanks-zyh/233333</span><br><span class="line"> */</span></span><br><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AwesomeProject = React.createClass(&#123;</span><br><span class="line">  getImage: <span class="function"><span class="keyword">function</span>(<span class="params">tid</span>)</span>&#123;</span><br><span class="line">    fetch(<span class="string">'https://face.ersansan.cn/collection/'</span>+tid)</span><br><span class="line">    .then((respose) =&gt; respose.text())</span><br><span class="line">    .then((responseText) =&gt; &#123;</span><br><span class="line">          <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + responseText +     <span class="string">')'</span>);</span><br><span class="line">          <span class="keyword">var</span> list = result.picList;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> item = list[i];</span><br><span class="line">            <span class="built_in">console</span>.warn(item.link);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(error);</span><br><span class="line">    &#125;).done;</span><br><span class="line">  &#125;,</span><br><span class="line">  getSunCollection: <span class="function"><span class="keyword">function</span>(<span class="params">tid</span>)</span>&#123;</span><br><span class="line">    fetch(<span class="string">'https://face.ersansan.cn/collection/'</span>+tid)</span><br><span class="line">    .then((respose) =&gt; respose.text())</span><br><span class="line">    .then((responseText) =&gt; &#123;</span><br><span class="line">          <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + responseText +     <span class="string">')'</span>);</span><br><span class="line">          <span class="keyword">var</span> list = result.subcollection;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> item = list[i];</span><br><span class="line">            <span class="keyword">this</span>.getImage(item.tid);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(error);</span><br><span class="line">    &#125;).done;</span><br><span class="line">  &#125;,</span><br><span class="line">  _downLoad: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      fetch(<span class="string">'https://face.ersansan.cn/collection'</span>)</span><br><span class="line">      .then((respose) =&gt; respose.text())</span><br><span class="line">      .then((responseText) =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + responseText +     <span class="string">')'</span>);</span><br><span class="line">            <span class="keyword">var</span> list = result.List;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">              <span class="keyword">var</span> item = list[i];</span><br><span class="line">              <span class="built_in">console</span>.warn(item.tid+item.title);</span><br><span class="line">              <span class="keyword">this</span>.getSunCollection(item.tid);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch((error) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(error);</span><br><span class="line">      &#125;).done;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;&#123;</span> <span class="attribute">flex:1</span>, <span class="attribute">alignItems:</span>'<span class="attribute">center</span>', <span class="attribute">justifyContent:</span>'<span class="attribute">center</span>'&#125;&#125;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">TouchableOpacity</span> <span class="attribute">style</span>=<span class="value">&#123;&#123;</span></span><br><span class="line">           <span class="attribute">backgroundColor:</span>"##<span class="attribute">234234</span>", <span class="attribute">height:50</span>, <span class="attribute">width:80</span>,  <span class="attribute">alignItems:</span>'<span class="attribute">center</span>',  <span class="attribute">justifyContent:</span>'<span class="attribute">center</span>'</span><br><span class="line">         &#125;&#125; <span class="attribute">onPress</span>=<span class="value">&#123;</span> <span class="attribute">this._downLoad</span> &#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;&#123;</span> <span class="attribute">fontSize:20</span>,  <span class="attribute">color:</span>'<span class="attribute">white</span>' &#125;&#125;&gt;</span>下载<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="title">TouchableOpacity</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</span><br></pre></td></tr></table></figure>
<h3 id="仿app界面">仿app界面</h3><p><img src="https://github.com/hanks-zyh/233333/raw/master/2333.gif" alt="2333"></p>
<p><strong>首页：</strong><br>外部<code>ScrollView</code><br>顶部图片+ListView<br>给ListView每个item的title设置点击进入专题</p>
<p><strong>专题：</strong><br>简单的<code>ListView</code><br>每个item设置点击进入图片列表</p>
<p><strong>图片列表</strong><br>还是ListView，每个<code>ListView</code>的item分3个图片<br>根据D<code>imensions</code>计算宽高<br>不够3个的有几个显示几个<br>每个图片设置点击打开浏览器下载 <code>IntentAndroid.openURL(url);</code></p>
<p>源码：<a href="https://github.com/hanks-zyh/233333" target="_blank" rel="external">https://github.com/hanks-zyh/233333</a></p>
<blockquote>
<p>文章来自： <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>QQ群,微信群，各种大神，各种表情，每到半夜，斗图大会，八仙过海，各显神通，良辰日天齐上阵。不服，下载鬼畜表情，参加到战斗中，无奈啊，app做的不是太方便，想起抓包把图片一下都下载下来，想起最近看到RN，正好练练手。<br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 动手实现热修复]]></title>
    <link href="http://hanks.xyz/2016/01/05/android-myhotfix/"/>
    <id>http://hanks.xyz/2016/01/05/android-myhotfix/</id>
    <published>2016-01-04T17:46:39.000Z</published>
    <updated>2016-01-05T14:48:03.000Z</updated>
    <content type="html"><![CDATA[<p>有了前面文章的理论支持,下面动手自己写一下热修复.<br><a id="more"></a></p>
<h2 id="创建工程">创建工程</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── main                                                                                      </span><br><span class="line">│   ├── AndroidManifest<span class="class">.xml</span>                                                                   </span><br><span class="line">│   ├── java                                                                                  </span><br><span class="line">│   │   └── xyz                                                                               </span><br><span class="line">│   │       └── hanks                                                                         </span><br><span class="line">│   │           └── fix                                                                       </span><br><span class="line">│   │               ├── BugClass<span class="class">.java</span>                                                         </span><br><span class="line">│   │               ├── FixApplication<span class="class">.java</span>                                                   </span><br><span class="line">│   │               └── MainActivity.java</span><br></pre></td></tr></table></figure>
<p>通过Android Studio创建一个工程. <code>BugClass</code> 类是需要修复的类, <code>MainActivity</code>是主Activity, <code>FixApplication</code>是自定义的Application. 初始的MainActivity如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.text);</span><br><span class="line">        textView.setText(<span class="keyword">new</span> BugClass().showToast(<span class="string">"Happy new year"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by hanks on 16-1-2.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BugClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showToast</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在运行程序,界面的文本显示成文字 <strong>Happy new year</strong>,<code>MainActivity</code>类会被加上 <strong>CLASS_ISPREVERIFIED</strong> 标志,因为BugClass 和 MainActivity 都属于同一个dex. 如果现在直接加载补丁包中的 <strong>BugClass</strong> 类,那么就会出现 <code>Class ref in pre-verified class resolved to unexpected implementation</code> 错误.</p>
<h2 id="引用hack-dex,防止类加上CLASS_ISPREVERIFIED">引用hack.dex,防止类加上CLASS_ISPREVERIFIED</h2><p>因为我们要修复<code>BugClass</code>类,而调用是在<code>MainActivity</code>中,也就是说,当打上补丁包之后,<code>MainActivity</code>调用的<code>BugClass</code>将会是补丁包中的<code>BugClass</code>(也就是来自于其他的dex),那么我就就需要防止<code>MainActivity</code>被加上 <strong>CLASS_ISPREVERIFIED</strong> 标志. 那么怎么防止呢? 需要在<code>MainActivity</code>中引用别的dex(hack.dex)中的一个类.那么代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.text);</span><br><span class="line">        System.out.print(Hack.class); <span class="comment">// 引用 hack.dex中的Hack类</span></span><br><span class="line">        textView.setText(<span class="keyword">new</span> BugClass().showToast(<span class="string">"Happy new year"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码只是简单的引用了一下 <code>Hack.class</code>, 这样程序运行起来就不会把<code>MainActivity</code>加上 <strong>CLASS_ISPREVERIFIED</strong>. 注意现在的代码是编译不过的. 引用我们的程序中没有<code>Hack.class</code>, 要想编译通过,那么我们就得有 <code>Hack.class</code>, 于是新建一个library, 然后app这个依赖与这个library, 但是注意不要使用 <strong>compile</strong>, 使用 <strong>provided</strong> 关键字,这样标示这个library这是提供引用,并不被编译到apk中(不在MainActivity的dex中).这样就解决了编译问题.<br>现在运行起来程序还是有错误, 因为<code>MainActivity</code>引用了<code>Hack.class</code>,虽然编译通过了,但是实际上是没有这个类的,所以这个时候就需要在调用Hack这个类之前,先动态加载进来.</p>
<h2 id="先加载Hack-dex,保证引用不会出错">先加载Hack.dex,保证引用不会出错</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 加载</span><br><span class="line"> * Created by hanks on 16-1-3.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             PathClassLoader pathClassLoader = (PathClassLoader) getClassLoader();</span><br><span class="line">             String hackFilePath = Environment.getExternalStorageDirectory().getAbsolutePath() +<span class="string">"/hack.dex"</span>; <span class="comment">// hack.dex的路径</span></span><br><span class="line">             Object a = combineArray(getDexElements(getPathList(pathClassLoader)), <span class="comment">// 原有的 dex</span></span><br><span class="line">                     getDexElements(getPathList(<span class="keyword">new</span> DexClassLoader(hackFilePath, getDir(<span class="string">"dex"</span>, <span class="number">0</span>).getAbsolutePath(), hackFilePath, getClassLoader()))));  <span class="comment">// 将新的dex插入到dexElements数组的前面</span></span><br><span class="line">             Object a2 = getPathList(pathClassLoader);</span><br><span class="line">             setField(a2, a2.getClass(), <span class="string">"dexElements"</span>, a); <span class="comment">// 通过反射修改dexElements数组</span></span><br><span class="line">             pathClassLoader.loadClass(<span class="string">"xyz.hanks.Hack"</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样程序就正常运行起来了.</p>
<h2 id="生成补丁包">生成补丁包</h2><p>现在<code>BugClass</code>出现bug了. 修改一下, 然后将修改后的<code>BugClass</code>导出jar包,然后通过<code>dx</code>工具转换成dex,就叫做 <strong>patch.dex</strong> 吧.然后放入到sdcard目录下.</p>
<p>现在可以加载补丁包了.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 加载</span><br><span class="line"> * Created by hanks on 16-1-3.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             PathClassLoader pathClassLoader = (PathClassLoader) getClassLoader();</span><br><span class="line">             String hackFilePath = Environment.getExternalStorageDirectory().getAbsolutePath() +<span class="string">"/hack.dex"</span>; <span class="comment">// hack.dex的路径</span></span><br><span class="line">             Object a = combineArray(getDexElements(getPathList(pathClassLoader)), <span class="comment">// 原有的 dex</span></span><br><span class="line">                     getDexElements(getPathList(<span class="keyword">new</span> DexClassLoader(hackFilePath, getDir(<span class="string">"dex"</span>, <span class="number">0</span>).getAbsolutePath(), hackFilePath, getClassLoader()))));  <span class="comment">// 将新的dex插入到dexElements数组的前面</span></span><br><span class="line">             Object a2 = getPathList(pathClassLoader);</span><br><span class="line">             setField(a2, a2.getClass(), <span class="string">"dexElements"</span>, a); <span class="comment">// 通过反射修改dexElements数组</span></span><br><span class="line">             pathClassLoader.loadClass(<span class="string">"xyz.hanks.Hack"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             <span class="comment">// 加载补丁包</span></span><br><span class="line">             String patchFilePath = Environment.getExternalStorageDirectory()</span><br><span class="line">                     .getAbsolutePath() + <span class="string">"/patch.dex"</span>;</span><br><span class="line">             Object a3 = combineArray(getDexElements(getPathList(pathClassLoader)), <span class="comment">// 原有的 dex</span></span><br><span class="line">                     getDexElements(getPathList(<span class="keyword">new</span> DexClassLoader(patchFilePath, getDir(<span class="string">"dex"</span>, <span class="number">0</span>).getAbsolutePath(), patchFilePath, getClassLoader()))));</span><br><span class="line">             Object a4 = getPathList(pathClassLoader);</span><br><span class="line">             setField(a4, a4.getClass(), <span class="string">"dexElements"</span>, a3);</span><br><span class="line">             pathClassLoader.loadClass(<span class="string">"xyz.hanks.fix.BugClass"</span>);</span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次修改BugClass类之后,生产补丁,放到sdcard,重启程序即可成效(不一定重启程序,目的是要在bugclass被第一次加载之前,加载补丁中的bugclass)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有了前面文章的理论支持,下面动手自己写一下热修复.<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="热修复" scheme="http://hanks.xyz/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 热修复总结]]></title>
    <link href="http://hanks.xyz/2016/01/03/android-hotfix/"/>
    <id>http://hanks.xyz/2016/01/03/android-hotfix/</id>
    <published>2016-01-03T15:27:05.000Z</published>
    <updated>2016-01-05T14:48:03.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间热修复这个词非常火,当时只是大体看了一下,今天抽空好好看了一下具体原理.<br><a id="more"></a></p>
<h3 id="什么是热修复?">什么是热修复?</h3><p>简单的说就是用户不用重新下载一个新的apk安装,而是直接下载一个补丁包,通过补丁来替换一些出现bug的类, 当然下载补丁的过程用户一般是感觉不到的,表面上看是直接修复了bug.</p>
<h3 id="原理">原理</h3><p>类似与插件开发,关于插件开发原理,看这篇<a href="http://www.alloyteam.com/2014/04/android-cha-jian-yuan-li-pou-xi/" target="_blank" rel="external">Android插件原理剖析</a>,其中介绍了一下java中的类加载器和android中的类加载器. 热修复就是利用android中的 <code>DexClassLoader</code>类加载器,动态加载补丁dex,替换有bug的类</p>
<p>已有的热修复解决方案:</p>
<ul>
<li><a href="https://github.com/dodola/HotFix" target="_blank" rel="external">https://github.com/dodola/HotFix</a></li>
<li><a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">https://github.com/jasonross/Nuwa</a></li>
<li><a href="https://github.com/bunnyblue/DroidFix" target="_blank" rel="external">https://github.com/bunnyblue/DroidFix</a></li>
</ul>
<p>这几个库的原理都类似,具体描述可以查看这篇<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a>.</p>
<h3 id="切入点">切入点</h3><p>想修复方法? 方法在哪里? 方法都包含在类中. 类在哪里? 类被包含在dex中,而</p>
<p>最根本的来源是下面这段代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Element element : dexElements) &#123;</span><br><span class="line">        DexFile dex = element.dexFile;</span><br><span class="line">        <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class clazz = dex.loadClassBinaryName(name, definingContext);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出呢，BaseDexClassLoader中有个<code>pathList</code>对象，pathList中包含一个DexFile的集合<code>dexElements</code>，而对于类加载呢，就是遍历这个集合，通过DexFile去寻找,一个ClassLoader可以包含多个dex文件，每个dex文件是一个Element，多个dex文件排列成一个有序的数组dexElements，当找类的时候，会按顺序遍历dex文件，然后从当前遍历的dex文件中找类，如果找类则返回，如果找不到从下一个dex文件继续查找。</p>
<p>简单来说: 首先找到<code>pathList</code>对象,然后通过反射改变<code>dexElements</code>数组.<br>但是遇到的以下问题: 也就是类被打上了 <strong>CLASS_ISPREVERIFIED</strong> 标志</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.<span class="type">IllegalAccessError</span>: <span class="type">Class</span> <span class="keyword">ref</span> <span class="keyword">in</span> pre-verified class resolved to unexpected implementation</span><br></pre></td></tr></table></figure>
<p>根据QQ空间的文章, 这个错误是因为虚拟机加载类的时候, 当一个类中的直接方法(Direct Method)来自与同一个dex中,那么这个类就会被加上 <strong>CLASS_ISPREVERIFIED</strong> 标志, 再次通过类加载器加载会出现上面的错误.</p>
<p><strong>解决方案</strong>: 在需要加载的类中,引用一个别的dex中的类.这样这个类就不会被加上 CLASS_ISPREVERIFIED 标志了,然后就可以再次加载了. 上面一个开源库的普遍方案就是在类的 <strong>默认构造方法</strong> 上面添加一个其他dex的引用.</p>
<h3 id="总结">总结</h3><p>于是总体步骤如下:</p>
<ol>
<li>可能出现bug的类中,引用一下别的dex中的类.</li>
<li>因为1中引用了别的dex,需要先将别的dex加载进来.</li>
<li>现在可以替换bug的类了,加载补丁,通过反射将补丁中的dex放到<code>pathList</code>对象的<code>dexElements</code>数组的前面,完成打补丁.</li>
</ol>
<p>其中两个注意点:</p>
<ul>
<li>防止类被加上 CLASS_ISPREVERIFIED 标志(通过修改类默认构造方法)</li>
<li>生成补丁dex(通过dx工具)</li>
</ul>
<p>参考文章:</p>
<ul>
<li><a href="http://developer.android.com/reference/dalvik/system/DexClassLoader.html" target="_blank" rel="external">DexClassLoader</a></li>
<li><a href="http://developer.android.com/reference/dalvik/system/PathClassLoader.html" target="_blank" rel="external">PathClassLoader</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a></li>
<li><a href="http://www.alloyteam.com/2014/04/android-cha-jian-yuan-li-pou-xi/" target="_blank" rel="external">Android插件原理剖析</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/49883661" target="_blank" rel="external">Android 热补丁动态修复框架小结</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间热修复这个词非常火,当时只是大体看了一下,今天抽空好好看了一下具体原理.<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
      <category term="热修复" scheme="http://hanks.xyz/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015回顾@hanks]]></title>
    <link href="http://hanks.xyz/2015/12/31/2015/"/>
    <id>http://hanks.xyz/2015/12/31/2015/</id>
    <published>2015-12-31T12:41:17.000Z</published>
    <updated>2015-12-31T13:20:52.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>2015的最后一天，我选择了辞职</p>
</blockquote>
<h1 id="去年">去年</h1><p>2014年的这个时候,开始出去找工作,到现在差不多工作一年了, 期间也经历了远程,国外团队,创业团队,知识面拓展了不少(但是应该还是有很多不知道),最大的感触就是面试,找工作真的不是想象的那样,今天看到知乎上面的一个提问<a href="https://www.zhihu.com/question/38982159" target="_blank" rel="external">我用个假简历去面试android的结果为什么会这样？</a>,这就是现实而已.<br><a id="more"></a></p>
<h1 id="关于辞职">关于辞职</h1><p><strong>一方面</strong>,是想好好休息几天，身体真的变差了，上个楼都累的不行,前几天突发牙痛，昨天发现脸都肿了，今天去看牙，感觉医院好坑，进入二话不说先消费，然后说了一大堆丁不懂得的名词,最后告诉我治疗费用要好几万，愣是把我吓跑了，回去的路上脸上的肿逐渐消了，(´･ω･`) 难道是吓好了吗？<br><strong>另一方面</strong>，原来团队里就我一个Android开发,想寻找更适合的开发团队,说实话技术方面Android技能多大进步，还停留在应用开发等级(想尝试一些高级的),一些底层的源码方面也没好好深究一下,我一直在努力学习一些好的架构,看了一些设计模式的东西.我认为想要开发出高质量的应用,一方面是性能,另一方面是代码质量, 当然还有UI(脸啊),不过自己没有能力去设计界面,只能努力去实现一些效果.不过自己学了很多新的知识，年初的时候知道了<code>Rx</code>, <code>mvp</code>,<code>mvvm</code>(最先接触的是<code>Robobinding</code>,后来 Android 出了 <code>Data Binding</code>),<code>kotlin语言</code>… 之后就在项目中去实践，设计风格上,自从Material Design出来之后, 然后就迷上了,自己开发的应用就尽量去遵循其原则,后来Android出来support design的库,用于实现5.0以下的Material Design风格.</p>
<h1 id="Android之外">Android之外</h1><p> Android之外的，首先把python稍微入门了，把开发环境切成了Ubuntu,了解一些Linux方 面的东西，在学校的时候最后悔的就是没有多学点服务器方面的知识，巩固了一下git,vim等工具，复习了前端一些知识css，js，了解了一下sass,less,感觉挺好玩的，也能提高开发效率,最近学了react-native的东西，自己也写了一些简单的<a href="http://hanks.xyz/">例子</a>，react-native的做出的app实现也还是原生组件，所以性能应该没啥问题，学习上面也没啥难度(可能还没遇到坑),很快应该就能入门.开源方面, 也学习去利用开源力量,同时贡献一点自己的力量.</p>
<h1 id="关于买电脑">关于买电脑</h1><p>2015买了两台电脑,一台普通笔记本,一台Macbook pro,我个人的建议是学生档毕竟经济能力有限,不是必须Mac(比如开发Android完全可以不用)的话不要买mac,我的普通笔记本5000元左右,16G内存,256SSD, i7八核2.5GHz,安装Ubuntu,然后window虚拟机,mac虚拟机,Android虚拟机同开毫无压力,同时各个系统软件都可使用,性价比要比mac本高的多,不过质量应该是不行,我打算也就用个一两年,质量的话还是得Macbook</p>
<p>总之,2016应该还是学学学,不学怎么进步呢.</p>
<p>2015读书列表(大部分时间都是在上下班的公交上看的,而且有的没看完):</p>
<ul>
<li>Linux命令行大全</li>
<li>Flask Web开发：基于Python的Web应用开发实战</li>
<li>Bootstrap实战</li>
<li>android内核剖析</li>
<li>android群英转</li>
<li>android开发艺术探究</li>
<li>android源码设计模式解析与实战</li>
</ul>
<p>另外,如果你有好工作,欢迎推荐!  :point_right:我的<a href="https://github.com/hanks-zyh" target="_blank" rel="external">github</a></p>
<p>跨年演唱会开始了,准备迎接2016吧!</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>2015的最后一天，我选择了辞职</p>
</blockquote>
<h1 id="去年">去年</h1><p>2014年的这个时候,开始出去找工作,到现在差不多工作一年了, 期间也经历了远程,国外团队,创业团队,知识面拓展了不少(但是应该还是有很多不知道),最大的感触就是面试,找工作真的不是想象的那样,今天看到知乎上面的一个提问<a href="https://www.zhihu.com/question/38982159">我用个假简历去面试android的结果为什么会这样？</a>,这就是现实而已.<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 下雪动画]]></title>
    <link href="http://hanks.xyz/2015/12/30/snowfall/"/>
    <id>http://hanks.xyz/2015/12/30/snowfall/</id>
    <published>2015-12-30T09:58:41.000Z</published>
    <updated>2015-12-30T10:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 :  <a href="https://blog.stylingandroid.com/snowfall/" target="_blank" rel="external">Snowfall</a></li>
<li>原文作者 : <a href="https://blog.stylingandroid.com" target="_blank" rel="external">Styling Android</a></li>
<li>译文出自 : <a href="http://hanks.xyz">hanks.xyz</a></li>
<li>译者 : <a href="https://github.com/hanks-zyh" target="_blank" rel="external">hanks-zyh</a></li>
<li>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a></li>
<li>状态 : 完成</li>
</ul>
</blockquote>
<p>这本是一个愉快的季节，但是，呵呵，胡扯！ 因为这篇文章的发表时间是2015年的圣诞节，所以我们需要给Style Android用制造出一些节日气氛。感谢读者们，因为有的读者可能没有在庆祝圣诞，有些读者可能还是6月份。<br>那么问题来了，我们应该做些什么来让这个节日像是真正的节日呢？ 最简单的方法：带上圣诞帽，拍个照。</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/6c6bdb8b-fcd8-4869-80d0-1b3f849810d8.png" alt="tree"></p>
<a id="more"></a>
<p>看我多么欢乐！<br>但是我感觉这个图片有些单调，所以来弄点雪花，让雪花飘下来。<br>我们可以添加一个包含这个图片的自定义View</p>
<p><strong>res/layout/activity_main.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">  <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">  <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">tools:context</span>=<span class="value">"com.stylingandroid.snowfall.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_centerInParent</span>=<span class="value">"true"</span></span><br><span class="line">    <span class="attribute">android:contentDescription</span>=<span class="value">"@null"</span></span><br><span class="line">    <span class="attribute">android:scaleType</span>=<span class="value">"fitCenter"</span></span><br><span class="line">    <span class="attribute">android:src</span>=<span class="value">"@drawable/tree"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">com.stylingandroid.snowfall.SnowView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_alignBottom</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignEnd</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignLeft</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignRight</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignStart</span>=<span class="value">"@id/image"</span></span><br><span class="line">    <span class="attribute">android:layout_alignTop</span>=<span class="value">"@id/image"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>尽管可以通过继承ImageView来实现自定义View，但我决定将 <code>SnowView</code> 和图片分开，这样每次刷新动画的时候不用重新渲染图片，只刷新 <code>SnowView</code> 就行了</p>
<p><code>SnowView.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_SNOWFLAKES = <span class="number">150</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DELAY = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SnowFlake[] snowflakes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        paint.setColor(Color.WHITE);</span><br><span class="line">        paint.setStyle(Paint.Style.FILL);</span><br><span class="line">        snowflakes = <span class="keyword">new</span> SnowFlake[NUM_SNOWFLAKES];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_SNOWFLAKES; i++) &#123;</span><br><span class="line">            snowflakes[i] = SnowFlake.create(width, height, paint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">if</span> (w != oldw || h != oldh) &#123;</span><br><span class="line">            resize(w, h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">for</span> (SnowFlake snowFlake : snowflakes) &#123;</span><br><span class="line">            snowFlake.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">        getHandler().postDelayed(runnable, DELAY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码很简单。 在View 的 <code>onSizeChanged</code> 方法中初始化 150 个随机位置的雪花对象。 在<code>onDraw</code>方法中画出雪花，然后每隔一段时间就刷新一下位置，需要注意的是<code>onDraw</code>没有立即去执行，而是通过创建一个runnable，这样不会阻塞UI线程<br>雪花下落是基于Samuel Arbesman的<a href="http://www.openprocessing.org/sketch/84771" target="_blank" rel="external">雪花下落的算法</a>。</p>
<p><strong>SnowFlake.java</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">class SnowFlake &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> ANGE_RANGE = <span class="number">0.1</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> HALF_ANGLE_RANGE = ANGE_RANGE / <span class="number">2</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> <span class="constant">HALF_PI</span> = (<span class="built_in">float</span>) Math.<span class="constant">PI</span> / <span class="number">2</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> ANGLE_SEED = <span class="number">25</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> ANGLE_DIVISOR = <span class="number">10000</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> INCREMENT_LOWER = <span class="number">2</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> INCREMENT_UPPER = <span class="number">4</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> FLAKE_SIZE_LOWER = <span class="number">7</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> FLAKE_SIZE_UPPER = <span class="number">20</span>f;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random <span class="built_in">random</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Point position;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> angle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">float</span> increment;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">float</span> flakeSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Paint paint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SnowFlake create(<span class="built_in">int</span> <span class="variable">width</span>, <span class="built_in">int</span> <span class="variable">height</span>, Paint paint) &#123;</span><br><span class="line">        Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="built_in">int</span> x = <span class="built_in">random</span>.getRandom(<span class="variable">width</span>);</span><br><span class="line">        <span class="built_in">int</span> y = <span class="built_in">random</span>.getRandom(<span class="variable">height</span>);</span><br><span class="line">        Point position = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">        <span class="built_in">float</span> angle = <span class="built_in">random</span>.getRandom(ANGLE_SEED) / ANGLE_SEED * ANGE_RANGE + <span class="constant">HALF_PI</span> - HALF_ANGLE_RANGE;</span><br><span class="line">        <span class="built_in">float</span> increment = <span class="built_in">random</span>.getRandom(INCREMENT_LOWER, INCREMENT_UPPER);</span><br><span class="line">        <span class="built_in">float</span> flakeSize = <span class="built_in">random</span>.getRandom(FLAKE_SIZE_LOWER, FLAKE_SIZE_UPPER);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SnowFlake(<span class="built_in">random</span>, position, angle, increment, flakeSize, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SnowFlake(Random <span class="built_in">random</span>, Point position, <span class="built_in">float</span> angle, <span class="built_in">float</span> increment, <span class="built_in">float</span> flakeSize, Paint paint) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">random</span> = <span class="built_in">random</span>;</span><br><span class="line">        <span class="keyword">this</span>.position = position;</span><br><span class="line">        <span class="keyword">this</span>.angle = angle;</span><br><span class="line">        <span class="keyword">this</span>.increment = increment;</span><br><span class="line">        <span class="keyword">this</span>.flakeSize = flakeSize;</span><br><span class="line">        <span class="keyword">this</span>.paint = paint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> move(<span class="built_in">int</span> <span class="variable">width</span>, <span class="built_in">int</span> <span class="variable">height</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> x = position.x + (increment * Math.<span class="built_in">cos</span>(angle));</span><br><span class="line">        <span class="keyword">double</span> y = position.y + (increment * Math.<span class="built_in">sin</span>(angle));</span><br><span class="line"></span><br><span class="line">        angle += <span class="built_in">random</span>.getRandom(-ANGLE_SEED, ANGLE_SEED) / ANGLE_DIVISOR;</span><br><span class="line"></span><br><span class="line">        position.<span class="built_in">set</span>((<span class="built_in">int</span>) x, (<span class="built_in">int</span>) y);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isInside(<span class="variable">width</span>, <span class="variable">height</span>)) &#123;</span><br><span class="line">            reset(<span class="variable">width</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> isInside(<span class="built_in">int</span> <span class="variable">width</span>, <span class="built_in">int</span> <span class="variable">height</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> x = position.x;</span><br><span class="line">        <span class="built_in">int</span> y = position.y;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= -flakeSize - <span class="number">1</span> &amp;&amp; x + flakeSize &lt;= <span class="variable">width</span> &amp;&amp; y &gt;= -flakeSize - <span class="number">1</span> &amp;&amp; y - flakeSize &lt; <span class="variable">height</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> reset(<span class="built_in">int</span> <span class="variable">width</span>) &#123;</span><br><span class="line">        position.x = <span class="built_in">random</span>.getRandom(<span class="variable">width</span>);</span><br><span class="line">        position.y = (<span class="built_in">int</span>) (-flakeSize - <span class="number">1</span>);</span><br><span class="line">        angle = <span class="built_in">random</span>.getRandom(ANGLE_SEED) / ANGLE_SEED * ANGE_RANGE + <span class="constant">HALF_PI</span> - HALF_ANGLE_RANGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span>(Canvas canvas) &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="variable">width</span> = canvas.getWidth();</span><br><span class="line">        <span class="built_in">int</span> <span class="variable">height</span> = canvas.getHeight();</span><br><span class="line">        move(<span class="variable">width</span>, <span class="variable">height</span>);</span><br><span class="line">        canvas.drawCircle(position.x, position.y, flakeSize, paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>初始化的时候，雪花的随机位置就已经确定了。这是为了确保雪花不会每次画的时候都在开始的位置。当一个雪花的位置超出Canvas的边界之后，它就会被重新放到顶部的一个随机位置，这样就可以循环利用了，避免了重复创建。<br>当画雪花下落的每一帧的时候，我们首先给<code>SnowFlake</code>添加一个随机数来改变位置，这样可以模仿有小风吹雪花。<br>在把雪花画到canvas上之前，我们会进行边界检查(如果需要的话，超出边界的就重新放到顶部)</p>
<p>我一直在不断的调整里面的常量来改变下雪的效果直到我感觉满意为止。</p>
<p>最终效果如下：</p>
<iframe width="880" height="660" src="https://www.youtube.com/embed/pk66ZziTfOw" frameborder="0" allowfullscreen></iframe>

<p>当然了，在canvas里面塞这么多东西不是一个好的方法（有其他更好的 比如OpenGL），但是，我现在要去吃火鸡了，所以可能要等下一次了。</p>
<p><a href="https://github.com/StylingAndroid/Snowfall" target="_blank" rel="external">源文件地址</a></p>
<p>版权声明：<br>Part of this code is based upon “Snowfall” by Sam Arbesman, licensed under Creative Commons Attribution-Share Alike 3.0 and GNU GPL license.<br>Work: <a href="http://openprocessing.org/visuals/?visualID=" target="_blank" rel="external">http://openprocessing.org/visuals/?visualID=</a> 84771<br>License:<br><a href="http://creativecommons.org/licenses/by-sa/3.0/" target="_blank" rel="external">http://creativecommons.org/licenses/by-sa/3.0/</a><br><a href="http://creativecommons.org/licenses/GPL/2.0/" target="_blank" rel="external">http://creativecommons.org/licenses/GPL/2.0/</a></p>
<p>© 2015, Mark Allison. All rights reserved. This article originally appeared on Styling Android.</p>
<p>Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons 3.0 Attribution License</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 :  <a href="https://blog.stylingandroid.com/snowfall/">Snowfall</a></li>
<li>原文作者 : <a href="https://blog.stylingandroid.com">Styling Android</a></li>
<li>译文出自 : <a href="http://hanks.xyz">hanks.xyz</a></li>
<li>译者 : <a href="https://github.com/hanks-zyh">hanks-zyh</a></li>
<li>校对者: <a href="https://github.com/desmond1121">desmond1121</a></li>
<li>状态 : 完成</li>
</ul>
</blockquote>
<p>这本是一个愉快的季节，但是，呵呵，胡扯！ 因为这篇文章的发表时间是2015年的圣诞节，所以我们需要给Style Android用制造出一些节日气氛。感谢读者们，因为有的读者可能没有在庆祝圣诞，有些读者可能还是6月份。<br>那么问题来了，我们应该做些什么来让这个节日像是真正的节日呢？ 最简单的方法：带上圣诞帽，拍个照。</p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/6c6bdb8b-fcd8-4869-80d0-1b3f849810d8.png" alt="tree"></p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://hanks.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 知乎日报首页]]></title>
    <link href="http://hanks.xyz/2015/12/30/react-zhihu/"/>
    <id>http://hanks.xyz/2015/12/30/react-zhihu/</id>
    <published>2015-12-30T09:27:03.000Z</published>
    <updated>2015-12-30T09:46:10.000Z</updated>
    <content type="html"><![CDATA[<p>主要练习从服务器获取数据,然后展示到界面,最外层用ScrollView包裹起来顶部是一个ViewPager,api使用的知乎日报的api,在这里只使用了一个<a href="http://news-at.zhihu.com/api/4/themes" target="_blank" rel="external">主题日报列表查看</a>的api,获取到json数据之后,显示到ListView中.最终效果如下:</p>
<p><img src="http://file.bmob.cn/M02/2B/29/oYYBAFaDpFCAC55oAEUmvcxK3O0625.gif" alt="zhihu"></p>
<a id="more"></a>
<h3 id="获取网络数据">获取网络数据</h3><p>根据前面的文章<a href="http://hanks.xyz/2015/12/23/react-network/">React-Native 网络请求</a>使用fetch方法来获取</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">_getData</span>:function()&#123;</span><br><span class="line">  var datas = [];</span><br><span class="line">  fetch(<span class="string">'http://news-at.zhihu.com/api/4/themes'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.text())</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(responseText)</span> =&gt;</span> &#123;</span><br><span class="line">    var  jsonObject = eval(<span class="string">"("</span> + responseText + <span class="string">")"</span>);</span><br><span class="line">    var array = jsonObject.others;</span><br><span class="line">    <span class="keyword">for</span>(var i=<span class="number">0</span>; i&lt;array.length; i++ )&#123;</span><br><span class="line">      datas.push(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      <span class="attribute">dataSource</span>: <span class="keyword">this</span>.state.dataSource.cloneWithRows(datas),</span><br><span class="line">      <span class="attribute">isLoading</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(error);</span><br><span class="line">  &#125;).done;</span><br><span class="line">  <span class="keyword">return</span> datas;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>上面的代码是从服务器获取的json数据, 使用 <strong>eval</strong> 方法将json字符串转为 javascript对象, 注意json字符串需要用 <strong>括号()</strong> 包裹起来,然后给listviwe设置数据<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">this</span><span class="class">.setState</span>(<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">dataSource</span>:<span class="value"> this.state.dataSource.<span class="function">cloneWithRows</span>(datas),</span><br><span class="line">  isLoading: false</span><br><span class="line"></span></span></span>&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="ListView用来展示">ListView用来展示</h3><p>代码比较简单,结合前面学习的很容易理解<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="constant">ListView</span></span><br><span class="line">  dataSource=&#123;this.state.dataSource&#125;</span><br><span class="line">  renderRow=&#123;(rowData) =&gt;</span><br><span class="line">          &lt;<span class="constant">TouchableOpacity</span>&gt;</span><br><span class="line">              &lt;<span class="constant">View</span> style=<span class="expansion">&#123;&#123; <span class="symbol">flexDirection:</span><span class="string">'row'</span> &#125;&#125;</span>&gt;</span><br><span class="line">                &lt;<span class="constant">Image</span> source=<span class="expansion">&#123;&#123; <span class="symbol">uri:</span> rowData.thumbnail &#125;&#125;</span> style=<span class="expansion">&#123;&#123;<span class="symbol">height:</span><span class="number">60</span>,<span class="symbol">width:</span><span class="number">80</span>, <span class="symbol">margin:</span><span class="number">12</span>,&#125;&#125;</span> /&gt;</span><br><span class="line">                &lt;<span class="constant">View</span>&gt;</span><br><span class="line">                  &lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123; <span class="symbol">marginTop:</span><span class="number">12</span>, <span class="symbol">color:</span><span class="string">'#234'</span>, <span class="symbol">fontSize:</span><span class="number">16</span>,&#125;&#125;</span>&gt;&#123;rowData.name&#125;&lt;<span class="regexp">/Text&gt;</span><br><span class="line">                  &lt;Text style=&#123;&#123; marginTop:12, color:'#888', fontSize:12,&#125;&#125;&gt;&#123;rowData.description&#125;&lt;/</span><span class="constant">Text</span>&gt;</span><br><span class="line">                  &lt;<span class="constant">View</span> style=<span class="expansion">&#123;&#123;<span class="symbol">height:</span><span class="number">1.5</span>,  <span class="symbol">backgroundColor:</span><span class="string">'#222'</span> &#125;&#125;</span>&gt;&lt;<span class="regexp">/View&gt;</span><br><span class="line">                &lt;/</span><span class="constant">View</span>&gt;</span><br><span class="line">              &lt;<span class="regexp">/View&gt;</span><br><span class="line">            &lt;/</span><span class="constant">TouchableOpacity</span>&gt;</span><br><span class="line">            &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>完整代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="keyword">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">  Navigator,</span><br><span class="line">  ScrollView,</span><br><span class="line">  ViewPager,</span><br><span class="line">  BackAndroid,</span><br><span class="line">  ViewPagerAndroid,</span><br><span class="line">  Image,</span><br><span class="line">  ListView,</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BackAndroid.addEventListener(<span class="string">'hardwareBackPress'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(_navigator == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(_navigator.getCurrentRoutes().length === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _navigator.pop();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _navigator ;</span><br><span class="line"><span class="keyword">var</span> PAGES = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> imageUrls = [</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i3/TB1vkdZKFXXXXaAXVXXXXXXXXXX_!!0-item_pic.jpg'</span>,</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i5/TB1CGo3KXXXXXb6XpXXYXGcGpXX_M2.SS2'</span>,</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i1/TB1jkifKVXXXXXhXXXXXXXXXXXX_!!0-item_pic.jpg'</span>,</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i2/TB1GCgoKVXXXXcaXpXXXXXXXXXX_!!0-item_pic.jpg'</span>,</span><br><span class="line">  <span class="string">'https://img.alicdn.com/bao/uploaded/i1/TB1D6A7KVXXXXaQXVXXXXXXXXXX_!!0-item_pic.jpg'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> NewsView = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _navigator = this.props.navigator;</span><br><span class="line">    <span class="keyword">var</span> ds = <span class="keyword">new</span> ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      dataSource: ds.cloneWithRows(this._getData()),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  _getData:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> datas = [];</span><br><span class="line">    fetch(<span class="string">'http://news-at.zhihu.com/api/4/themes'</span>)</span><br><span class="line">    .then((response) =&gt; response.text())</span><br><span class="line">    .then((responseText) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span>  jsonObject = <span class="keyword">eval</span>(<span class="string">"("</span> + responseText + <span class="string">")"</span>);</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">array</span> = jsonObject.others;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">array</span>.length; i++ )&#123;</span><br><span class="line">        datas.push(<span class="keyword">array</span>[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        dataSource: this.state.dataSource.cloneWithRows(datas),</span><br><span class="line">        isLoading: <span class="keyword">false</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>((error) =&gt; &#123;</span><br><span class="line">      console.warn(error);</span><br><span class="line">    &#125;).done;</span><br><span class="line">    <span class="keyword">return</span> datas;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pages = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; PAGES; i++) &#123;</span><br><span class="line">      pages.push(</span><br><span class="line">        &lt;View key=&#123;i&#125; style=&#123;&#123; flex: <span class="number">1</span>, alignItems: <span class="string">'stretch'</span> &#125;&#125; collapsable=&#123;<span class="keyword">false</span>&#125;&gt;</span><br><span class="line">          &lt;Image</span><br><span class="line">            style=&#123;&#123; flex:<span class="number">1</span> &#125;&#125;</span><br><span class="line">            source=&#123;&#123;uri: imageUrls[i%PAGES] &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">       &lt;/View&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ScrollView&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;ViewPagerAndroid</span><br><span class="line">            style=&#123;styles.viewPager&#125;</span><br><span class="line">            initialPage=&#123;<span class="number">0</span>&#125;</span><br><span class="line">            onPageScroll=&#123;this.onPageScroll&#125;</span><br><span class="line">            onPageSelected=&#123;this.onPageSelected&#125;</span><br><span class="line">            ref=&#123;viewPager =&gt; &#123; this.viewPager = viewPager; &#125;&#125;&gt;</span><br><span class="line">            &#123;pages&#125;</span><br><span class="line">          &lt;/ViewPagerAndroid&gt;</span><br><span class="line">          &lt;ListView</span><br><span class="line">            dataSource=&#123;this.state.dataSource&#125;</span><br><span class="line">            renderRow=&#123;(rowData) =&gt;</span><br><span class="line">                    &lt;TouchableOpacity&gt;</span><br><span class="line">                        &lt;View style=&#123;&#123; flexDirection:<span class="string">'row'</span> &#125;&#125;&gt;</span><br><span class="line">                          &lt;Image source=&#123;&#123; uri: rowData.thumbnail &#125;&#125; style=&#123;&#123;height:<span class="number">60</span>,width:<span class="number">80</span>, margin:<span class="number">12</span>,&#125;&#125; /&gt;</span><br><span class="line">                          &lt;View&gt;</span><br><span class="line">                            &lt;Text style=&#123;&#123; marginTop:<span class="number">12</span>, color:<span class="string">'#234'</span>, fontSize:<span class="number">16</span>,&#125;&#125;&gt;&#123;rowData.name&#125;&lt;/Text&gt;</span><br><span class="line">                            &lt;Text style=&#123;&#123; marginTop:<span class="number">12</span>, color:<span class="string">'#888'</span>, fontSize:<span class="number">12</span>,&#125;&#125;&gt;&#123;rowData.description&#125;&lt;/Text&gt;</span><br><span class="line">                            &lt;View style=&#123;&#123;height:<span class="number">1.5</span>,  backgroundColor:<span class="string">'#222'</span> &#125;&#125;&gt;&lt;/View&gt;</span><br><span class="line">                          &lt;/View&gt;</span><br><span class="line">                        &lt;/View&gt;</span><br><span class="line">                      &lt;/TouchableOpacity&gt;</span><br><span class="line">                      &#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/ScrollView&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  viewPager:&#123;</span><br><span class="line">    height : <span class="number">200</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = NewsView;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/hanks-zyh/Hrn" target="_blank" rel="external">github地址</a></p>
<blockquote>
<p>文章来自: <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要练习从服务器获取数据,然后展示到界面,最外层用ScrollView包裹起来顶部是一个ViewPager,api使用的知乎日报的api,在这里只使用了一个<a href="http://news-at.zhihu.com/api/4/themes">主题日报列表查看</a>的api,获取到json数据之后,显示到ListView中.最终效果如下:</p>
<p><img src="http://file.bmob.cn/M02/2B/29/oYYBAFaDpFCAC55oAEUmvcxK3O0625.gif" alt="zhihu"></p>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 练习用户信息界面]]></title>
    <link href="http://hanks.xyz/2015/12/29/react-userinfo/"/>
    <id>http://hanks.xyz/2015/12/29/react-userinfo/</id>
    <published>2015-12-29T10:35:03.000Z</published>
    <updated>2016-01-03T16:01:32.000Z</updated>
    <content type="html"><![CDATA[<p>wuwu. 好饿~~<br>直接看效果图L:</p>
<p><img src="http://file.bmob.cn/M02/28/D4/oYYBAFaCYr6AIlcRAALzw1jyVMk263.png" alt="用户信息界面"><br><a id="more"></a></p>
<p>代码:</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><br><span class="line">'use strict'</span><br><span class="line"></span><br><span class="line">var React = require('react-native');</span><br><span class="line">var &#123;</span><br><span class="line">  Image,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  ViewPagerAndroid,</span><br><span class="line">  BackAndroid,</span><br><span class="line">  ScrollView,</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BackAndroid.addEventListener('hardwareBackPress', function() &#123;</span><br><span class="line">  if(_navigator == null)&#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  if(_navigator.getCurrentRoutes().length === 1)&#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  _navigator.pop();</span><br><span class="line">  return true;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var _navigator ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var UserInfoView = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  getInitialState: function()&#123;</span><br><span class="line">    _navigator = this.props.navigator;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: function()&#123;</span><br><span class="line">    return (</span><br><span class="line">        <span class="tag">&lt;<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/img</span>3<span class="variable">.</span>100<span class="variable">bt.com</span><span class="end-block">/upload</span><span class="end-block">/ttq</span>/20120908/1347116765019<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;  <span class="variable">height</span>:230 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">flex</span>:1,<span class="variable">alignItems</span>:'<span class="variable">center</span>', <span class="variable">backgroundColor</span>: '<span class="variable">rgba</span>(0, 0, 0, 0<span class="variable">.</span>6)' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/img</span>3<span class="variable">.</span>100<span class="variable">bt.com</span><span class="end-block">/upload</span><span class="end-block">/ttq</span>/20120908/1347116765019<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">              <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">width</span>:60,  <span class="variable">height</span>:60, <span class="variable">marginTop</span>:30,<span class="variable">borderRadius</span>:40, <span class="variable">borderWidth</span>:2,<span class="variable">borderColor</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0' &#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:18, <span class="variable">color</span>:'<span class="begin-block">#CECFCE</span>', <span class="variable">margin</span>:4 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span> Jassell Charm<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:14, <span class="variable">color</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Product Design<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">width</span>:140, <span class="variable">marginLeft</span>:40, <span class="variable">marginTop</span>:30, <span class="variable">marginRight</span>:40, <span class="variable">flexDirection</span>:'<span class="variable">row</span>', <span class="variable">justifyContent</span>:'<span class="variable">space-between</span>', <span class="variable">alignItems</span>:'<span class="variable">center</span>',   &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:12, <span class="variable">color</span>:'<span class="begin-block">#CECFCE</span>',&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>420<span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#3<span class="variable">A</span>87<span class="variable">DF</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span> Foller<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:12, <span class="variable">color</span>:'<span class="begin-block">#CECFCE</span>',&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>247<span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#3<span class="variable">A</span>87<span class="variable">DF</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span> Foller<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">Image</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;</span><br><span class="line">          <span class="variable">backgroundColor</span>: '#191919',</span><br><span class="line">          <span class="variable">height</span>: 56,</span><br><span class="line">          <span class="variable">justifyContent</span>:'<span class="variable">space-between</span>',</span><br><span class="line">          <span class="variable">flexDirection</span>:'<span class="variable">row</span>',</span><br><span class="line">          <span class="variable">alignItems</span>:'<span class="variable">center</span>',</span><br><span class="line">        &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0', <span class="variable">fontSize</span>:16, <span class="variable">flex</span>:1,<span class="variable">alignSelf</span>:'<span class="variable">center</span>' ,<span class="variable">textAlign</span>: '<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>FEED<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#545351', <span class="variable">fontSize</span>:16, <span class="variable">flex</span>:1,<span class="variable">alignSelf</span>:'<span class="variable">center</span>',<span class="variable">textAlign</span>: '<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>PHOTOS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">backgroundColor</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0', <span class="variable">height</span>:2, <span class="variable">width</span>:140&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">flexDirection</span>:'<span class="variable">row</span>', <span class="variable">height</span>:80,   &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">width</span>:80, <span class="variable">alignItems</span>:'<span class="variable">center</span>' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:8, <span class="variable">width</span>:8, <span class="variable">borderColor</span>:'<span class="begin-block">#F</span>1<span class="variable">A</span>289',  <span class="variable">borderWidth</span>:2, <span class="variable">borderRadius</span>:4, <span class="variable">marginTop</span>:40 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">flex</span>:1, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">justifyContent</span>:'<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#8<span class="variable">B</span>8<span class="variable">B</span>8<span class="variable">A</span>', <span class="variable">fontSize</span>:14, <span class="variable">marginBottom</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Checked in at <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">color</span>:'<span class="begin-block">#C</span>251<span class="variable">C</span>0'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Nola Bar and Restaurant<span class="tag">&lt;/<span class="title">Text</span>&gt;</span><span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'<span class="begin-block">#CBCCCB</span>', <span class="variable">fontSize</span>:12, <span class="variable">marginTop</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>WENNESDAY 7:00 PM<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">flexDirection</span>:'<span class="variable">row</span>', <span class="variable">height</span>:80,   &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">width</span>:80, <span class="variable">alignItems</span>:'<span class="variable">center</span>' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:40, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>', <span class="variable">overflow</span>:'<span class="variable">visible</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:8, <span class="variable">width</span>:8, <span class="variable">borderColor</span>:'#54<span class="variable">D</span>8<span class="variable">E</span>7',  <span class="variable">borderWidth</span>:2, <span class="variable">borderRadius</span>:4, &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">flex</span>:1, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>', <span class="variable">overflow</span>:'<span class="variable">visible</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">justifyContent</span>:'<span class="variable">center</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#8<span class="variable">B</span>8<span class="variable">B</span>8<span class="variable">A</span>', <span class="variable">fontSize</span>:14, <span class="variable">marginBottom</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Hey team let us meet at 7:00 PM <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'<span class="begin-block">#CBCCCB</span>', <span class="variable">fontSize</span>:12, <span class="variable">marginTop</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>WENNESDAY 6:32 PM<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">flexDirection</span>:'<span class="variable">row</span>', &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>  <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">width</span>:80, <span class="variable">alignItems</span>:'<span class="variable">center</span>' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:40, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>', <span class="variable">overflow</span>:'<span class="variable">visible</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:8, <span class="variable">width</span>:8, <span class="variable">borderColor</span>:'#3885<span class="variable">E</span>5',  <span class="variable">borderWidth</span>:2, <span class="variable">borderRadius</span>:4,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">height</span>:200, <span class="variable">width</span>:2, <span class="variable">backgroundColor</span>:'<span class="begin-block">#DBDBDB</span>', <span class="variable">overflow</span>:'<span class="variable">visible</span>'&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'#8<span class="variable">B</span>8<span class="variable">B</span>8<span class="variable">A</span>', <span class="variable">fontSize</span>:14, <span class="variable">marginBottom</span>:5, <span class="variable">marginTop</span>:20, &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>Bonfite with friends <span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">color</span>:'<span class="begin-block">#CBCCCB</span>', <span class="variable">fontSize</span>:12, <span class="variable">marginTop</span>:5,  &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>DEC 5<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>:'<span class="variable">http</span>:/<span class="end-block">/img.hb.aicdn.com</span>/735<span class="variable">afbfa</span>2<span class="variable">f</span>6<span class="variable">fee</span>24<span class="variable">d</span>1<span class="variable">a</span>10<span class="variable">e</span>1<span class="variable">a</span>22<span class="variable">b</span>23<span class="variable">c</span>63<span class="variable">f</span>707<span class="variable">ea</span>82281<span class="variable">c</span>3<span class="variable">-ajdFRe</span>_<span class="variable">fw</span>658' &#125;&#125;</span><span class="xml"><span class="tag"> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">borderRadius</span>:5, <span class="variable">height</span>:120, <span class="variable">width</span>:200&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = UserInfoView;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/hanks-zyh/Hrn" target="_blank" rel="external">github地址</a></p>
<blockquote>
<p>文章来自: <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>wuwu. 好饿~~<br>直接看效果图L:</p>
<p><img src="http://file.bmob.cn/M02/28/D4/oYYBAFaCYr6AIlcRAALzw1jyVMk263.png" alt="用户信息界面"><br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 实现Android中的ViewPager]]></title>
    <link href="http://hanks.xyz/2015/12/29/react-viewpager/"/>
    <id>http://hanks.xyz/2015/12/29/react-viewpager/</id>
    <published>2015-12-29T10:11:29.000Z</published>
    <updated>2015-12-29T10:40:04.000Z</updated>
    <content type="html"><![CDATA[<p>ViewPager在Android中的使用率也算是非常高的,React-Native也提供了类似Android的ViewPager组件,<code>ViewPagerAndroid</code> , 使用 <code>ViewPagerAndroid</code>可以轻松实现Android中的ViewPager.<br><img src="http://file.bmob.cn/M02/28/37/oYYBAFaCLeqAHyUJABoVzaZyVT0309.gif" alt="ViewPager"><br><a id="more"></a><br>使用 uiautomatorviewer 来查看一下布局,确实也就是Android原生的 <code>ViewPager</code>.<br><img src="http://file.bmob.cn/M02/28/37/oYYBAFaCLgiAUKPYAAOGa8ySm0w899.png" alt="ViewPager"></p>
<p><strong>声明ViewPagerAndroid</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> &#123;</span><br><span class="line">  ViewPagerAndroid,</span><br><span class="line">&#125;</span> = React;</span><br></pre></td></tr></table></figure></p>
<p>声明之后就可以使用了.在render 函数中返回 <code>&lt;ViewPagerAndroid&gt;&lt;/ViewPagerAndroid&gt;</code></p>
<p><strong>把ViewPagerAndroid添加到界面</strong><br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">ViewPagerAndroid</span></span><br><span class="line">  style=&#123;styles.viewPager&#125;</span><br><span class="line">  initialPage=&#123;<span class="number">0</span>&#125;</span><br><span class="line">  onPageScroll=&#123;this.onPageScroll&#125;</span><br><span class="line">  onPageSelected=&#123;this.onPageSelected&#125;</span><br><span class="line">  <span class="keyword">ref</span>=&#123;viewPager =&gt; &#123; this.viewPager = viewPager; &#125;&#125;&gt;</span><br><span class="line">  &#123;pages&#125;</span><br><span class="line">&lt;/<span class="type">ViewPagerAndroid</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>给ViewPagerAndroid添加内容</strong><br>ViewPagerAndroid 的内容是 {pages}, pages是一个数组,里面是一组子view, 通过push方法添加view</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">var pages = [];</span><br><span class="line">for (var i = 0; i <span class="tag">&lt; <span class="attribute">PAGES</span>; <span class="attribute">i</span>++) &#123;</span><br><span class="line">  <span class="attribute">var</span> <span class="attribute">pageStyle</span> = &#123;</span><br><span class="line">    <span class="attribute">backgroundColor:</span> <span class="attribute">BGCOLOR</span>[<span class="attribute">i</span> % <span class="attribute">BGCOLOR.length</span>],</span><br><span class="line">    <span class="attribute">flex:</span> <span class="attribute">1</span>,</span><br><span class="line">    <span class="attribute">alignItems:</span> '<span class="attribute">stretch</span>'</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attribute">pages.push</span>(</span><br><span class="line">    &lt;<span class="attribute">View</span> <span class="attribute">key</span>=<span class="value">&#123;i&#125;</span> <span class="attribute">style</span>=<span class="value">&#123;pageStyle&#125;</span> <span class="attribute">collapsable</span>=<span class="value">&#123;false&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Image</span></span><br><span class="line">        <span class="attribute">style</span>=<span class="value">&#123;styles.image&#125;</span></span><br><span class="line">        <span class="attribute">source</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">uri</span>: <span class="variable">IMAGE</span>_<span class="variable">URIS</span>[<span class="variable">i</span> % <span class="variable">BGCOLOR.length</span>]&#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">      /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi"></span><br><span class="line">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  Image,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableWithoutFeedback,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">  View,</span><br><span class="line">  ViewPagerAndroid,</span><br><span class="line">  BackAndroid,</span><br><span class="line">&#125; = React;</span><br><span class="line"><span class="keyword">var</span> PAGES = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> BGCOLOR = [<span class="string">'#fdc08e'</span>, <span class="string">'#fff6b9'</span>, <span class="string">'#99d1b7'</span>, <span class="string">'#dde5fe'</span>, <span class="string">'#f79273'</span>];</span><br><span class="line"><span class="keyword">var</span> IMAGE_URIS = [</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1410/20141008tleBaldridge001h990.jpg'</span>,</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1409/volcanicpillar_vetter_960.jpg'</span>,</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1409/m27_snyder_960.jpg'</span>,</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1409/PupAmulti_rot0.jpg'</span>,</span><br><span class="line">  <span class="string">'http://apod.nasa.gov/apod/image/1510/lunareclipse_27Sep_beletskycrop4.jpg'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">BackAndroid.addEventListener(<span class="string">'hardwareBackPress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(_navigator == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(_navigator.getCurrentRoutes().length === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _navigator.pop();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _navigator ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ViewPager  = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    _navigator = <span class="keyword">this</span>.props.navigator;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      page: <span class="number">0</span>,</span><br><span class="line">      animationsAreEnabled: <span class="literal">true</span>,</span><br><span class="line">      progress: &#123;</span><br><span class="line">        position: <span class="number">0</span>,</span><br><span class="line">        offset: <span class="number">0</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  onPageSelected: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;page: e.nativeEvent.position&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onPageScroll: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;progress: e.nativeEvent&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  move: <span class="function"><span class="keyword">function</span>(<span class="params">delta</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> page = <span class="keyword">this</span>.state.page + delta;</span><br><span class="line">    <span class="keyword">this</span>.go(page);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  go: <span class="function"><span class="keyword">function</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.animationsAreEnabled) &#123;</span><br><span class="line">      <span class="keyword">this</span>.viewPager.setPage(page);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.viewPager.setPageWithoutAnimation(page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;page&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pages = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; PAGES; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> pageStyle = &#123;</span><br><span class="line">        backgroundColor: BGCOLOR[i % BGCOLOR.length],</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        alignItems: <span class="string">'stretch'</span></span><br><span class="line">      &#125;;</span><br><span class="line">      pages.push(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">key</span>=<span class="value">&#123;i&#125;</span> <span class="attribute">style</span>=<span class="value">&#123;pageStyle&#125;</span> <span class="attribute">collapsable</span>=<span class="value">&#123;false&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;styles.image&#125;</span></span><br><span class="line">            <span class="attribute">source</span>=<span class="value">&#123;&#123;uri:</span> <span class="attribute">IMAGE_URIS</span>[<span class="attribute">i</span> % <span class="attribute">BGCOLOR.length</span>]&#125;&#125;</span><br><span class="line">          /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      )</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> &#123; page, animationsAreEnabled &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="title">ViewPagerAndroid</span></span><br><span class="line">           <span class="attribute">style</span>=<span class="value">&#123;styles.viewPager&#125;</span></span><br><span class="line">           <span class="attribute">initialPage</span>=<span class="value">&#123;0&#125;</span></span><br><span class="line">           <span class="attribute">onPageScroll</span>=<span class="value">&#123;this.onPageScroll&#125;</span></span><br><span class="line">           <span class="attribute">onPageSelected</span>=<span class="value">&#123;this.onPageSelected&#125;</span></span><br><span class="line">           <span class="attribute">ref</span>=<span class="value">&#123;viewPager</span> =&gt;</span> &#123; this.viewPager = viewPager; &#125;&#125;&gt;</span><br><span class="line">           &#123;pages&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="title">ViewPagerAndroid</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      )</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">    container: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">      backgroundColor: <span class="string">'white'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    imageContainer: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">      alignItems: <span class="string">'stretch'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    image: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    viewPager: &#123;</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ViewPager;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/hanks-zyh/Hrn" target="_blank" rel="external">github地址</a></p>
<blockquote>
<p>文章来自: <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>ViewPager在Android中的使用率也算是非常高的,React-Native也提供了类似Android的ViewPager组件,<code>ViewPagerAndroid</code> , 使用 <code>ViewPagerAndroid</code>可以轻松实现Android中的ViewPager.<br><img src="http://file.bmob.cn/M02/28/37/oYYBAFaCLeqAHyUJABoVzaZyVT0309.gif" alt="ViewPager"><br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 的Navigator控制界面跳转]]></title>
    <link href="http://hanks.xyz/2015/12/24/react-navigator/"/>
    <id>http://hanks.xyz/2015/12/24/react-navigator/</id>
    <published>2015-12-24T11:08:08.000Z</published>
    <updated>2015-12-29T10:41:40.000Z</updated>
    <content type="html"><![CDATA[<p>例子:<br><img src="http://file.bmob.cn/M02/17/17/oYYBAFZ70QWAYn4DABTb3uKu6GM103.gif" alt="界面跳转"></p>
<p>回顾一下,一个简单的界面包含一下几块<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Sample React Native App</span><br><span class="line"> * https://github.com/hanks-zyh</span><br><span class="line"> */</span></span><br><span class="line"><span class="pi"></span><br><span class="line">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">&#125; =  React;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AwesomeProject = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="title">Text</span>&gt;</span>Hello, hanks<span class="tag">&lt;/<span class="title">Text</span>&gt;</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; AwesomeProject);</span><br></pre></td></tr></table></figure>
<p>接下来练习<code>Navigator</code>的使用,<code>Navigator</code>标签负责不同界面之间的跳转;</p>
<p><a href="http://facebook.github.io/react-native/docs/navigator.html#content" target="_blank" rel="external">官方文档</a></p>
<h2 id="基础用法">基础用法</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;Navigator</span><br><span class="line">    initialRoute=&#123;&#123;name: <span class="string">'My First Scene'</span>, index: <span class="number">0</span>&#125;&#125;</span><br><span class="line">    renderScene=&#123;(route, navigator) =&gt;</span><br><span class="line">      &lt;MySceneComponent</span><br><span class="line">        name=&#123;route.name&#125;</span><br><span class="line">        onForward=&#123;() =&gt; &#123;</span><br><span class="line">          var nextIndex = route.index + <span class="number">1</span>;</span><br><span class="line">          navigator.push(&#123;</span><br><span class="line">            name: <span class="string">'Scene '</span> + nextIndex,</span><br><span class="line">            index: nextIndex,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        onBack=&#123;() =&gt; &#123;</span><br><span class="line">          if (route.index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            navigator.pop();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure>
<p>基础方法 <code>push</code>, <code>pop</code>, <strong>Navigator</strong> 的<code>renderScene</code> 方法可以获取到 <code>navigator</code> 和 <code>route</code>对象,然后就可使用 <code>navigator</code>的  <code>push</code>, <code>pop</code> 控制界面.</p>
<p>获取  <code>navigator</code> 和 <code>route</code> 的例子</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//...</span><br><span class="line">&lt;Navigator</span><br><span class="line">  ddebugOverlay=&#123;false&#125;</span><br><span class="line">  initialRoute=&#123;&#123; title: <span class="string">'Main'</span>, id:<span class="string">'http'</span>&#125;&#125;</span><br><span class="line">  configureScence=&#123;&#123; configureScence &#125;&#125;</span><br><span class="line">  renderScene=&#123;renderSceneAndroid&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">var _navigator; //全局navigator对象</span><br><span class="line">//...</span><br><span class="line">renderSceneAndroid: <span class="keyword">function</span>(route, navigator)&#123;</span><br><span class="line">  _navigator = navigator;</span><br><span class="line"></span><br><span class="line">  if(route.id === <span class="string">'http'</span>)&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;HttpView navigator=&#123;navigator&#125; route=&#123;route&#125; /&gt;</span><br><span class="line">     );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if(route.id === <span class="string">'shop'</span>)&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;ShopView navigator=&#123;navigator&#125; route=&#123;route&#125;/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//...</span><br><span class="line">// 调用push 跳转</span><br><span class="line">&lt;TouchableOpacity onPress=&#123; () =&gt; _navigator.push(&#123;title:<span class="string">'Http'</span>,id:<span class="string">'http'</span>&#125;) &#125;  style=&#123; styles.button &#125;&gt;</span><br><span class="line">  &lt;Text&gt;NetWork&lt;/Text&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br></pre></td></tr></table></figure>
<p>根据route的id来判断跳到哪个界面, 调用 push 添加新的界面, push的参数为 route:字典</p>
<h2 id="安卓返回按键监听">安卓返回按键监听</h2><p>http.js 中获取 navigator 对象,调用 <code>pop</code> 方法退出界面<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BackAndroid.addEventListener(<span class="string">'hardwareBackPress'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(_navigator == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(_navigator.getCurrentRoutes().length === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _navigator.pop();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/hanks-zyh/Hrn" target="_blank" rel="external">githb源码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>例子:<br><img src="http://file.bmob.cn/M02/17/17/oYYBAFZ70QWAYn4DABTb3uKu6GM103.gif" alt="界面跳转"></p>
<p>回顾一下,一个简单的界面包含一下几块<br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 网络请求]]></title>
    <link href="http://hanks.xyz/2015/12/23/react-network/"/>
    <id>http://hanks.xyz/2015/12/23/react-network/</id>
    <published>2015-12-23T09:53:43.000Z</published>
    <updated>2015-12-23T10:56:24.000Z</updated>
    <content type="html"><![CDATA[<p>大部分的app都需要进行网络连接,通过网络获取服务器的数据,然后更新app的界面展示内容,React-Native自然拥有网络的相关操作.<br><a href="https://facebook.github.io/react-native/docs/network.html#content" target="_blank" rel="external">官方文档</a><br><a id="more"></a></p>
<h2 id="fetch">fetch</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fetch</span><span class="params">(<span class="string">'https://mywebsite.com/endpoint/'</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>自定义请求的方法,请求头,请求体</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fetch<span class="list">(<span class="quoted">'https</span><span class="keyword">://mywebsite</span>.com/endpoint/', &#123;</span><br><span class="line">  method: <span class="quoted">'POST</span>',</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="quoted">'Accept</span>': <span class="quoted">'application/json</span>',</span><br><span class="line">    <span class="quoted">'Content-Type</span>': <span class="quoted">'application/json</span>',</span><br><span class="line">  &#125;,</span><br><span class="line">  body: JSON.stringify<span class="list">(&#123;</span><br><span class="line">    firstParam: <span class="quoted">'yourValue</span>',</span><br><span class="line">    secondParam: <span class="quoted">'yourOtherValue</span>',</span><br><span class="line">  &#125;)</span></span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>//<a href="https://suggest.taobao.com/sug?code=utf-8&amp;q=%E6%89%8B%E6%9C%BA" target="_blank" rel="external">https://suggest.taobao.com/sug?code=utf-8&amp;q=%E6%89%8B%E6%9C%BA</a></p>
<h3 id="异步">异步</h3><p>使用<code>then</code>  </p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://mywebsite.com/endpoint.php'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.text())</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(responseText)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(responseText);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>使用 <code>async/await</code> 在异步函数中调用</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">async <span class="title">getUsersFromApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    let response = <span class="function">await <span class="title">fetch</span><span class="params">(<span class="string">'https://mywebsite.com/endpoint/'</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> response.users;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(<span class="keyword">error</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">error</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="WebSocket">WebSocket</h2><p><a href="https://facebook.github.io/react-native/docs/network.html#websocket" target="_blank" rel="external">websocket</a></p>
<h2 id="XMLHttpRequest">XMLHttpRequest</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.onreadystatechange = <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>, request.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.open(<span class="string">'GET'</span>, <span class="string">'https://mywebsite.com/endpoint.php'</span>);</span><br><span class="line">request.send();</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="例子">例子</h2><p><img src="http://file.bmob.cn/M02/14/F5/oYYBAFZ6e6KAZGvcACWsrjngMOY887.gif" alt="react-network"></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">var React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line">var &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Image,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">  ToastAndroid,</span><br><span class="line">  Alert,</span><br><span class="line">&#125; = React;</span><br><span class="line">var AwesomeProject = React.createClass(&#123;</span><br><span class="line">  getByFetch : function()&#123;</span><br><span class="line">    fetch(<span class="string">'https://m.baidu.com'</span> )</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.text())</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(responseText)</span> =&gt;</span> &#123;</span><br><span class="line">      ToastAndroid.show(responseText, ToastAndroid.SHORT);</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="keyword">new</span> Date().getMilliseconds());</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(error);</span><br><span class="line">    &#125;).done();</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'请求是异步的:'</span>+<span class="keyword">new</span> Date().getMilliseconds());</span><br><span class="line">  &#125;,</span><br><span class="line">  getByXMLHttpRequest : function()&#123;</span><br><span class="line">    var request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">        ToastAndroid.show(<span class="string">'success'</span>+ request.responseText ,ToastAndroid.SHORT);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">'error'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    request.open(<span class="string">'GET'</span>, <span class="string">'https://m.baidu.com'</span>);</span><br><span class="line">    request.send();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">postSource</span>:  function()&#123;</span><br><span class="line">    fetch(<span class="string">'https://m.baidu.com'</span> )</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.text())</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="params">(responseText)</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="regexp">//</span> Works <span class="literal">on</span> both iOS <span class="keyword">and</span> Android</span><br><span class="line">        Alert.alert(</span><br><span class="line">          <span class="string">'请求结果'</span>,</span><br><span class="line">          responseText.substring(<span class="number">0</span>,<span class="number">100</span>),</span><br><span class="line">          [</span><br><span class="line">            &#123;<span class="attribute">text</span>: <span class="string">'Ask me later'</span>, <span class="attribute">onPress</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">'Ask me later pressed'</span>)&#125;,</span><br><span class="line">            &#123;<span class="attribute">text</span>: <span class="string">'Cancel'</span>, <span class="attribute">onPress</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">'Cancel Pressed'</span>), <span class="attribute">style</span>: <span class="string">'cancel'</span>&#125;,</span><br><span class="line">            &#123;<span class="attribute">text</span>: <span class="string">'OK'</span>, <span class="attribute">onPress</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">'OK Pressed'</span>)&#125;,</span><br><span class="line">          ]</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(error);</span><br><span class="line">    &#125;).done();</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">render</span>: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attribute">flex</span>:<span class="number">1</span>, <span class="attribute">justifyContent</span>:<span class="string">'center'</span>, <span class="attribute">alignItems</span>:<span class="string">'center'</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>.getByFetch&#125; style=&#123; styles.button &#125;&gt;</span><br><span class="line">          &lt;Text  &gt;GET <span class="keyword">by</span> fetch&lt;/Text&gt;</span><br><span class="line">        &lt;/TouchableOpacity&gt;</span><br><span class="line">        &lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>.getByXMLHttpRequest&#125; style=&#123; styles.button &#125;&gt;</span><br><span class="line">          &lt;Text &gt;GET <span class="keyword">by</span> XmlHttpRequest&lt;/Text&gt;</span><br><span class="line">        &lt;/TouchableOpacity&gt;</span><br><span class="line">        &lt;TouchableOpacity onPress= &#123; <span class="keyword">this</span>.postSource &#125; style=&#123; styles.button &#125;&gt;</span><br><span class="line">          &lt;Text &gt;POST&lt;/Text&gt;</span><br><span class="line">        &lt;/TouchableOpacity&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var styles = StyleSheet.create(&#123;</span><br><span class="line">    <span class="attribute">button</span>: &#123;</span><br><span class="line">      width : <span class="number">180</span>,</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="attribute">justifyContent</span>:<span class="string">'center'</span>,</span><br><span class="line">      <span class="attribute">backgroundColor</span>: <span class="string">'#e2e2e2'</span>,</span><br><span class="line">      <span class="attribute">alignItems</span>:<span class="string">'center'</span>,</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, <span class="function"><span class="params">()</span> =&gt;</span> AwesomeProject);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>大部分的app都需要进行网络连接,通过网络获取服务器的数据,然后更新app的界面展示内容,React-Native自然拥有网络的相关操作.<br><a href="https://facebook.github.io/react-native/docs/network.html#content">官方文档</a><br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native 组件练习-购物app侧滑菜单]]></title>
    <link href="http://hanks.xyz/2015/12/22/react-components/"/>
    <id>http://hanks.xyz/2015/12/22/react-components/</id>
    <published>2015-12-22T10:58:22.000Z</published>
    <updated>2015-12-22T11:01:38.000Z</updated>
    <content type="html"><![CDATA[<p>参照官方例子练习组件的使用,练习View Image Text 还有Android平台的DrawerLayoutAndroid<br>效果图:<br><img src="http://file.bmob.cn/M02/11/DF/oYYBAFZ5LF6AVgO5AIY4EJ1JHfk120.gif" alt="React-Native"></p>
<h2 id="React-Native_中的_width,height的_100%">React-Native  中的 width,height的 100%</h2><p>在React-Native 中没有百分比这样的宽高,但是有替代的,具体见 <a href="https://github.com/facebook/css-layout/issues/57#ref-issue-86696744" target="_blank" rel="external">issue</a><br><code>flex:1</code> 相当于 <code>height:100%</code><br><code>alignSelf:&#39;stretch&#39;</code> 相当于 <code>width:100%</code></p>
<a id="more"></a>
<h2 id="React-Native_的style">React-Native 的style</h2><ul>
<li>直接写在View中</li>
</ul>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="constant">Text</span> style=<span class="expansion">&#123;&#123;<span class="symbol">fontFamily:</span> <span class="string">'notoserif'</span>, <span class="symbol">fontStyle:</span> <span class="string">'italic'</span>, <span class="symbol">fontWeight:</span> <span class="string">'bold'</span>&#125;&#125;</span>&gt;</span><br><span class="line"><span class="constant">NotoSerif</span> <span class="constant">Bold</span> <span class="constant">Italic</span></span><br><span class="line">&lt;<span class="regexp">/Text&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 StyleSheet.createClass 创建</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var styles = StyleSheet.create(&#123;</span><br><span class="line">  base: &#123;</span><br><span class="line">    width: <span class="number">38</span>,</span><br><span class="line">    height: <span class="number">38</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  background: &#123;</span><br><span class="line">    backgroundColor: <span class="string">'#222222'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  active: &#123;</span><br><span class="line">    borderWidth: <span class="number">2</span>,</span><br><span class="line">    borderColor: <span class="string">'#00ff00'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>以上两种混合</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;[styles.remainder,</span> &#123;<span class="attribute">color:</span> '#<span class="attribute">a1a1a1</span>'&#125;]&#125;&gt;</span></span><br><span class="line">simple text</span><br><span class="line"><span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Flex">Flex</h2><p><a href="http://hanks.xyz/2015/12/21/react-flexbox/">React-Native中的布局 </a></p>
<h2 id="DrawerLayoutAndroid侧滑菜单">DrawerLayoutAndroid侧滑菜单</h2><p><code>DrawerLayoutAndroid</code> 只在android中,它的 <code>renderNavigationView</code> 代表侧滑菜单内容, 子View代表主界面布局<br>通过<code>ref={(drawer) =&gt; { this.drawer = drawer; }}</code> 获取<code>drawer</code>对象<br>打开: <code>openDrawer()</code><br>关闭: <code>closeDrawer()</code></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">DrawerLayoutAndroid</span></span><br><span class="line">  drawerWidth=&#123;<span class="number">300</span>&#125;</span><br><span class="line">  drawerPosition=&#123;<span class="type">DrawerLayoutAndroid</span>.positions.<span class="type">Left</span>&#125;</span><br><span class="line">  <span class="keyword">ref</span>=&#123;(drawer) =&gt; &#123; this.drawer = drawer; &#125;&#125;</span><br><span class="line">  renderNavigationView=&#123;() =&gt; navigationView&#125;&gt;</span><br><span class="line">  &lt;<span class="type">View</span>&gt;&lt;/<span class="type">View</span>&gt;</span><br><span class="line">&lt;/<span class="type">DrawerLayoutAndroid</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="按钮的点击效果">按钮的点击效果</h2><ul>
<li><a href="https://facebook.github.io/react-native/docs/touchablehighlight.html#content" target="_blank" rel="external">TouchableHighlight</a></li>
<li><a href="https://facebook.github.io/react-native/docs/touchablenativefeedback.html#content" target="_blank" rel="external">TouchableNativeFeedback</a></li>
<li><a href="https://facebook.github.io/react-native/docs/touchableopacity.html#content" target="_blank" rel="external">TouchableOpacity</a></li>
<li><a href="https://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#content" target="_blank" rel="external">TouchableWithoutFeedback</a></li>
</ul>
<p>根据需要的效果选择</p>
<h2 id="点击函数的触发">点击函数的触发</h2><p>定义函数</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openDrawer: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.drawer.openDrawer();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>设置点击事件</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onPress=&#123;<span class="keyword">this</span>.openDrawer&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">/**</span><br><span class="line"> * hanks</span><br><span class="line"> * https://github.com/hanks-zyh</span><br><span class="line"> */</span><br><span class="line">'use strict';</span><br><span class="line"></span><br><span class="line">var React = require('react-native');</span><br><span class="line">var &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Image,</span><br><span class="line">  DrawerLayoutAndroid,</span><br><span class="line">  ProgressBarAndroid,</span><br><span class="line">  ScrollView,</span><br><span class="line">  ListView,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">&#125; = React;</span><br><span class="line">var AwesomeProject = React.createClass(&#123;</span><br><span class="line">  openDrawer: function () &#123;</span><br><span class="line">      this.drawer.openDrawer();</span><br><span class="line">  &#125;,</span><br><span class="line">  getInitialState:function()&#123;</span><br><span class="line">    var ds = new ListView.DataSource( &#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125; );</span><br><span class="line">    return &#123;</span><br><span class="line">      dataSource : ds.cloneWithRows(['CLOTHES','PACKAGES','SHOES',]),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: function() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var navigationView = (</span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;<span class="variable">flex</span>: 1, <span class="variable">backgroundColor</span>: '<span class="begin-block">#fff</span>'&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/img.hb.aicdn.com</span>/735<span class="variable">afbfa</span>2<span class="variable">f</span>6<span class="variable">fee</span>24<span class="variable">d</span>1<span class="variable">a</span>10<span class="variable">e</span>1<span class="variable">a</span>22<span class="variable">b</span>23<span class="variable">c</span>63<span class="variable">f</span>707<span class="variable">ea</span>82281<span class="variable">c</span>3<span class="variable">-ajdFRe</span>_<span class="variable">fw</span>658' &#125;&#125;</span><span class="xml"><span class="tag"> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;  <span class="variable">height</span>:200 &#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ListView</span></span><br><span class="line">          <span class="attribute">dataSource</span>=<span class="value">&#123;this.state.dataSource&#125;</span></span><br><span class="line">          <span class="attribute">renderRow</span>=<span class="value">&#123;</span> (<span class="attribute">rowData</span>) =&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;</span><br><span class="line">                <span class="variable">height</span>: 56,</span><br><span class="line">                <span class="variable">flexDirection</span> : '<span class="variable">row</span>',</span><br><span class="line">                <span class="variable">alignItems</span>:'<span class="variable">center</span>',</span><br><span class="line">                <span class="variable">paddingLeft</span>: 20,</span><br><span class="line">              &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span> = &#123; <span class="attribute">require</span>('<span class="attribute">.</span>/<span class="attribute">img</span>/<span class="attribute">list4.png</span>') &#125; <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">height</span>:10, <span class="variable">width</span>:10, <span class="variable">margin</span>:8 &#125;&#125;</span><span class="xml"><span class="tag">/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.listItem</span> &#125;&gt;</span>&#123;rowData&#125;<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">           &#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="title">DrawerLayoutAndroid</span></span><br><span class="line">        <span class="attribute">drawerWidth</span>=<span class="value">&#123;300&#125;</span></span><br><span class="line">        <span class="attribute">drawerPosition</span>=<span class="value">&#123;DrawerLayoutAndroid.positions.Left&#125;</span></span><br><span class="line">        <span class="attribute">ref</span>=<span class="value">&#123;(drawer)</span> =&gt;</span> &#123; this.drawer = drawer; &#125;&#125;</span><br><span class="line">        renderNavigationView=&#123;() =&gt; navigationView&#125;</span><br><span class="line">        &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="title">ScrollView</span> <span class="attribute">contentContainerStyle</span>=<span class="value">&#123;styles.contentContainer&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span> = </span></span><span class="expression">&#123;&#123;</span><br><span class="line">          <span class="variable">backgroundColor</span>: '<span class="begin-block">#f</span>4<span class="variable">ec</span>34',</span><br><span class="line">          <span class="variable">height</span>:54,</span><br><span class="line">          <span class="variable">flexDirection</span>:'<span class="variable">row</span>',</span><br><span class="line">          <span class="variable">justifyContent</span>:'<span class="variable">space-between</span>',</span><br><span class="line">          <span class="variable">alignItems</span>:'<span class="variable">center</span>',</span><br><span class="line">          <span class="variable">paddingLeft</span>: 20,</span><br><span class="line">          <span class="variable">paddingRight</span>:20,</span><br><span class="line">        &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">TouchableOpacity</span> <span class="attribute">onPress</span>=<span class="value">&#123;this.openDrawer&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>=<span class="value">&#123;require('.</span>/<span class="attribute">img</span>/<span class="attribute">list4.png</span>')&#125; <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;  <span class="variable">width</span>: 20, <span class="variable">height</span>: 20&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="title">TouchableOpacity</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:18,  <span class="variable">color</span>:'#484848' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>SHOP<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span>  <span class="attribute">source</span>=<span class="value">&#123;require('.</span>/<span class="attribute">img</span>/<span class="attribute">search.png</span>')&#125; <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123;  <span class="variable">width</span>: 20, <span class="variable">height</span>: 20&#125;&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">http</span>:/<span class="end-block">/img.hb.aicdn.com</span><span class="end-block">/cbf</span>3<span class="variable">ebcae</span>08<span class="variable">ef</span>62<span class="variable">ef</span>02<span class="variable">dd</span>61<span class="variable">aa</span>2407414<span class="variable">dc</span>64<span class="variable">e</span>794150313<span class="variable">-KRUD</span>1<span class="variable">s</span>_<span class="variable">fw</span>658' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">          <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">height</span>: 220, <span class="variable">margin</span>: 20&#125;&#125;</span><span class="xml"><span class="tag">  /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:16,  <span class="variable">color</span>:'#484848', <span class="variable">alignSelf</span>:'<span class="variable">center</span>' &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>HOT PRODUCTS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoRow</span> &#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">YQAPKVXXXXa</span>9<span class="variable">XFXXwu</span>0<span class="variable">bFXXX.png</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span> &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName</span> &#125;&gt;</span>TEL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$99<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">DteFKVXXXXXQapXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span>  <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>ARFL JUYHS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$34.2<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">dQGTKVXXXXaaXVXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TKLL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$182<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:16,  <span class="variable">color</span>:'#484848',  <span class="variable">alignSelf</span>:'<span class="variable">center</span>' , <span class="variable">marginTop</span>:20 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>NEW COLLECTIONS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoRow</span> &#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">rzGNKVXXXXbGXVXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TEL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$99<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">rzGNKVXXXXbGXVXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>ARFL JUYHS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$34.2<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">uBUxKVXXXXcGXpXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TKLL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$182<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=</span></span><span class="expression">&#123;&#123; <span class="variable">fontSize</span>:16,  <span class="variable">color</span>:'#484848',  <span class="variable">alignSelf</span>:'<span class="variable">center</span>' , <span class="variable">marginTop</span>:20 &#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>MOST POP<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoRow</span> &#125;&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">Rqa</span>3<span class="variable">KVXXXXb</span>6<span class="variable">XpXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TEL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$99<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">Rqa</span>3<span class="variable">KVXXXXb</span>6<span class="variable">XpXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>ARFL JUYHS<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$34.2<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">View</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">source</span>= </span></span><span class="expression">&#123;&#123; <span class="variable">uri</span>: '<span class="variable">https</span>:/<span class="end-block">/gw.alicdn.com</span><span class="end-block">/bao</span><span class="end-block">/uploaded</span><span class="end-block">/TB</span>1<span class="variable">lMksKVXXXXa</span>7<span class="variable">XpXXSutbFXXX.jpg</span>_270<span class="variable">x</span>270<span class="variable">Q</span>90<span class="variable">.jpg</span>' &#125;&#125;</span><span class="xml"><span class="tag"></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">&#123;</span> <span class="attribute">styles.photoItem</span>  &#125;  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoName&#125;</span>&gt;</span>TKLL ORGES<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Text</span> <span class="attribute">style</span>=<span class="value">&#123;styles.photoPrice</span> &#125;&gt;</span>$182<span class="tag">&lt;/<span class="title">Text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">DrawerLayoutAndroid</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var styles = StyleSheet.create(&#123;</span><br><span class="line"> contentContainer: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> listItem:&#123;</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"> photoRow:&#123;</span><br><span class="line">   flexDirection:'row',</span><br><span class="line">   justifyContent: 'space-between',</span><br><span class="line">   paddingLeft: 20,</span><br><span class="line">   paddingRight: 20,</span><br><span class="line">   marginTop:10,</span><br><span class="line"> &#125;,</span><br><span class="line"> photoItem:&#123;</span><br><span class="line">   height: 120,</span><br><span class="line">   width:90 ,</span><br><span class="line">   alignItems: 'stretch' ,</span><br><span class="line">   alignSelf:'center'</span><br><span class="line"> &#125;,</span><br><span class="line"> photoName:&#123;</span><br><span class="line">   fontSize:14,</span><br><span class="line">   color:'#f39d7f',</span><br><span class="line">   alignSelf:'center',</span><br><span class="line"> &#125;,</span><br><span class="line"> photoPrice:&#123;</span><br><span class="line">   fontSize:12,  color:'#484848', alignSelf:'center'</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent('AwesomeProject', () =&gt; AwesomeProject);</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>参照官方例子练习组件的使用,练习View Image Text 还有Android平台的DrawerLayoutAndroid<br>效果图:<br><img src="http://file.bmob.cn/M02/11/DF/oYYBAFZ5LF6AVgO5AIY4EJ1JHfk120.gif" alt="React-Native"></p>
<h2 id="React-Native_中的_width,height的_100%">React-Native  中的 width,height的 100%</h2><p>在React-Native 中没有百分比这样的宽高,但是有替代的,具体见 <a href="https://github.com/facebook/css-layout/issues/57#ref-issue-86696744">issue</a><br><code>flex:1</code> 相当于 <code>height:100%</code><br><code>alignSelf:&#39;stretch&#39;</code> 相当于 <code>width:100%</code></p>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native中的布局]]></title>
    <link href="http://hanks.xyz/2015/12/21/react-flexbox/"/>
    <id>http://hanks.xyz/2015/12/21/react-flexbox/</id>
    <published>2015-12-21T07:11:14.000Z</published>
    <updated>2015-12-29T14:10:12.000Z</updated>
    <content type="html"><![CDATA[<p>React-Native 使用 FlexBox布局来放置元素</p>
<blockquote>
<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。</p>
</blockquote>
<p><a href="http://facebook.github.io/react-native/docs/flexbox.html#content" target="_blank" rel="external">Flexbox</a></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alignItems <span class="class"><span class="keyword">enum</span>('<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">stretch</span>')</span></span><br><span class="line"></span><br><span class="line">alignSelf <span class="class"><span class="keyword">enum</span>('<span class="title">auto</span>', '<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">stretch</span>')</span></span><br><span class="line"></span><br><span class="line">flex number</span><br><span class="line"></span><br><span class="line">flexDirection <span class="class"><span class="keyword">enum</span>('<span class="title">row</span>', '<span class="title">column</span>')</span></span><br><span class="line"></span><br><span class="line">flexWrap <span class="class"><span class="keyword">enum</span>('<span class="title">wrap</span>', '<span class="title">nowrap</span>')</span></span><br><span class="line"></span><br><span class="line">justifyContent <span class="class"><span class="keyword">enum</span>('<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">space</span>-<span class="title">between</span>', '<span class="title">space</span>-<span class="title">around</span>')</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="练习">练习</h2><p><img src="https://dn-coding-net-production-pp.qbox.me/711188c5-babe-478d-989f-0bd70916c0ea.png" alt="flex"></p>
<p><strong>一个点</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">box</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">5</span>,</span><br><span class="line">  height:<span class="number">65</span>,</span><br><span class="line">  width:<span class="number">65</span>,</span><br><span class="line">  borderRadius:<span class="number">5</span>,</span><br><span class="line">  backgroundColor:<span class="string">'#ffffff'</span>,</span><br><span class="line">  justifyContent: <span class="string">'center'</span>,</span><br><span class="line">  alignItems:<span class="string">'center'</span>,</span><br><span class="line">  margin:<span class="number">10</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br><span class="line"><span class="tag">item</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">borderRadius</span>:<span class="value"><span class="number">7.5</span>,</span><br><span class="line">  height:<span class="number">15</span>,</span><br><span class="line">  width:<span class="number">15</span>,</span><br><span class="line">  backgroundColor:<span class="string">'#333333'</span></span><br><span class="line"></span></span></span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>两个点</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box2&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">box2</span>:&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">65</span>,</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">65</span>,</span><br><span class="line">    <span class="attribute">borderRadius</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attribute">backgroundColor</span>:<span class="string">'#ffffff'</span>,</span><br><span class="line">    <span class="attribute">flexDirection</span>:<span class="string">'column'</span>,</span><br><span class="line">    <span class="attribute">justifyContent</span>: <span class="string">'space-between'</span>,</span><br><span class="line">    <span class="attribute">alignItems</span>:<span class="string">'center'</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p><strong>三个点</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box3&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item32</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item33</span>&#125;/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">box3</span>:<span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">5</span>,</span><br><span class="line">    margin:<span class="number">10</span>,</span><br><span class="line">    height:<span class="number">65</span>,</span><br><span class="line">    width:<span class="number">65</span>,</span><br><span class="line">    borderRadius:<span class="number">5</span>,</span><br><span class="line">    backgroundColor:<span class="string">'#ffffff'</span>,</span><br><span class="line">    flexDirection:<span class="string">'column'</span>,</span><br><span class="line">    justifyContent: <span class="string">'space-between'</span>,</span><br><span class="line">  </span></span></span>&#125;,</span><br><span class="line">  <span class="tag">item32</span>:<span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">borderRadius</span>:<span class="value"><span class="number">7.5</span>,</span><br><span class="line">    height:<span class="number">15</span>,</span><br><span class="line">    width:<span class="number">15</span>,</span><br><span class="line">    alignSelf:<span class="string">'center'</span>,</span><br><span class="line">    backgroundColor:<span class="string">'#333333'</span></span><br><span class="line">  </span></span></span>&#125;,</span><br><span class="line">  <span class="tag">item33</span>:<span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">alignSelf</span>:<span class="value"><span class="string">'flex-end'</span>,</span><br><span class="line">    borderRadius:<span class="number">7.5</span>,</span><br><span class="line">    height:<span class="number">15</span>,</span><br><span class="line">    width:<span class="number">15</span>,</span><br><span class="line">    backgroundColor:<span class="string">'#333333'</span></span><br><span class="line">  </span></span></span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>四个点</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box4&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column41</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column42</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">box4</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">5</span>,</span><br><span class="line">  margin:<span class="number">10</span>,</span><br><span class="line">  height:<span class="number">65</span>,</span><br><span class="line">  width:<span class="number">65</span>,</span><br><span class="line">  borderRadius:<span class="number">5</span>,</span><br><span class="line">  backgroundColor:<span class="string">'#ffffff'</span>,</span><br><span class="line">  justifyContent: <span class="string">'space-between'</span>,</span><br><span class="line">  flexDirection:<span class="string">'row'</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br><span class="line"><span class="tag">column41</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">justifyContent</span>:<span class="value"><span class="string">'space-between'</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br><span class="line"><span class="tag">column42</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">justifyContent</span>:<span class="value"><span class="string">'space-between'</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>五个点</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.box4&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column41</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column52</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.column42</span>&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>= &#123;<span class="attribute">styles.item</span>&#125;/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">column52</span>:<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">justifyContent</span>:<span class="value"><span class="string">'center'</span>,</span><br><span class="line"></span></span></span>&#125;,</span><br></pre></td></tr></table></figure>
<p>参考链接:<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><br><a href="http://segmentfault.com/a/1190000002658374" target="_blank" rel="external">http://segmentfault.com/a/1190000002658374</a></p>
<blockquote>
<p>文章出处 <a href="http://hanks.xyz">http://hanks.xyz</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>React-Native 使用 FlexBox布局来放置元素</p>
<blockquote>
<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。</p>
</blockquote>
<p><a href="http://facebook.github.io/react-native/docs/flexbox.html#content">Flexbox</a></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alignItems <span class="class"><span class="keyword">enum</span>('<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">stretch</span>')</span></span><br><span class="line"></span><br><span class="line">alignSelf <span class="class"><span class="keyword">enum</span>('<span class="title">auto</span>', '<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">stretch</span>')</span></span><br><span class="line"></span><br><span class="line">flex number</span><br><span class="line"></span><br><span class="line">flexDirection <span class="class"><span class="keyword">enum</span>('<span class="title">row</span>', '<span class="title">column</span>')</span></span><br><span class="line"></span><br><span class="line">flexWrap <span class="class"><span class="keyword">enum</span>('<span class="title">wrap</span>', '<span class="title">nowrap</span>')</span></span><br><span class="line"></span><br><span class="line">justifyContent <span class="class"><span class="keyword">enum</span>('<span class="title">flex</span>-<span class="title">start</span>', '<span class="title">flex</span>-<span class="title">end</span>', '<span class="title">center</span>', '<span class="title">space</span>-<span class="title">between</span>', '<span class="title">space</span>-<span class="title">around</span>')</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="React-Native" scheme="http://hanks.xyz/tags/React-Native/"/>
    
  </entry>
  
</feed>
